// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     __darwin_rune_t __min;
 *     __darwin_rune_t __max;
 *     __darwin_rune_t __map;
 *     __uint32_t *__types;
 * }
 * }
 */
public class _RuneEntry {

    _RuneEntry() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_INT.withName("__min"),
        Python_h.C_INT.withName("__max"),
        Python_h.C_INT.withName("__map"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("__types")
    ).withName("$anon$60:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt __min$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__min"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __darwin_rune_t __min
     * }
     */
    public static final OfInt __min$layout() {
        return __min$LAYOUT;
    }

    private static final long __min$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __darwin_rune_t __min
     * }
     */
    public static final long __min$offset() {
        return __min$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __min
     * }
     */
    public static int __min(MemorySegment struct) {
        return struct.get(__min$LAYOUT, __min$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __min
     * }
     */
    public static void __min(MemorySegment struct, int fieldValue) {
        struct.set(__min$LAYOUT, __min$OFFSET, fieldValue);
    }

    private static final OfInt __max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __darwin_rune_t __max
     * }
     */
    public static final OfInt __max$layout() {
        return __max$LAYOUT;
    }

    private static final long __max$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __darwin_rune_t __max
     * }
     */
    public static final long __max$offset() {
        return __max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __max
     * }
     */
    public static int __max(MemorySegment struct) {
        return struct.get(__max$LAYOUT, __max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __max
     * }
     */
    public static void __max(MemorySegment struct, int fieldValue) {
        struct.set(__max$LAYOUT, __max$OFFSET, fieldValue);
    }

    private static final OfInt __map$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__map"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __darwin_rune_t __map
     * }
     */
    public static final OfInt __map$layout() {
        return __map$LAYOUT;
    }

    private static final long __map$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __darwin_rune_t __map
     * }
     */
    public static final long __map$offset() {
        return __map$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __map
     * }
     */
    public static int __map(MemorySegment struct) {
        return struct.get(__map$LAYOUT, __map$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __map
     * }
     */
    public static void __map(MemorySegment struct, int fieldValue) {
        struct.set(__map$LAYOUT, __map$OFFSET, fieldValue);
    }

    private static final AddressLayout __types$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("__types"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint32_t *__types
     * }
     */
    public static final AddressLayout __types$layout() {
        return __types$LAYOUT;
    }

    private static final long __types$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint32_t *__types
     * }
     */
    public static final long __types$offset() {
        return __types$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint32_t *__types
     * }
     */
    public static MemorySegment __types(MemorySegment struct) {
        return struct.get(__types$LAYOUT, __types$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint32_t *__types
     * }
     */
    public static void __types(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(__types$LAYOUT, __types$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

