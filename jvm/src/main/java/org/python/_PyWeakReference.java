// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PyWeakReference {
 *     PyObject ob_base;
 *     PyObject *wr_object;
 *     PyObject *wr_callback;
 *     Py_hash_t hash;
 *     PyWeakReference *wr_prev;
 *     PyWeakReference *wr_next;
 *     vectorcallfunc vectorcall;
 * }
 * }
 */
public class _PyWeakReference {

    _PyWeakReference() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _object.layout().withName("ob_base"),
        Python_h.C_POINTER.withName("wr_object"),
        Python_h.C_POINTER.withName("wr_callback"),
        Python_h.C_LONG.withName("hash"),
        Python_h.C_POINTER.withName("wr_prev"),
        Python_h.C_POINTER.withName("wr_next"),
        Python_h.C_POINTER.withName("vectorcall")
    ).withName("_PyWeakReference");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ob_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ob_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final GroupLayout ob_base$layout() {
        return ob_base$LAYOUT;
    }

    private static final long ob_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final long ob_base$offset() {
        return ob_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static MemorySegment ob_base(MemorySegment struct) {
        return struct.asSlice(ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static void ob_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    private static final AddressLayout wr_object$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wr_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *wr_object
     * }
     */
    public static final AddressLayout wr_object$layout() {
        return wr_object$LAYOUT;
    }

    private static final long wr_object$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *wr_object
     * }
     */
    public static final long wr_object$offset() {
        return wr_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *wr_object
     * }
     */
    public static MemorySegment wr_object(MemorySegment struct) {
        return struct.get(wr_object$LAYOUT, wr_object$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *wr_object
     * }
     */
    public static void wr_object(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wr_object$LAYOUT, wr_object$OFFSET, fieldValue);
    }

    private static final AddressLayout wr_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wr_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *wr_callback
     * }
     */
    public static final AddressLayout wr_callback$layout() {
        return wr_callback$LAYOUT;
    }

    private static final long wr_callback$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *wr_callback
     * }
     */
    public static final long wr_callback$offset() {
        return wr_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *wr_callback
     * }
     */
    public static MemorySegment wr_callback(MemorySegment struct) {
        return struct.get(wr_callback$LAYOUT, wr_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *wr_callback
     * }
     */
    public static void wr_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wr_callback$LAYOUT, wr_callback$OFFSET, fieldValue);
    }

    private static final OfLong hash$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static final OfLong hash$layout() {
        return hash$LAYOUT;
    }

    private static final long hash$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static final long hash$offset() {
        return hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static long hash(MemorySegment struct) {
        return struct.get(hash$LAYOUT, hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static void hash(MemorySegment struct, long fieldValue) {
        struct.set(hash$LAYOUT, hash$OFFSET, fieldValue);
    }

    private static final AddressLayout wr_prev$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wr_prev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyWeakReference *wr_prev
     * }
     */
    public static final AddressLayout wr_prev$layout() {
        return wr_prev$LAYOUT;
    }

    private static final long wr_prev$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyWeakReference *wr_prev
     * }
     */
    public static final long wr_prev$offset() {
        return wr_prev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyWeakReference *wr_prev
     * }
     */
    public static MemorySegment wr_prev(MemorySegment struct) {
        return struct.get(wr_prev$LAYOUT, wr_prev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyWeakReference *wr_prev
     * }
     */
    public static void wr_prev(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wr_prev$LAYOUT, wr_prev$OFFSET, fieldValue);
    }

    private static final AddressLayout wr_next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wr_next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyWeakReference *wr_next
     * }
     */
    public static final AddressLayout wr_next$layout() {
        return wr_next$LAYOUT;
    }

    private static final long wr_next$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyWeakReference *wr_next
     * }
     */
    public static final long wr_next$offset() {
        return wr_next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyWeakReference *wr_next
     * }
     */
    public static MemorySegment wr_next(MemorySegment struct) {
        return struct.get(wr_next$LAYOUT, wr_next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyWeakReference *wr_next
     * }
     */
    public static void wr_next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wr_next$LAYOUT, wr_next$OFFSET, fieldValue);
    }

    private static final AddressLayout vectorcall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vectorcall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static final AddressLayout vectorcall$layout() {
        return vectorcall$LAYOUT;
    }

    private static final long vectorcall$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static final long vectorcall$offset() {
        return vectorcall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static MemorySegment vectorcall(MemorySegment struct) {
        return struct.get(vectorcall$LAYOUT, vectorcall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static void vectorcall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vectorcall$LAYOUT, vectorcall$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

