// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     Py_hash_t (*const hash)(const void *, Py_ssize_t);
 *     const char *name;
 *     const int hash_bits;
 *     const int seed_bits;
 * }
 * }
 */
public class PyHash_FuncDef {

    PyHash_FuncDef() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("hash"),
        Python_h.C_POINTER.withName("name"),
        Python_h.C_INT.withName("hash_bits"),
        Python_h.C_INT.withName("seed_bits")
    ).withName("$anon$37:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * Py_hash_t (*const hash)(const void *, Py_ssize_t)
     * }
     */
    public static class hash {

        hash() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            Python_h.C_LONG,
            Python_h.C_POINTER,
            Python_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = Python_h.upcallHandle(hash.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(hash.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout hash$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_hash_t (*const hash)(const void *, Py_ssize_t)
     * }
     */
    public static final AddressLayout hash$layout() {
        return hash$LAYOUT;
    }

    private static final long hash$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_hash_t (*const hash)(const void *, Py_ssize_t)
     * }
     */
    public static final long hash$offset() {
        return hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_hash_t (*const hash)(const void *, Py_ssize_t)
     * }
     */
    public static MemorySegment hash(MemorySegment struct) {
        return struct.get(hash$LAYOUT, hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_hash_t (*const hash)(const void *, Py_ssize_t)
     * }
     */
    public static void hash(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hash$LAYOUT, hash$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt hash_bits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hash_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const int hash_bits
     * }
     */
    public static final OfInt hash_bits$layout() {
        return hash_bits$LAYOUT;
    }

    private static final long hash_bits$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const int hash_bits
     * }
     */
    public static final long hash_bits$offset() {
        return hash_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const int hash_bits
     * }
     */
    public static int hash_bits(MemorySegment struct) {
        return struct.get(hash_bits$LAYOUT, hash_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const int hash_bits
     * }
     */
    public static void hash_bits(MemorySegment struct, int fieldValue) {
        struct.set(hash_bits$LAYOUT, hash_bits$OFFSET, fieldValue);
    }

    private static final OfInt seed_bits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("seed_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const int seed_bits
     * }
     */
    public static final OfInt seed_bits$layout() {
        return seed_bits$LAYOUT;
    }

    private static final long seed_bits$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const int seed_bits
     * }
     */
    public static final long seed_bits$offset() {
        return seed_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const int seed_bits
     * }
     */
    public static int seed_bits(MemorySegment struct) {
        return struct.get(seed_bits$LAYOUT, seed_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const int seed_bits
     * }
     */
    public static void seed_bits(MemorySegment struct, int fieldValue) {
        struct.set(seed_bits$LAYOUT, seed_bits$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

