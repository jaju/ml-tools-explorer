// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PyModuleDef {
 *     PyModuleDef_Base m_base;
 *     const char *m_name;
 *     const char *m_doc;
 *     Py_ssize_t m_size;
 *     PyMethodDef *m_methods;
 *     PyModuleDef_Slot *m_slots;
 *     traverseproc m_traverse;
 *     inquiry m_clear;
 *     freefunc m_free;
 * }
 * }
 */
public class PyModuleDef {

    PyModuleDef() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PyModuleDef_Base.layout().withName("m_base"),
        Python_h.C_POINTER.withName("m_name"),
        Python_h.C_POINTER.withName("m_doc"),
        Python_h.C_LONG.withName("m_size"),
        Python_h.C_POINTER.withName("m_methods"),
        Python_h.C_POINTER.withName("m_slots"),
        Python_h.C_POINTER.withName("m_traverse"),
        Python_h.C_POINTER.withName("m_clear"),
        Python_h.C_POINTER.withName("m_free")
    ).withName("PyModuleDef");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout m_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("m_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyModuleDef_Base m_base
     * }
     */
    public static final GroupLayout m_base$layout() {
        return m_base$LAYOUT;
    }

    private static final long m_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyModuleDef_Base m_base
     * }
     */
    public static final long m_base$offset() {
        return m_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyModuleDef_Base m_base
     * }
     */
    public static MemorySegment m_base(MemorySegment struct) {
        return struct.asSlice(m_base$OFFSET, m_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyModuleDef_Base m_base
     * }
     */
    public static void m_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, m_base$OFFSET, m_base$LAYOUT.byteSize());
    }

    private static final AddressLayout m_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *m_name
     * }
     */
    public static final AddressLayout m_name$layout() {
        return m_name$LAYOUT;
    }

    private static final long m_name$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *m_name
     * }
     */
    public static final long m_name$offset() {
        return m_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *m_name
     * }
     */
    public static MemorySegment m_name(MemorySegment struct) {
        return struct.get(m_name$LAYOUT, m_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *m_name
     * }
     */
    public static void m_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_name$LAYOUT, m_name$OFFSET, fieldValue);
    }

    private static final AddressLayout m_doc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_doc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *m_doc
     * }
     */
    public static final AddressLayout m_doc$layout() {
        return m_doc$LAYOUT;
    }

    private static final long m_doc$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *m_doc
     * }
     */
    public static final long m_doc$offset() {
        return m_doc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *m_doc
     * }
     */
    public static MemorySegment m_doc(MemorySegment struct) {
        return struct.get(m_doc$LAYOUT, m_doc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *m_doc
     * }
     */
    public static void m_doc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_doc$LAYOUT, m_doc$OFFSET, fieldValue);
    }

    private static final OfLong m_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t m_size
     * }
     */
    public static final OfLong m_size$layout() {
        return m_size$LAYOUT;
    }

    private static final long m_size$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t m_size
     * }
     */
    public static final long m_size$offset() {
        return m_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t m_size
     * }
     */
    public static long m_size(MemorySegment struct) {
        return struct.get(m_size$LAYOUT, m_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t m_size
     * }
     */
    public static void m_size(MemorySegment struct, long fieldValue) {
        struct.set(m_size$LAYOUT, m_size$OFFSET, fieldValue);
    }

    private static final AddressLayout m_methods$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_methods"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyMethodDef *m_methods
     * }
     */
    public static final AddressLayout m_methods$layout() {
        return m_methods$LAYOUT;
    }

    private static final long m_methods$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyMethodDef *m_methods
     * }
     */
    public static final long m_methods$offset() {
        return m_methods$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyMethodDef *m_methods
     * }
     */
    public static MemorySegment m_methods(MemorySegment struct) {
        return struct.get(m_methods$LAYOUT, m_methods$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyMethodDef *m_methods
     * }
     */
    public static void m_methods(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_methods$LAYOUT, m_methods$OFFSET, fieldValue);
    }

    private static final AddressLayout m_slots$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_slots"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyModuleDef_Slot *m_slots
     * }
     */
    public static final AddressLayout m_slots$layout() {
        return m_slots$LAYOUT;
    }

    private static final long m_slots$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyModuleDef_Slot *m_slots
     * }
     */
    public static final long m_slots$offset() {
        return m_slots$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyModuleDef_Slot *m_slots
     * }
     */
    public static MemorySegment m_slots(MemorySegment struct) {
        return struct.get(m_slots$LAYOUT, m_slots$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyModuleDef_Slot *m_slots
     * }
     */
    public static void m_slots(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_slots$LAYOUT, m_slots$OFFSET, fieldValue);
    }

    private static final AddressLayout m_traverse$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_traverse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * traverseproc m_traverse
     * }
     */
    public static final AddressLayout m_traverse$layout() {
        return m_traverse$LAYOUT;
    }

    private static final long m_traverse$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * traverseproc m_traverse
     * }
     */
    public static final long m_traverse$offset() {
        return m_traverse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * traverseproc m_traverse
     * }
     */
    public static MemorySegment m_traverse(MemorySegment struct) {
        return struct.get(m_traverse$LAYOUT, m_traverse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * traverseproc m_traverse
     * }
     */
    public static void m_traverse(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_traverse$LAYOUT, m_traverse$OFFSET, fieldValue);
    }

    private static final AddressLayout m_clear$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_clear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inquiry m_clear
     * }
     */
    public static final AddressLayout m_clear$layout() {
        return m_clear$LAYOUT;
    }

    private static final long m_clear$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inquiry m_clear
     * }
     */
    public static final long m_clear$offset() {
        return m_clear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inquiry m_clear
     * }
     */
    public static MemorySegment m_clear(MemorySegment struct) {
        return struct.get(m_clear$LAYOUT, m_clear$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inquiry m_clear
     * }
     */
    public static void m_clear(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_clear$LAYOUT, m_clear$OFFSET, fieldValue);
    }

    private static final AddressLayout m_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * freefunc m_free
     * }
     */
    public static final AddressLayout m_free$layout() {
        return m_free$LAYOUT;
    }

    private static final long m_free$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * freefunc m_free
     * }
     */
    public static final long m_free$offset() {
        return m_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * freefunc m_free
     * }
     */
    public static MemorySegment m_free(MemorySegment struct) {
        return struct.get(m_free$LAYOUT, m_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * freefunc m_free
     * }
     */
    public static void m_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_free$LAYOUT, m_free$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

