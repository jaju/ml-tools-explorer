// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _opaque {
 *     int computed_line;
 *     const uint8_t *lo_next;
 *     const uint8_t *limit;
 * }
 * }
 */
public class _opaque {

    _opaque() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_INT.withName("computed_line"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("lo_next"),
        Python_h.C_POINTER.withName("limit")
    ).withName("_opaque");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt computed_line$LAYOUT = (OfInt)$LAYOUT.select(groupElement("computed_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int computed_line
     * }
     */
    public static final OfInt computed_line$layout() {
        return computed_line$LAYOUT;
    }

    private static final long computed_line$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int computed_line
     * }
     */
    public static final long computed_line$offset() {
        return computed_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int computed_line
     * }
     */
    public static int computed_line(MemorySegment struct) {
        return struct.get(computed_line$LAYOUT, computed_line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int computed_line
     * }
     */
    public static void computed_line(MemorySegment struct, int fieldValue) {
        struct.set(computed_line$LAYOUT, computed_line$OFFSET, fieldValue);
    }

    private static final AddressLayout lo_next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lo_next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint8_t *lo_next
     * }
     */
    public static final AddressLayout lo_next$layout() {
        return lo_next$LAYOUT;
    }

    private static final long lo_next$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint8_t *lo_next
     * }
     */
    public static final long lo_next$offset() {
        return lo_next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint8_t *lo_next
     * }
     */
    public static MemorySegment lo_next(MemorySegment struct) {
        return struct.get(lo_next$LAYOUT, lo_next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint8_t *lo_next
     * }
     */
    public static void lo_next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lo_next$LAYOUT, lo_next$OFFSET, fieldValue);
    }

    private static final AddressLayout limit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint8_t *limit
     * }
     */
    public static final AddressLayout limit$layout() {
        return limit$LAYOUT;
    }

    private static final long limit$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint8_t *limit
     * }
     */
    public static final long limit$offset() {
        return limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint8_t *limit
     * }
     */
    public static MemorySegment limit(MemorySegment struct) {
        return struct.get(limit$LAYOUT, limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint8_t *limit
     * }
     */
    public static void limit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(limit$LAYOUT, limit$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

