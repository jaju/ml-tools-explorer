// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     PyObject *fc_globals;
 *     PyObject *fc_builtins;
 *     PyObject *fc_name;
 *     PyObject *fc_qualname;
 *     PyObject *fc_code;
 *     PyObject *fc_defaults;
 *     PyObject *fc_kwdefaults;
 *     PyObject *fc_closure;
 * }
 * }
 */
public class PyFrameConstructor {

    PyFrameConstructor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("fc_globals"),
        Python_h.C_POINTER.withName("fc_builtins"),
        Python_h.C_POINTER.withName("fc_name"),
        Python_h.C_POINTER.withName("fc_qualname"),
        Python_h.C_POINTER.withName("fc_code"),
        Python_h.C_POINTER.withName("fc_defaults"),
        Python_h.C_POINTER.withName("fc_kwdefaults"),
        Python_h.C_POINTER.withName("fc_closure")
    ).withName("$anon$21:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout fc_globals$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fc_globals"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *fc_globals
     * }
     */
    public static final AddressLayout fc_globals$layout() {
        return fc_globals$LAYOUT;
    }

    private static final long fc_globals$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *fc_globals
     * }
     */
    public static final long fc_globals$offset() {
        return fc_globals$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *fc_globals
     * }
     */
    public static MemorySegment fc_globals(MemorySegment struct) {
        return struct.get(fc_globals$LAYOUT, fc_globals$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *fc_globals
     * }
     */
    public static void fc_globals(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fc_globals$LAYOUT, fc_globals$OFFSET, fieldValue);
    }

    private static final AddressLayout fc_builtins$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fc_builtins"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *fc_builtins
     * }
     */
    public static final AddressLayout fc_builtins$layout() {
        return fc_builtins$LAYOUT;
    }

    private static final long fc_builtins$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *fc_builtins
     * }
     */
    public static final long fc_builtins$offset() {
        return fc_builtins$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *fc_builtins
     * }
     */
    public static MemorySegment fc_builtins(MemorySegment struct) {
        return struct.get(fc_builtins$LAYOUT, fc_builtins$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *fc_builtins
     * }
     */
    public static void fc_builtins(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fc_builtins$LAYOUT, fc_builtins$OFFSET, fieldValue);
    }

    private static final AddressLayout fc_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fc_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *fc_name
     * }
     */
    public static final AddressLayout fc_name$layout() {
        return fc_name$LAYOUT;
    }

    private static final long fc_name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *fc_name
     * }
     */
    public static final long fc_name$offset() {
        return fc_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *fc_name
     * }
     */
    public static MemorySegment fc_name(MemorySegment struct) {
        return struct.get(fc_name$LAYOUT, fc_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *fc_name
     * }
     */
    public static void fc_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fc_name$LAYOUT, fc_name$OFFSET, fieldValue);
    }

    private static final AddressLayout fc_qualname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fc_qualname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *fc_qualname
     * }
     */
    public static final AddressLayout fc_qualname$layout() {
        return fc_qualname$LAYOUT;
    }

    private static final long fc_qualname$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *fc_qualname
     * }
     */
    public static final long fc_qualname$offset() {
        return fc_qualname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *fc_qualname
     * }
     */
    public static MemorySegment fc_qualname(MemorySegment struct) {
        return struct.get(fc_qualname$LAYOUT, fc_qualname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *fc_qualname
     * }
     */
    public static void fc_qualname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fc_qualname$LAYOUT, fc_qualname$OFFSET, fieldValue);
    }

    private static final AddressLayout fc_code$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fc_code"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *fc_code
     * }
     */
    public static final AddressLayout fc_code$layout() {
        return fc_code$LAYOUT;
    }

    private static final long fc_code$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *fc_code
     * }
     */
    public static final long fc_code$offset() {
        return fc_code$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *fc_code
     * }
     */
    public static MemorySegment fc_code(MemorySegment struct) {
        return struct.get(fc_code$LAYOUT, fc_code$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *fc_code
     * }
     */
    public static void fc_code(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fc_code$LAYOUT, fc_code$OFFSET, fieldValue);
    }

    private static final AddressLayout fc_defaults$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fc_defaults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *fc_defaults
     * }
     */
    public static final AddressLayout fc_defaults$layout() {
        return fc_defaults$LAYOUT;
    }

    private static final long fc_defaults$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *fc_defaults
     * }
     */
    public static final long fc_defaults$offset() {
        return fc_defaults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *fc_defaults
     * }
     */
    public static MemorySegment fc_defaults(MemorySegment struct) {
        return struct.get(fc_defaults$LAYOUT, fc_defaults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *fc_defaults
     * }
     */
    public static void fc_defaults(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fc_defaults$LAYOUT, fc_defaults$OFFSET, fieldValue);
    }

    private static final AddressLayout fc_kwdefaults$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fc_kwdefaults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *fc_kwdefaults
     * }
     */
    public static final AddressLayout fc_kwdefaults$layout() {
        return fc_kwdefaults$LAYOUT;
    }

    private static final long fc_kwdefaults$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *fc_kwdefaults
     * }
     */
    public static final long fc_kwdefaults$offset() {
        return fc_kwdefaults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *fc_kwdefaults
     * }
     */
    public static MemorySegment fc_kwdefaults(MemorySegment struct) {
        return struct.get(fc_kwdefaults$LAYOUT, fc_kwdefaults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *fc_kwdefaults
     * }
     */
    public static void fc_kwdefaults(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fc_kwdefaults$LAYOUT, fc_kwdefaults$OFFSET, fieldValue);
    }

    private static final AddressLayout fc_closure$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fc_closure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *fc_closure
     * }
     */
    public static final AddressLayout fc_closure$layout() {
        return fc_closure$LAYOUT;
    }

    private static final long fc_closure$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *fc_closure
     * }
     */
    public static final long fc_closure$offset() {
        return fc_closure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *fc_closure
     * }
     */
    public static MemorySegment fc_closure(MemorySegment struct) {
        return struct.get(fc_closure$LAYOUT, fc_closure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *fc_closure
     * }
     */
    public static void fc_closure(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fc_closure$LAYOUT, fc_closure$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

