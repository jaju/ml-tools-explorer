// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _heaptypeobject {
 *     PyTypeObject ht_type;
 *     PyAsyncMethods as_async;
 *     PyNumberMethods as_number;
 *     PyMappingMethods as_mapping;
 *     PySequenceMethods as_sequence;
 *     PyBufferProcs as_buffer;
 *     PyObject *ht_name;
 *     PyObject *ht_slots;
 *     PyObject *ht_qualname;
 *     struct _dictkeysobject *ht_cached_keys;
 *     PyObject *ht_module;
 *     char *_ht_tpname;
 *     struct _specialization_cache _spec_cache;
 * }
 * }
 */
public class _heaptypeobject {

    _heaptypeobject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _typeobject.layout().withName("ht_type"),
        PyAsyncMethods.layout().withName("as_async"),
        PyNumberMethods.layout().withName("as_number"),
        PyMappingMethods.layout().withName("as_mapping"),
        PySequenceMethods.layout().withName("as_sequence"),
        PyBufferProcs.layout().withName("as_buffer"),
        Python_h.C_POINTER.withName("ht_name"),
        Python_h.C_POINTER.withName("ht_slots"),
        Python_h.C_POINTER.withName("ht_qualname"),
        Python_h.C_POINTER.withName("ht_cached_keys"),
        Python_h.C_POINTER.withName("ht_module"),
        Python_h.C_POINTER.withName("_ht_tpname"),
        _specialization_cache.layout().withName("_spec_cache")
    ).withName("_heaptypeobject");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ht_type$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ht_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyTypeObject ht_type
     * }
     */
    public static final GroupLayout ht_type$layout() {
        return ht_type$LAYOUT;
    }

    private static final long ht_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyTypeObject ht_type
     * }
     */
    public static final long ht_type$offset() {
        return ht_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyTypeObject ht_type
     * }
     */
    public static MemorySegment ht_type(MemorySegment struct) {
        return struct.asSlice(ht_type$OFFSET, ht_type$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyTypeObject ht_type
     * }
     */
    public static void ht_type(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ht_type$OFFSET, ht_type$LAYOUT.byteSize());
    }

    private static final GroupLayout as_async$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("as_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyAsyncMethods as_async
     * }
     */
    public static final GroupLayout as_async$layout() {
        return as_async$LAYOUT;
    }

    private static final long as_async$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyAsyncMethods as_async
     * }
     */
    public static final long as_async$offset() {
        return as_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyAsyncMethods as_async
     * }
     */
    public static MemorySegment as_async(MemorySegment struct) {
        return struct.asSlice(as_async$OFFSET, as_async$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyAsyncMethods as_async
     * }
     */
    public static void as_async(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, as_async$OFFSET, as_async$LAYOUT.byteSize());
    }

    private static final GroupLayout as_number$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("as_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyNumberMethods as_number
     * }
     */
    public static final GroupLayout as_number$layout() {
        return as_number$LAYOUT;
    }

    private static final long as_number$OFFSET = 448;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyNumberMethods as_number
     * }
     */
    public static final long as_number$offset() {
        return as_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyNumberMethods as_number
     * }
     */
    public static MemorySegment as_number(MemorySegment struct) {
        return struct.asSlice(as_number$OFFSET, as_number$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyNumberMethods as_number
     * }
     */
    public static void as_number(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, as_number$OFFSET, as_number$LAYOUT.byteSize());
    }

    private static final GroupLayout as_mapping$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("as_mapping"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyMappingMethods as_mapping
     * }
     */
    public static final GroupLayout as_mapping$layout() {
        return as_mapping$LAYOUT;
    }

    private static final long as_mapping$OFFSET = 736;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyMappingMethods as_mapping
     * }
     */
    public static final long as_mapping$offset() {
        return as_mapping$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyMappingMethods as_mapping
     * }
     */
    public static MemorySegment as_mapping(MemorySegment struct) {
        return struct.asSlice(as_mapping$OFFSET, as_mapping$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyMappingMethods as_mapping
     * }
     */
    public static void as_mapping(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, as_mapping$OFFSET, as_mapping$LAYOUT.byteSize());
    }

    private static final GroupLayout as_sequence$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("as_sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PySequenceMethods as_sequence
     * }
     */
    public static final GroupLayout as_sequence$layout() {
        return as_sequence$LAYOUT;
    }

    private static final long as_sequence$OFFSET = 760;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PySequenceMethods as_sequence
     * }
     */
    public static final long as_sequence$offset() {
        return as_sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PySequenceMethods as_sequence
     * }
     */
    public static MemorySegment as_sequence(MemorySegment struct) {
        return struct.asSlice(as_sequence$OFFSET, as_sequence$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PySequenceMethods as_sequence
     * }
     */
    public static void as_sequence(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, as_sequence$OFFSET, as_sequence$LAYOUT.byteSize());
    }

    private static final GroupLayout as_buffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("as_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyBufferProcs as_buffer
     * }
     */
    public static final GroupLayout as_buffer$layout() {
        return as_buffer$LAYOUT;
    }

    private static final long as_buffer$OFFSET = 840;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyBufferProcs as_buffer
     * }
     */
    public static final long as_buffer$offset() {
        return as_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyBufferProcs as_buffer
     * }
     */
    public static MemorySegment as_buffer(MemorySegment struct) {
        return struct.asSlice(as_buffer$OFFSET, as_buffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyBufferProcs as_buffer
     * }
     */
    public static void as_buffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, as_buffer$OFFSET, as_buffer$LAYOUT.byteSize());
    }

    private static final AddressLayout ht_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ht_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *ht_name
     * }
     */
    public static final AddressLayout ht_name$layout() {
        return ht_name$LAYOUT;
    }

    private static final long ht_name$OFFSET = 856;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *ht_name
     * }
     */
    public static final long ht_name$offset() {
        return ht_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *ht_name
     * }
     */
    public static MemorySegment ht_name(MemorySegment struct) {
        return struct.get(ht_name$LAYOUT, ht_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *ht_name
     * }
     */
    public static void ht_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ht_name$LAYOUT, ht_name$OFFSET, fieldValue);
    }

    private static final AddressLayout ht_slots$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ht_slots"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *ht_slots
     * }
     */
    public static final AddressLayout ht_slots$layout() {
        return ht_slots$LAYOUT;
    }

    private static final long ht_slots$OFFSET = 864;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *ht_slots
     * }
     */
    public static final long ht_slots$offset() {
        return ht_slots$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *ht_slots
     * }
     */
    public static MemorySegment ht_slots(MemorySegment struct) {
        return struct.get(ht_slots$LAYOUT, ht_slots$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *ht_slots
     * }
     */
    public static void ht_slots(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ht_slots$LAYOUT, ht_slots$OFFSET, fieldValue);
    }

    private static final AddressLayout ht_qualname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ht_qualname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *ht_qualname
     * }
     */
    public static final AddressLayout ht_qualname$layout() {
        return ht_qualname$LAYOUT;
    }

    private static final long ht_qualname$OFFSET = 872;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *ht_qualname
     * }
     */
    public static final long ht_qualname$offset() {
        return ht_qualname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *ht_qualname
     * }
     */
    public static MemorySegment ht_qualname(MemorySegment struct) {
        return struct.get(ht_qualname$LAYOUT, ht_qualname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *ht_qualname
     * }
     */
    public static void ht_qualname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ht_qualname$LAYOUT, ht_qualname$OFFSET, fieldValue);
    }

    private static final AddressLayout ht_cached_keys$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ht_cached_keys"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _dictkeysobject *ht_cached_keys
     * }
     */
    public static final AddressLayout ht_cached_keys$layout() {
        return ht_cached_keys$LAYOUT;
    }

    private static final long ht_cached_keys$OFFSET = 880;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _dictkeysobject *ht_cached_keys
     * }
     */
    public static final long ht_cached_keys$offset() {
        return ht_cached_keys$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _dictkeysobject *ht_cached_keys
     * }
     */
    public static MemorySegment ht_cached_keys(MemorySegment struct) {
        return struct.get(ht_cached_keys$LAYOUT, ht_cached_keys$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _dictkeysobject *ht_cached_keys
     * }
     */
    public static void ht_cached_keys(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ht_cached_keys$LAYOUT, ht_cached_keys$OFFSET, fieldValue);
    }

    private static final AddressLayout ht_module$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ht_module"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *ht_module
     * }
     */
    public static final AddressLayout ht_module$layout() {
        return ht_module$LAYOUT;
    }

    private static final long ht_module$OFFSET = 888;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *ht_module
     * }
     */
    public static final long ht_module$offset() {
        return ht_module$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *ht_module
     * }
     */
    public static MemorySegment ht_module(MemorySegment struct) {
        return struct.get(ht_module$LAYOUT, ht_module$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *ht_module
     * }
     */
    public static void ht_module(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ht_module$LAYOUT, ht_module$OFFSET, fieldValue);
    }

    private static final AddressLayout _ht_tpname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_ht_tpname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *_ht_tpname
     * }
     */
    public static final AddressLayout _ht_tpname$layout() {
        return _ht_tpname$LAYOUT;
    }

    private static final long _ht_tpname$OFFSET = 896;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *_ht_tpname
     * }
     */
    public static final long _ht_tpname$offset() {
        return _ht_tpname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *_ht_tpname
     * }
     */
    public static MemorySegment _ht_tpname(MemorySegment struct) {
        return struct.get(_ht_tpname$LAYOUT, _ht_tpname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *_ht_tpname
     * }
     */
    public static void _ht_tpname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_ht_tpname$LAYOUT, _ht_tpname$OFFSET, fieldValue);
    }

    private static final GroupLayout _spec_cache$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_spec_cache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _specialization_cache _spec_cache
     * }
     */
    public static final GroupLayout _spec_cache$layout() {
        return _spec_cache$LAYOUT;
    }

    private static final long _spec_cache$OFFSET = 904;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _specialization_cache _spec_cache
     * }
     */
    public static final long _spec_cache$offset() {
        return _spec_cache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _specialization_cache _spec_cache
     * }
     */
    public static MemorySegment _spec_cache(MemorySegment struct) {
        return struct.asSlice(_spec_cache$OFFSET, _spec_cache$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _specialization_cache _spec_cache
     * }
     */
    public static void _spec_cache(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _spec_cache$OFFSET, _spec_cache$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

