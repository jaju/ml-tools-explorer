// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     PyASCIIObject _base;
 *     Py_ssize_t utf8_length;
 *     char *utf8;
 * }
 * }
 */
public class PyCompactUnicodeObject {

    PyCompactUnicodeObject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PyASCIIObject.layout().withName("_base"),
        Python_h.C_LONG.withName("utf8_length"),
        Python_h.C_POINTER.withName("utf8")
    ).withName("$anon$156:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout _base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyASCIIObject _base
     * }
     */
    public static final GroupLayout _base$layout() {
        return _base$LAYOUT;
    }

    private static final long _base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyASCIIObject _base
     * }
     */
    public static final long _base$offset() {
        return _base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyASCIIObject _base
     * }
     */
    public static MemorySegment _base(MemorySegment struct) {
        return struct.asSlice(_base$OFFSET, _base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyASCIIObject _base
     * }
     */
    public static void _base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _base$OFFSET, _base$LAYOUT.byteSize());
    }

    private static final OfLong utf8_length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("utf8_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t utf8_length
     * }
     */
    public static final OfLong utf8_length$layout() {
        return utf8_length$LAYOUT;
    }

    private static final long utf8_length$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t utf8_length
     * }
     */
    public static final long utf8_length$offset() {
        return utf8_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t utf8_length
     * }
     */
    public static long utf8_length(MemorySegment struct) {
        return struct.get(utf8_length$LAYOUT, utf8_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t utf8_length
     * }
     */
    public static void utf8_length(MemorySegment struct, long fieldValue) {
        struct.set(utf8_length$LAYOUT, utf8_length$OFFSET, fieldValue);
    }

    private static final AddressLayout utf8$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("utf8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *utf8
     * }
     */
    public static final AddressLayout utf8$layout() {
        return utf8$LAYOUT;
    }

    private static final long utf8$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *utf8
     * }
     */
    public static final long utf8$offset() {
        return utf8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *utf8
     * }
     */
    public static MemorySegment utf8(MemorySegment struct) {
        return struct.get(utf8$LAYOUT, utf8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *utf8
     * }
     */
    public static void utf8(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(utf8$LAYOUT, utf8$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

