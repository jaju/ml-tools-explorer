// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     PyVarObject ob_base;
 *     _PyManagedBufferObject *mbuf;
 *     Py_hash_t hash;
 *     int flags;
 *     Py_ssize_t exports;
 *     Py_buffer view;
 *     PyObject *weakreflist;
 *     Py_ssize_t ob_array[1];
 * }
 * }
 */
public class PyMemoryViewObject {

    PyMemoryViewObject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PyVarObject.layout().withName("ob_base"),
        Python_h.C_POINTER.withName("mbuf"),
        Python_h.C_LONG.withName("hash"),
        Python_h.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_LONG.withName("exports"),
        Py_buffer.layout().withName("view"),
        Python_h.C_POINTER.withName("weakreflist"),
        MemoryLayout.sequenceLayout(1, Python_h.C_LONG).withName("ob_array")
    ).withName("$anon$27:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ob_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ob_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyVarObject ob_base
     * }
     */
    public static final GroupLayout ob_base$layout() {
        return ob_base$LAYOUT;
    }

    private static final long ob_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyVarObject ob_base
     * }
     */
    public static final long ob_base$offset() {
        return ob_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyVarObject ob_base
     * }
     */
    public static MemorySegment ob_base(MemorySegment struct) {
        return struct.asSlice(ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyVarObject ob_base
     * }
     */
    public static void ob_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    private static final AddressLayout mbuf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mbuf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyManagedBufferObject *mbuf
     * }
     */
    public static final AddressLayout mbuf$layout() {
        return mbuf$LAYOUT;
    }

    private static final long mbuf$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyManagedBufferObject *mbuf
     * }
     */
    public static final long mbuf$offset() {
        return mbuf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyManagedBufferObject *mbuf
     * }
     */
    public static MemorySegment mbuf(MemorySegment struct) {
        return struct.get(mbuf$LAYOUT, mbuf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyManagedBufferObject *mbuf
     * }
     */
    public static void mbuf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mbuf$LAYOUT, mbuf$OFFSET, fieldValue);
    }

    private static final OfLong hash$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static final OfLong hash$layout() {
        return hash$LAYOUT;
    }

    private static final long hash$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static final long hash$offset() {
        return hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static long hash(MemorySegment struct) {
        return struct.get(hash$LAYOUT, hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static void hash(MemorySegment struct, long fieldValue) {
        struct.set(hash$LAYOUT, hash$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfLong exports$LAYOUT = (OfLong)$LAYOUT.select(groupElement("exports"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t exports
     * }
     */
    public static final OfLong exports$layout() {
        return exports$LAYOUT;
    }

    private static final long exports$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t exports
     * }
     */
    public static final long exports$offset() {
        return exports$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t exports
     * }
     */
    public static long exports(MemorySegment struct) {
        return struct.get(exports$LAYOUT, exports$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t exports
     * }
     */
    public static void exports(MemorySegment struct, long fieldValue) {
        struct.set(exports$LAYOUT, exports$OFFSET, fieldValue);
    }

    private static final GroupLayout view$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("view"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_buffer view
     * }
     */
    public static final GroupLayout view$layout() {
        return view$LAYOUT;
    }

    private static final long view$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_buffer view
     * }
     */
    public static final long view$offset() {
        return view$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_buffer view
     * }
     */
    public static MemorySegment view(MemorySegment struct) {
        return struct.asSlice(view$OFFSET, view$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_buffer view
     * }
     */
    public static void view(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, view$OFFSET, view$LAYOUT.byteSize());
    }

    private static final AddressLayout weakreflist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("weakreflist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *weakreflist
     * }
     */
    public static final AddressLayout weakreflist$layout() {
        return weakreflist$LAYOUT;
    }

    private static final long weakreflist$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *weakreflist
     * }
     */
    public static final long weakreflist$offset() {
        return weakreflist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *weakreflist
     * }
     */
    public static MemorySegment weakreflist(MemorySegment struct) {
        return struct.get(weakreflist$LAYOUT, weakreflist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *weakreflist
     * }
     */
    public static void weakreflist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(weakreflist$LAYOUT, weakreflist$OFFSET, fieldValue);
    }

    private static final SequenceLayout ob_array$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ob_array"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_array[1]
     * }
     */
    public static final SequenceLayout ob_array$layout() {
        return ob_array$LAYOUT;
    }

    private static final long ob_array$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_array[1]
     * }
     */
    public static final long ob_array$offset() {
        return ob_array$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_array[1]
     * }
     */
    public static MemorySegment ob_array(MemorySegment struct) {
        return struct.asSlice(ob_array$OFFSET, ob_array$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_array[1]
     * }
     */
    public static void ob_array(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_array$OFFSET, ob_array$LAYOUT.byteSize());
    }

    private static long[] ob_array$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * Py_ssize_t ob_array[1]
     * }
     */
    public static long[] ob_array$dimensions() {
        return ob_array$DIMS;
    }
    private static final VarHandle ob_array$ELEM_HANDLE = ob_array$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_array[1]
     * }
     */
    public static long ob_array(MemorySegment struct, long index0) {
        return (long)ob_array$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * Py_ssize_t ob_array[1]
     * }
     */
    public static void ob_array(MemorySegment struct, long index0, long fieldValue) {
        ob_array$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

