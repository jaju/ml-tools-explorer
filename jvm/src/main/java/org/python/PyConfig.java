// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PyConfig {
 *     int _config_init;
 *     int isolated;
 *     int use_environment;
 *     int dev_mode;
 *     int install_signal_handlers;
 *     int use_hash_seed;
 *     unsigned long hash_seed;
 *     int faulthandler;
 *     int tracemalloc;
 *     int perf_profiling;
 *     int import_time;
 *     int code_debug_ranges;
 *     int show_ref_count;
 *     int dump_refs;
 *     wchar_t *dump_refs_file;
 *     int malloc_stats;
 *     wchar_t *filesystem_encoding;
 *     wchar_t *filesystem_errors;
 *     wchar_t *pycache_prefix;
 *     int parse_argv;
 *     PyWideStringList orig_argv;
 *     PyWideStringList argv;
 *     PyWideStringList xoptions;
 *     PyWideStringList warnoptions;
 *     int site_import;
 *     int bytes_warning;
 *     int warn_default_encoding;
 *     int inspect;
 *     int interactive;
 *     int optimization_level;
 *     int parser_debug;
 *     int write_bytecode;
 *     int verbose;
 *     int quiet;
 *     int user_site_directory;
 *     int configure_c_stdio;
 *     int buffered_stdio;
 *     wchar_t *stdio_encoding;
 *     wchar_t *stdio_errors;
 *     wchar_t *check_hash_pycs_mode;
 *     int use_frozen_modules;
 *     int safe_path;
 *     int int_max_str_digits;
 *     int cpu_count;
 *     int pathconfig_warnings;
 *     wchar_t *program_name;
 *     wchar_t *pythonpath_env;
 *     wchar_t *home;
 *     wchar_t *platlibdir;
 *     int module_search_paths_set;
 *     PyWideStringList module_search_paths;
 *     wchar_t *stdlib_dir;
 *     wchar_t *executable;
 *     wchar_t *base_executable;
 *     wchar_t *prefix;
 *     wchar_t *base_prefix;
 *     wchar_t *exec_prefix;
 *     wchar_t *base_exec_prefix;
 *     int skip_source_first_line;
 *     wchar_t *run_command;
 *     wchar_t *run_module;
 *     wchar_t *run_filename;
 *     wchar_t *sys_path_0;
 *     int _install_importlib;
 *     int _init_main;
 *     int _is_python_build;
 * }
 * }
 */
public class PyConfig {

    PyConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_INT.withName("_config_init"),
        Python_h.C_INT.withName("isolated"),
        Python_h.C_INT.withName("use_environment"),
        Python_h.C_INT.withName("dev_mode"),
        Python_h.C_INT.withName("install_signal_handlers"),
        Python_h.C_INT.withName("use_hash_seed"),
        Python_h.C_LONG.withName("hash_seed"),
        Python_h.C_INT.withName("faulthandler"),
        Python_h.C_INT.withName("tracemalloc"),
        Python_h.C_INT.withName("perf_profiling"),
        Python_h.C_INT.withName("import_time"),
        Python_h.C_INT.withName("code_debug_ranges"),
        Python_h.C_INT.withName("show_ref_count"),
        Python_h.C_INT.withName("dump_refs"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("dump_refs_file"),
        Python_h.C_INT.withName("malloc_stats"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("filesystem_encoding"),
        Python_h.C_POINTER.withName("filesystem_errors"),
        Python_h.C_POINTER.withName("pycache_prefix"),
        Python_h.C_INT.withName("parse_argv"),
        MemoryLayout.paddingLayout(4),
        PyWideStringList.layout().withName("orig_argv"),
        PyWideStringList.layout().withName("argv"),
        PyWideStringList.layout().withName("xoptions"),
        PyWideStringList.layout().withName("warnoptions"),
        Python_h.C_INT.withName("site_import"),
        Python_h.C_INT.withName("bytes_warning"),
        Python_h.C_INT.withName("warn_default_encoding"),
        Python_h.C_INT.withName("inspect"),
        Python_h.C_INT.withName("interactive"),
        Python_h.C_INT.withName("optimization_level"),
        Python_h.C_INT.withName("parser_debug"),
        Python_h.C_INT.withName("write_bytecode"),
        Python_h.C_INT.withName("verbose"),
        Python_h.C_INT.withName("quiet"),
        Python_h.C_INT.withName("user_site_directory"),
        Python_h.C_INT.withName("configure_c_stdio"),
        Python_h.C_INT.withName("buffered_stdio"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("stdio_encoding"),
        Python_h.C_POINTER.withName("stdio_errors"),
        Python_h.C_POINTER.withName("check_hash_pycs_mode"),
        Python_h.C_INT.withName("use_frozen_modules"),
        Python_h.C_INT.withName("safe_path"),
        Python_h.C_INT.withName("int_max_str_digits"),
        Python_h.C_INT.withName("cpu_count"),
        Python_h.C_INT.withName("pathconfig_warnings"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("program_name"),
        Python_h.C_POINTER.withName("pythonpath_env"),
        Python_h.C_POINTER.withName("home"),
        Python_h.C_POINTER.withName("platlibdir"),
        Python_h.C_INT.withName("module_search_paths_set"),
        MemoryLayout.paddingLayout(4),
        PyWideStringList.layout().withName("module_search_paths"),
        Python_h.C_POINTER.withName("stdlib_dir"),
        Python_h.C_POINTER.withName("executable"),
        Python_h.C_POINTER.withName("base_executable"),
        Python_h.C_POINTER.withName("prefix"),
        Python_h.C_POINTER.withName("base_prefix"),
        Python_h.C_POINTER.withName("exec_prefix"),
        Python_h.C_POINTER.withName("base_exec_prefix"),
        Python_h.C_INT.withName("skip_source_first_line"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("run_command"),
        Python_h.C_POINTER.withName("run_module"),
        Python_h.C_POINTER.withName("run_filename"),
        Python_h.C_POINTER.withName("sys_path_0"),
        Python_h.C_INT.withName("_install_importlib"),
        Python_h.C_INT.withName("_init_main"),
        Python_h.C_INT.withName("_is_python_build"),
        MemoryLayout.paddingLayout(4)
    ).withName("PyConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _config_init$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_config_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _config_init
     * }
     */
    public static final OfInt _config_init$layout() {
        return _config_init$LAYOUT;
    }

    private static final long _config_init$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _config_init
     * }
     */
    public static final long _config_init$offset() {
        return _config_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _config_init
     * }
     */
    public static int _config_init(MemorySegment struct) {
        return struct.get(_config_init$LAYOUT, _config_init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _config_init
     * }
     */
    public static void _config_init(MemorySegment struct, int fieldValue) {
        struct.set(_config_init$LAYOUT, _config_init$OFFSET, fieldValue);
    }

    private static final OfInt isolated$LAYOUT = (OfInt)$LAYOUT.select(groupElement("isolated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int isolated
     * }
     */
    public static final OfInt isolated$layout() {
        return isolated$LAYOUT;
    }

    private static final long isolated$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int isolated
     * }
     */
    public static final long isolated$offset() {
        return isolated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int isolated
     * }
     */
    public static int isolated(MemorySegment struct) {
        return struct.get(isolated$LAYOUT, isolated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int isolated
     * }
     */
    public static void isolated(MemorySegment struct, int fieldValue) {
        struct.set(isolated$LAYOUT, isolated$OFFSET, fieldValue);
    }

    private static final OfInt use_environment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_environment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_environment
     * }
     */
    public static final OfInt use_environment$layout() {
        return use_environment$LAYOUT;
    }

    private static final long use_environment$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_environment
     * }
     */
    public static final long use_environment$offset() {
        return use_environment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_environment
     * }
     */
    public static int use_environment(MemorySegment struct) {
        return struct.get(use_environment$LAYOUT, use_environment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_environment
     * }
     */
    public static void use_environment(MemorySegment struct, int fieldValue) {
        struct.set(use_environment$LAYOUT, use_environment$OFFSET, fieldValue);
    }

    private static final OfInt dev_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dev_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dev_mode
     * }
     */
    public static final OfInt dev_mode$layout() {
        return dev_mode$LAYOUT;
    }

    private static final long dev_mode$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dev_mode
     * }
     */
    public static final long dev_mode$offset() {
        return dev_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dev_mode
     * }
     */
    public static int dev_mode(MemorySegment struct) {
        return struct.get(dev_mode$LAYOUT, dev_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dev_mode
     * }
     */
    public static void dev_mode(MemorySegment struct, int fieldValue) {
        struct.set(dev_mode$LAYOUT, dev_mode$OFFSET, fieldValue);
    }

    private static final OfInt install_signal_handlers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("install_signal_handlers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int install_signal_handlers
     * }
     */
    public static final OfInt install_signal_handlers$layout() {
        return install_signal_handlers$LAYOUT;
    }

    private static final long install_signal_handlers$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int install_signal_handlers
     * }
     */
    public static final long install_signal_handlers$offset() {
        return install_signal_handlers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int install_signal_handlers
     * }
     */
    public static int install_signal_handlers(MemorySegment struct) {
        return struct.get(install_signal_handlers$LAYOUT, install_signal_handlers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int install_signal_handlers
     * }
     */
    public static void install_signal_handlers(MemorySegment struct, int fieldValue) {
        struct.set(install_signal_handlers$LAYOUT, install_signal_handlers$OFFSET, fieldValue);
    }

    private static final OfInt use_hash_seed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_hash_seed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_hash_seed
     * }
     */
    public static final OfInt use_hash_seed$layout() {
        return use_hash_seed$LAYOUT;
    }

    private static final long use_hash_seed$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_hash_seed
     * }
     */
    public static final long use_hash_seed$offset() {
        return use_hash_seed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_hash_seed
     * }
     */
    public static int use_hash_seed(MemorySegment struct) {
        return struct.get(use_hash_seed$LAYOUT, use_hash_seed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_hash_seed
     * }
     */
    public static void use_hash_seed(MemorySegment struct, int fieldValue) {
        struct.set(use_hash_seed$LAYOUT, use_hash_seed$OFFSET, fieldValue);
    }

    private static final OfLong hash_seed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hash_seed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long hash_seed
     * }
     */
    public static final OfLong hash_seed$layout() {
        return hash_seed$LAYOUT;
    }

    private static final long hash_seed$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long hash_seed
     * }
     */
    public static final long hash_seed$offset() {
        return hash_seed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long hash_seed
     * }
     */
    public static long hash_seed(MemorySegment struct) {
        return struct.get(hash_seed$LAYOUT, hash_seed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long hash_seed
     * }
     */
    public static void hash_seed(MemorySegment struct, long fieldValue) {
        struct.set(hash_seed$LAYOUT, hash_seed$OFFSET, fieldValue);
    }

    private static final OfInt faulthandler$LAYOUT = (OfInt)$LAYOUT.select(groupElement("faulthandler"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int faulthandler
     * }
     */
    public static final OfInt faulthandler$layout() {
        return faulthandler$LAYOUT;
    }

    private static final long faulthandler$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int faulthandler
     * }
     */
    public static final long faulthandler$offset() {
        return faulthandler$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int faulthandler
     * }
     */
    public static int faulthandler(MemorySegment struct) {
        return struct.get(faulthandler$LAYOUT, faulthandler$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int faulthandler
     * }
     */
    public static void faulthandler(MemorySegment struct, int fieldValue) {
        struct.set(faulthandler$LAYOUT, faulthandler$OFFSET, fieldValue);
    }

    private static final OfInt tracemalloc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tracemalloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tracemalloc
     * }
     */
    public static final OfInt tracemalloc$layout() {
        return tracemalloc$LAYOUT;
    }

    private static final long tracemalloc$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tracemalloc
     * }
     */
    public static final long tracemalloc$offset() {
        return tracemalloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tracemalloc
     * }
     */
    public static int tracemalloc(MemorySegment struct) {
        return struct.get(tracemalloc$LAYOUT, tracemalloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tracemalloc
     * }
     */
    public static void tracemalloc(MemorySegment struct, int fieldValue) {
        struct.set(tracemalloc$LAYOUT, tracemalloc$OFFSET, fieldValue);
    }

    private static final OfInt perf_profiling$LAYOUT = (OfInt)$LAYOUT.select(groupElement("perf_profiling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int perf_profiling
     * }
     */
    public static final OfInt perf_profiling$layout() {
        return perf_profiling$LAYOUT;
    }

    private static final long perf_profiling$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int perf_profiling
     * }
     */
    public static final long perf_profiling$offset() {
        return perf_profiling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int perf_profiling
     * }
     */
    public static int perf_profiling(MemorySegment struct) {
        return struct.get(perf_profiling$LAYOUT, perf_profiling$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int perf_profiling
     * }
     */
    public static void perf_profiling(MemorySegment struct, int fieldValue) {
        struct.set(perf_profiling$LAYOUT, perf_profiling$OFFSET, fieldValue);
    }

    private static final OfInt import_time$LAYOUT = (OfInt)$LAYOUT.select(groupElement("import_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int import_time
     * }
     */
    public static final OfInt import_time$layout() {
        return import_time$LAYOUT;
    }

    private static final long import_time$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int import_time
     * }
     */
    public static final long import_time$offset() {
        return import_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int import_time
     * }
     */
    public static int import_time(MemorySegment struct) {
        return struct.get(import_time$LAYOUT, import_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int import_time
     * }
     */
    public static void import_time(MemorySegment struct, int fieldValue) {
        struct.set(import_time$LAYOUT, import_time$OFFSET, fieldValue);
    }

    private static final OfInt code_debug_ranges$LAYOUT = (OfInt)$LAYOUT.select(groupElement("code_debug_ranges"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int code_debug_ranges
     * }
     */
    public static final OfInt code_debug_ranges$layout() {
        return code_debug_ranges$LAYOUT;
    }

    private static final long code_debug_ranges$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int code_debug_ranges
     * }
     */
    public static final long code_debug_ranges$offset() {
        return code_debug_ranges$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int code_debug_ranges
     * }
     */
    public static int code_debug_ranges(MemorySegment struct) {
        return struct.get(code_debug_ranges$LAYOUT, code_debug_ranges$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int code_debug_ranges
     * }
     */
    public static void code_debug_ranges(MemorySegment struct, int fieldValue) {
        struct.set(code_debug_ranges$LAYOUT, code_debug_ranges$OFFSET, fieldValue);
    }

    private static final OfInt show_ref_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("show_ref_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int show_ref_count
     * }
     */
    public static final OfInt show_ref_count$layout() {
        return show_ref_count$LAYOUT;
    }

    private static final long show_ref_count$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int show_ref_count
     * }
     */
    public static final long show_ref_count$offset() {
        return show_ref_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int show_ref_count
     * }
     */
    public static int show_ref_count(MemorySegment struct) {
        return struct.get(show_ref_count$LAYOUT, show_ref_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int show_ref_count
     * }
     */
    public static void show_ref_count(MemorySegment struct, int fieldValue) {
        struct.set(show_ref_count$LAYOUT, show_ref_count$OFFSET, fieldValue);
    }

    private static final OfInt dump_refs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dump_refs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dump_refs
     * }
     */
    public static final OfInt dump_refs$layout() {
        return dump_refs$LAYOUT;
    }

    private static final long dump_refs$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dump_refs
     * }
     */
    public static final long dump_refs$offset() {
        return dump_refs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dump_refs
     * }
     */
    public static int dump_refs(MemorySegment struct) {
        return struct.get(dump_refs$LAYOUT, dump_refs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dump_refs
     * }
     */
    public static void dump_refs(MemorySegment struct, int fieldValue) {
        struct.set(dump_refs$LAYOUT, dump_refs$OFFSET, fieldValue);
    }

    private static final AddressLayout dump_refs_file$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dump_refs_file"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *dump_refs_file
     * }
     */
    public static final AddressLayout dump_refs_file$layout() {
        return dump_refs_file$LAYOUT;
    }

    private static final long dump_refs_file$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *dump_refs_file
     * }
     */
    public static final long dump_refs_file$offset() {
        return dump_refs_file$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *dump_refs_file
     * }
     */
    public static MemorySegment dump_refs_file(MemorySegment struct) {
        return struct.get(dump_refs_file$LAYOUT, dump_refs_file$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *dump_refs_file
     * }
     */
    public static void dump_refs_file(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dump_refs_file$LAYOUT, dump_refs_file$OFFSET, fieldValue);
    }

    private static final OfInt malloc_stats$LAYOUT = (OfInt)$LAYOUT.select(groupElement("malloc_stats"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int malloc_stats
     * }
     */
    public static final OfInt malloc_stats$layout() {
        return malloc_stats$LAYOUT;
    }

    private static final long malloc_stats$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int malloc_stats
     * }
     */
    public static final long malloc_stats$offset() {
        return malloc_stats$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int malloc_stats
     * }
     */
    public static int malloc_stats(MemorySegment struct) {
        return struct.get(malloc_stats$LAYOUT, malloc_stats$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int malloc_stats
     * }
     */
    public static void malloc_stats(MemorySegment struct, int fieldValue) {
        struct.set(malloc_stats$LAYOUT, malloc_stats$OFFSET, fieldValue);
    }

    private static final AddressLayout filesystem_encoding$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("filesystem_encoding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *filesystem_encoding
     * }
     */
    public static final AddressLayout filesystem_encoding$layout() {
        return filesystem_encoding$LAYOUT;
    }

    private static final long filesystem_encoding$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *filesystem_encoding
     * }
     */
    public static final long filesystem_encoding$offset() {
        return filesystem_encoding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *filesystem_encoding
     * }
     */
    public static MemorySegment filesystem_encoding(MemorySegment struct) {
        return struct.get(filesystem_encoding$LAYOUT, filesystem_encoding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *filesystem_encoding
     * }
     */
    public static void filesystem_encoding(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(filesystem_encoding$LAYOUT, filesystem_encoding$OFFSET, fieldValue);
    }

    private static final AddressLayout filesystem_errors$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("filesystem_errors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *filesystem_errors
     * }
     */
    public static final AddressLayout filesystem_errors$layout() {
        return filesystem_errors$LAYOUT;
    }

    private static final long filesystem_errors$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *filesystem_errors
     * }
     */
    public static final long filesystem_errors$offset() {
        return filesystem_errors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *filesystem_errors
     * }
     */
    public static MemorySegment filesystem_errors(MemorySegment struct) {
        return struct.get(filesystem_errors$LAYOUT, filesystem_errors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *filesystem_errors
     * }
     */
    public static void filesystem_errors(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(filesystem_errors$LAYOUT, filesystem_errors$OFFSET, fieldValue);
    }

    private static final AddressLayout pycache_prefix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pycache_prefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *pycache_prefix
     * }
     */
    public static final AddressLayout pycache_prefix$layout() {
        return pycache_prefix$LAYOUT;
    }

    private static final long pycache_prefix$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *pycache_prefix
     * }
     */
    public static final long pycache_prefix$offset() {
        return pycache_prefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *pycache_prefix
     * }
     */
    public static MemorySegment pycache_prefix(MemorySegment struct) {
        return struct.get(pycache_prefix$LAYOUT, pycache_prefix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *pycache_prefix
     * }
     */
    public static void pycache_prefix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pycache_prefix$LAYOUT, pycache_prefix$OFFSET, fieldValue);
    }

    private static final OfInt parse_argv$LAYOUT = (OfInt)$LAYOUT.select(groupElement("parse_argv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int parse_argv
     * }
     */
    public static final OfInt parse_argv$layout() {
        return parse_argv$LAYOUT;
    }

    private static final long parse_argv$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int parse_argv
     * }
     */
    public static final long parse_argv$offset() {
        return parse_argv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int parse_argv
     * }
     */
    public static int parse_argv(MemorySegment struct) {
        return struct.get(parse_argv$LAYOUT, parse_argv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int parse_argv
     * }
     */
    public static void parse_argv(MemorySegment struct, int fieldValue) {
        struct.set(parse_argv$LAYOUT, parse_argv$OFFSET, fieldValue);
    }

    private static final GroupLayout orig_argv$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("orig_argv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyWideStringList orig_argv
     * }
     */
    public static final GroupLayout orig_argv$layout() {
        return orig_argv$LAYOUT;
    }

    private static final long orig_argv$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyWideStringList orig_argv
     * }
     */
    public static final long orig_argv$offset() {
        return orig_argv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyWideStringList orig_argv
     * }
     */
    public static MemorySegment orig_argv(MemorySegment struct) {
        return struct.asSlice(orig_argv$OFFSET, orig_argv$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyWideStringList orig_argv
     * }
     */
    public static void orig_argv(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, orig_argv$OFFSET, orig_argv$LAYOUT.byteSize());
    }

    private static final GroupLayout argv$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("argv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyWideStringList argv
     * }
     */
    public static final GroupLayout argv$layout() {
        return argv$LAYOUT;
    }

    private static final long argv$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyWideStringList argv
     * }
     */
    public static final long argv$offset() {
        return argv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyWideStringList argv
     * }
     */
    public static MemorySegment argv(MemorySegment struct) {
        return struct.asSlice(argv$OFFSET, argv$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyWideStringList argv
     * }
     */
    public static void argv(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, argv$OFFSET, argv$LAYOUT.byteSize());
    }

    private static final GroupLayout xoptions$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("xoptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyWideStringList xoptions
     * }
     */
    public static final GroupLayout xoptions$layout() {
        return xoptions$LAYOUT;
    }

    private static final long xoptions$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyWideStringList xoptions
     * }
     */
    public static final long xoptions$offset() {
        return xoptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyWideStringList xoptions
     * }
     */
    public static MemorySegment xoptions(MemorySegment struct) {
        return struct.asSlice(xoptions$OFFSET, xoptions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyWideStringList xoptions
     * }
     */
    public static void xoptions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, xoptions$OFFSET, xoptions$LAYOUT.byteSize());
    }

    private static final GroupLayout warnoptions$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("warnoptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyWideStringList warnoptions
     * }
     */
    public static final GroupLayout warnoptions$layout() {
        return warnoptions$LAYOUT;
    }

    private static final long warnoptions$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyWideStringList warnoptions
     * }
     */
    public static final long warnoptions$offset() {
        return warnoptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyWideStringList warnoptions
     * }
     */
    public static MemorySegment warnoptions(MemorySegment struct) {
        return struct.asSlice(warnoptions$OFFSET, warnoptions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyWideStringList warnoptions
     * }
     */
    public static void warnoptions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, warnoptions$OFFSET, warnoptions$LAYOUT.byteSize());
    }

    private static final OfInt site_import$LAYOUT = (OfInt)$LAYOUT.select(groupElement("site_import"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int site_import
     * }
     */
    public static final OfInt site_import$layout() {
        return site_import$LAYOUT;
    }

    private static final long site_import$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int site_import
     * }
     */
    public static final long site_import$offset() {
        return site_import$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int site_import
     * }
     */
    public static int site_import(MemorySegment struct) {
        return struct.get(site_import$LAYOUT, site_import$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int site_import
     * }
     */
    public static void site_import(MemorySegment struct, int fieldValue) {
        struct.set(site_import$LAYOUT, site_import$OFFSET, fieldValue);
    }

    private static final OfInt bytes_warning$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bytes_warning"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bytes_warning
     * }
     */
    public static final OfInt bytes_warning$layout() {
        return bytes_warning$LAYOUT;
    }

    private static final long bytes_warning$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bytes_warning
     * }
     */
    public static final long bytes_warning$offset() {
        return bytes_warning$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bytes_warning
     * }
     */
    public static int bytes_warning(MemorySegment struct) {
        return struct.get(bytes_warning$LAYOUT, bytes_warning$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bytes_warning
     * }
     */
    public static void bytes_warning(MemorySegment struct, int fieldValue) {
        struct.set(bytes_warning$LAYOUT, bytes_warning$OFFSET, fieldValue);
    }

    private static final OfInt warn_default_encoding$LAYOUT = (OfInt)$LAYOUT.select(groupElement("warn_default_encoding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int warn_default_encoding
     * }
     */
    public static final OfInt warn_default_encoding$layout() {
        return warn_default_encoding$LAYOUT;
    }

    private static final long warn_default_encoding$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int warn_default_encoding
     * }
     */
    public static final long warn_default_encoding$offset() {
        return warn_default_encoding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int warn_default_encoding
     * }
     */
    public static int warn_default_encoding(MemorySegment struct) {
        return struct.get(warn_default_encoding$LAYOUT, warn_default_encoding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int warn_default_encoding
     * }
     */
    public static void warn_default_encoding(MemorySegment struct, int fieldValue) {
        struct.set(warn_default_encoding$LAYOUT, warn_default_encoding$OFFSET, fieldValue);
    }

    private static final OfInt inspect$LAYOUT = (OfInt)$LAYOUT.select(groupElement("inspect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int inspect
     * }
     */
    public static final OfInt inspect$layout() {
        return inspect$LAYOUT;
    }

    private static final long inspect$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int inspect
     * }
     */
    public static final long inspect$offset() {
        return inspect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int inspect
     * }
     */
    public static int inspect(MemorySegment struct) {
        return struct.get(inspect$LAYOUT, inspect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int inspect
     * }
     */
    public static void inspect(MemorySegment struct, int fieldValue) {
        struct.set(inspect$LAYOUT, inspect$OFFSET, fieldValue);
    }

    private static final OfInt interactive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("interactive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int interactive
     * }
     */
    public static final OfInt interactive$layout() {
        return interactive$LAYOUT;
    }

    private static final long interactive$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int interactive
     * }
     */
    public static final long interactive$offset() {
        return interactive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int interactive
     * }
     */
    public static int interactive(MemorySegment struct) {
        return struct.get(interactive$LAYOUT, interactive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int interactive
     * }
     */
    public static void interactive(MemorySegment struct, int fieldValue) {
        struct.set(interactive$LAYOUT, interactive$OFFSET, fieldValue);
    }

    private static final OfInt optimization_level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("optimization_level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int optimization_level
     * }
     */
    public static final OfInt optimization_level$layout() {
        return optimization_level$LAYOUT;
    }

    private static final long optimization_level$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int optimization_level
     * }
     */
    public static final long optimization_level$offset() {
        return optimization_level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int optimization_level
     * }
     */
    public static int optimization_level(MemorySegment struct) {
        return struct.get(optimization_level$LAYOUT, optimization_level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int optimization_level
     * }
     */
    public static void optimization_level(MemorySegment struct, int fieldValue) {
        struct.set(optimization_level$LAYOUT, optimization_level$OFFSET, fieldValue);
    }

    private static final OfInt parser_debug$LAYOUT = (OfInt)$LAYOUT.select(groupElement("parser_debug"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int parser_debug
     * }
     */
    public static final OfInt parser_debug$layout() {
        return parser_debug$LAYOUT;
    }

    private static final long parser_debug$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int parser_debug
     * }
     */
    public static final long parser_debug$offset() {
        return parser_debug$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int parser_debug
     * }
     */
    public static int parser_debug(MemorySegment struct) {
        return struct.get(parser_debug$LAYOUT, parser_debug$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int parser_debug
     * }
     */
    public static void parser_debug(MemorySegment struct, int fieldValue) {
        struct.set(parser_debug$LAYOUT, parser_debug$OFFSET, fieldValue);
    }

    private static final OfInt write_bytecode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("write_bytecode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int write_bytecode
     * }
     */
    public static final OfInt write_bytecode$layout() {
        return write_bytecode$LAYOUT;
    }

    private static final long write_bytecode$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int write_bytecode
     * }
     */
    public static final long write_bytecode$offset() {
        return write_bytecode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int write_bytecode
     * }
     */
    public static int write_bytecode(MemorySegment struct) {
        return struct.get(write_bytecode$LAYOUT, write_bytecode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int write_bytecode
     * }
     */
    public static void write_bytecode(MemorySegment struct, int fieldValue) {
        struct.set(write_bytecode$LAYOUT, write_bytecode$OFFSET, fieldValue);
    }

    private static final OfInt verbose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("verbose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int verbose
     * }
     */
    public static final OfInt verbose$layout() {
        return verbose$LAYOUT;
    }

    private static final long verbose$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int verbose
     * }
     */
    public static final long verbose$offset() {
        return verbose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int verbose
     * }
     */
    public static int verbose(MemorySegment struct) {
        return struct.get(verbose$LAYOUT, verbose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int verbose
     * }
     */
    public static void verbose(MemorySegment struct, int fieldValue) {
        struct.set(verbose$LAYOUT, verbose$OFFSET, fieldValue);
    }

    private static final OfInt quiet$LAYOUT = (OfInt)$LAYOUT.select(groupElement("quiet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int quiet
     * }
     */
    public static final OfInt quiet$layout() {
        return quiet$LAYOUT;
    }

    private static final long quiet$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int quiet
     * }
     */
    public static final long quiet$offset() {
        return quiet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int quiet
     * }
     */
    public static int quiet(MemorySegment struct) {
        return struct.get(quiet$LAYOUT, quiet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int quiet
     * }
     */
    public static void quiet(MemorySegment struct, int fieldValue) {
        struct.set(quiet$LAYOUT, quiet$OFFSET, fieldValue);
    }

    private static final OfInt user_site_directory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("user_site_directory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int user_site_directory
     * }
     */
    public static final OfInt user_site_directory$layout() {
        return user_site_directory$LAYOUT;
    }

    private static final long user_site_directory$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int user_site_directory
     * }
     */
    public static final long user_site_directory$offset() {
        return user_site_directory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int user_site_directory
     * }
     */
    public static int user_site_directory(MemorySegment struct) {
        return struct.get(user_site_directory$LAYOUT, user_site_directory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int user_site_directory
     * }
     */
    public static void user_site_directory(MemorySegment struct, int fieldValue) {
        struct.set(user_site_directory$LAYOUT, user_site_directory$OFFSET, fieldValue);
    }

    private static final OfInt configure_c_stdio$LAYOUT = (OfInt)$LAYOUT.select(groupElement("configure_c_stdio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int configure_c_stdio
     * }
     */
    public static final OfInt configure_c_stdio$layout() {
        return configure_c_stdio$LAYOUT;
    }

    private static final long configure_c_stdio$OFFSET = 220;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int configure_c_stdio
     * }
     */
    public static final long configure_c_stdio$offset() {
        return configure_c_stdio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int configure_c_stdio
     * }
     */
    public static int configure_c_stdio(MemorySegment struct) {
        return struct.get(configure_c_stdio$LAYOUT, configure_c_stdio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int configure_c_stdio
     * }
     */
    public static void configure_c_stdio(MemorySegment struct, int fieldValue) {
        struct.set(configure_c_stdio$LAYOUT, configure_c_stdio$OFFSET, fieldValue);
    }

    private static final OfInt buffered_stdio$LAYOUT = (OfInt)$LAYOUT.select(groupElement("buffered_stdio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int buffered_stdio
     * }
     */
    public static final OfInt buffered_stdio$layout() {
        return buffered_stdio$LAYOUT;
    }

    private static final long buffered_stdio$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int buffered_stdio
     * }
     */
    public static final long buffered_stdio$offset() {
        return buffered_stdio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int buffered_stdio
     * }
     */
    public static int buffered_stdio(MemorySegment struct) {
        return struct.get(buffered_stdio$LAYOUT, buffered_stdio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int buffered_stdio
     * }
     */
    public static void buffered_stdio(MemorySegment struct, int fieldValue) {
        struct.set(buffered_stdio$LAYOUT, buffered_stdio$OFFSET, fieldValue);
    }

    private static final AddressLayout stdio_encoding$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stdio_encoding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *stdio_encoding
     * }
     */
    public static final AddressLayout stdio_encoding$layout() {
        return stdio_encoding$LAYOUT;
    }

    private static final long stdio_encoding$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *stdio_encoding
     * }
     */
    public static final long stdio_encoding$offset() {
        return stdio_encoding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *stdio_encoding
     * }
     */
    public static MemorySegment stdio_encoding(MemorySegment struct) {
        return struct.get(stdio_encoding$LAYOUT, stdio_encoding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *stdio_encoding
     * }
     */
    public static void stdio_encoding(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stdio_encoding$LAYOUT, stdio_encoding$OFFSET, fieldValue);
    }

    private static final AddressLayout stdio_errors$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stdio_errors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *stdio_errors
     * }
     */
    public static final AddressLayout stdio_errors$layout() {
        return stdio_errors$LAYOUT;
    }

    private static final long stdio_errors$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *stdio_errors
     * }
     */
    public static final long stdio_errors$offset() {
        return stdio_errors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *stdio_errors
     * }
     */
    public static MemorySegment stdio_errors(MemorySegment struct) {
        return struct.get(stdio_errors$LAYOUT, stdio_errors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *stdio_errors
     * }
     */
    public static void stdio_errors(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stdio_errors$LAYOUT, stdio_errors$OFFSET, fieldValue);
    }

    private static final AddressLayout check_hash_pycs_mode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("check_hash_pycs_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *check_hash_pycs_mode
     * }
     */
    public static final AddressLayout check_hash_pycs_mode$layout() {
        return check_hash_pycs_mode$LAYOUT;
    }

    private static final long check_hash_pycs_mode$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *check_hash_pycs_mode
     * }
     */
    public static final long check_hash_pycs_mode$offset() {
        return check_hash_pycs_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *check_hash_pycs_mode
     * }
     */
    public static MemorySegment check_hash_pycs_mode(MemorySegment struct) {
        return struct.get(check_hash_pycs_mode$LAYOUT, check_hash_pycs_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *check_hash_pycs_mode
     * }
     */
    public static void check_hash_pycs_mode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(check_hash_pycs_mode$LAYOUT, check_hash_pycs_mode$OFFSET, fieldValue);
    }

    private static final OfInt use_frozen_modules$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_frozen_modules"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_frozen_modules
     * }
     */
    public static final OfInt use_frozen_modules$layout() {
        return use_frozen_modules$LAYOUT;
    }

    private static final long use_frozen_modules$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_frozen_modules
     * }
     */
    public static final long use_frozen_modules$offset() {
        return use_frozen_modules$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_frozen_modules
     * }
     */
    public static int use_frozen_modules(MemorySegment struct) {
        return struct.get(use_frozen_modules$LAYOUT, use_frozen_modules$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_frozen_modules
     * }
     */
    public static void use_frozen_modules(MemorySegment struct, int fieldValue) {
        struct.set(use_frozen_modules$LAYOUT, use_frozen_modules$OFFSET, fieldValue);
    }

    private static final OfInt safe_path$LAYOUT = (OfInt)$LAYOUT.select(groupElement("safe_path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int safe_path
     * }
     */
    public static final OfInt safe_path$layout() {
        return safe_path$LAYOUT;
    }

    private static final long safe_path$OFFSET = 260;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int safe_path
     * }
     */
    public static final long safe_path$offset() {
        return safe_path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int safe_path
     * }
     */
    public static int safe_path(MemorySegment struct) {
        return struct.get(safe_path$LAYOUT, safe_path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int safe_path
     * }
     */
    public static void safe_path(MemorySegment struct, int fieldValue) {
        struct.set(safe_path$LAYOUT, safe_path$OFFSET, fieldValue);
    }

    private static final OfInt int_max_str_digits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("int_max_str_digits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int int_max_str_digits
     * }
     */
    public static final OfInt int_max_str_digits$layout() {
        return int_max_str_digits$LAYOUT;
    }

    private static final long int_max_str_digits$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int int_max_str_digits
     * }
     */
    public static final long int_max_str_digits$offset() {
        return int_max_str_digits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int int_max_str_digits
     * }
     */
    public static int int_max_str_digits(MemorySegment struct) {
        return struct.get(int_max_str_digits$LAYOUT, int_max_str_digits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int int_max_str_digits
     * }
     */
    public static void int_max_str_digits(MemorySegment struct, int fieldValue) {
        struct.set(int_max_str_digits$LAYOUT, int_max_str_digits$OFFSET, fieldValue);
    }

    private static final OfInt cpu_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cpu_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cpu_count
     * }
     */
    public static final OfInt cpu_count$layout() {
        return cpu_count$LAYOUT;
    }

    private static final long cpu_count$OFFSET = 268;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cpu_count
     * }
     */
    public static final long cpu_count$offset() {
        return cpu_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cpu_count
     * }
     */
    public static int cpu_count(MemorySegment struct) {
        return struct.get(cpu_count$LAYOUT, cpu_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cpu_count
     * }
     */
    public static void cpu_count(MemorySegment struct, int fieldValue) {
        struct.set(cpu_count$LAYOUT, cpu_count$OFFSET, fieldValue);
    }

    private static final OfInt pathconfig_warnings$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pathconfig_warnings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pathconfig_warnings
     * }
     */
    public static final OfInt pathconfig_warnings$layout() {
        return pathconfig_warnings$LAYOUT;
    }

    private static final long pathconfig_warnings$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pathconfig_warnings
     * }
     */
    public static final long pathconfig_warnings$offset() {
        return pathconfig_warnings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pathconfig_warnings
     * }
     */
    public static int pathconfig_warnings(MemorySegment struct) {
        return struct.get(pathconfig_warnings$LAYOUT, pathconfig_warnings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pathconfig_warnings
     * }
     */
    public static void pathconfig_warnings(MemorySegment struct, int fieldValue) {
        struct.set(pathconfig_warnings$LAYOUT, pathconfig_warnings$OFFSET, fieldValue);
    }

    private static final AddressLayout program_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("program_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *program_name
     * }
     */
    public static final AddressLayout program_name$layout() {
        return program_name$LAYOUT;
    }

    private static final long program_name$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *program_name
     * }
     */
    public static final long program_name$offset() {
        return program_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *program_name
     * }
     */
    public static MemorySegment program_name(MemorySegment struct) {
        return struct.get(program_name$LAYOUT, program_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *program_name
     * }
     */
    public static void program_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(program_name$LAYOUT, program_name$OFFSET, fieldValue);
    }

    private static final AddressLayout pythonpath_env$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pythonpath_env"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *pythonpath_env
     * }
     */
    public static final AddressLayout pythonpath_env$layout() {
        return pythonpath_env$LAYOUT;
    }

    private static final long pythonpath_env$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *pythonpath_env
     * }
     */
    public static final long pythonpath_env$offset() {
        return pythonpath_env$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *pythonpath_env
     * }
     */
    public static MemorySegment pythonpath_env(MemorySegment struct) {
        return struct.get(pythonpath_env$LAYOUT, pythonpath_env$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *pythonpath_env
     * }
     */
    public static void pythonpath_env(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pythonpath_env$LAYOUT, pythonpath_env$OFFSET, fieldValue);
    }

    private static final AddressLayout home$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("home"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *home
     * }
     */
    public static final AddressLayout home$layout() {
        return home$LAYOUT;
    }

    private static final long home$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *home
     * }
     */
    public static final long home$offset() {
        return home$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *home
     * }
     */
    public static MemorySegment home(MemorySegment struct) {
        return struct.get(home$LAYOUT, home$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *home
     * }
     */
    public static void home(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(home$LAYOUT, home$OFFSET, fieldValue);
    }

    private static final AddressLayout platlibdir$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("platlibdir"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *platlibdir
     * }
     */
    public static final AddressLayout platlibdir$layout() {
        return platlibdir$LAYOUT;
    }

    private static final long platlibdir$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *platlibdir
     * }
     */
    public static final long platlibdir$offset() {
        return platlibdir$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *platlibdir
     * }
     */
    public static MemorySegment platlibdir(MemorySegment struct) {
        return struct.get(platlibdir$LAYOUT, platlibdir$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *platlibdir
     * }
     */
    public static void platlibdir(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(platlibdir$LAYOUT, platlibdir$OFFSET, fieldValue);
    }

    private static final OfInt module_search_paths_set$LAYOUT = (OfInt)$LAYOUT.select(groupElement("module_search_paths_set"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int module_search_paths_set
     * }
     */
    public static final OfInt module_search_paths_set$layout() {
        return module_search_paths_set$LAYOUT;
    }

    private static final long module_search_paths_set$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int module_search_paths_set
     * }
     */
    public static final long module_search_paths_set$offset() {
        return module_search_paths_set$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int module_search_paths_set
     * }
     */
    public static int module_search_paths_set(MemorySegment struct) {
        return struct.get(module_search_paths_set$LAYOUT, module_search_paths_set$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int module_search_paths_set
     * }
     */
    public static void module_search_paths_set(MemorySegment struct, int fieldValue) {
        struct.set(module_search_paths_set$LAYOUT, module_search_paths_set$OFFSET, fieldValue);
    }

    private static final GroupLayout module_search_paths$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("module_search_paths"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyWideStringList module_search_paths
     * }
     */
    public static final GroupLayout module_search_paths$layout() {
        return module_search_paths$LAYOUT;
    }

    private static final long module_search_paths$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyWideStringList module_search_paths
     * }
     */
    public static final long module_search_paths$offset() {
        return module_search_paths$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyWideStringList module_search_paths
     * }
     */
    public static MemorySegment module_search_paths(MemorySegment struct) {
        return struct.asSlice(module_search_paths$OFFSET, module_search_paths$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyWideStringList module_search_paths
     * }
     */
    public static void module_search_paths(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, module_search_paths$OFFSET, module_search_paths$LAYOUT.byteSize());
    }

    private static final AddressLayout stdlib_dir$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stdlib_dir"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *stdlib_dir
     * }
     */
    public static final AddressLayout stdlib_dir$layout() {
        return stdlib_dir$LAYOUT;
    }

    private static final long stdlib_dir$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *stdlib_dir
     * }
     */
    public static final long stdlib_dir$offset() {
        return stdlib_dir$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *stdlib_dir
     * }
     */
    public static MemorySegment stdlib_dir(MemorySegment struct) {
        return struct.get(stdlib_dir$LAYOUT, stdlib_dir$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *stdlib_dir
     * }
     */
    public static void stdlib_dir(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stdlib_dir$LAYOUT, stdlib_dir$OFFSET, fieldValue);
    }

    private static final AddressLayout executable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("executable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *executable
     * }
     */
    public static final AddressLayout executable$layout() {
        return executable$LAYOUT;
    }

    private static final long executable$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *executable
     * }
     */
    public static final long executable$offset() {
        return executable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *executable
     * }
     */
    public static MemorySegment executable(MemorySegment struct) {
        return struct.get(executable$LAYOUT, executable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *executable
     * }
     */
    public static void executable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(executable$LAYOUT, executable$OFFSET, fieldValue);
    }

    private static final AddressLayout base_executable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("base_executable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *base_executable
     * }
     */
    public static final AddressLayout base_executable$layout() {
        return base_executable$LAYOUT;
    }

    private static final long base_executable$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *base_executable
     * }
     */
    public static final long base_executable$offset() {
        return base_executable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *base_executable
     * }
     */
    public static MemorySegment base_executable(MemorySegment struct) {
        return struct.get(base_executable$LAYOUT, base_executable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *base_executable
     * }
     */
    public static void base_executable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(base_executable$LAYOUT, base_executable$OFFSET, fieldValue);
    }

    private static final AddressLayout prefix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("prefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *prefix
     * }
     */
    public static final AddressLayout prefix$layout() {
        return prefix$LAYOUT;
    }

    private static final long prefix$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *prefix
     * }
     */
    public static final long prefix$offset() {
        return prefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *prefix
     * }
     */
    public static MemorySegment prefix(MemorySegment struct) {
        return struct.get(prefix$LAYOUT, prefix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *prefix
     * }
     */
    public static void prefix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(prefix$LAYOUT, prefix$OFFSET, fieldValue);
    }

    private static final AddressLayout base_prefix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("base_prefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *base_prefix
     * }
     */
    public static final AddressLayout base_prefix$layout() {
        return base_prefix$LAYOUT;
    }

    private static final long base_prefix$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *base_prefix
     * }
     */
    public static final long base_prefix$offset() {
        return base_prefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *base_prefix
     * }
     */
    public static MemorySegment base_prefix(MemorySegment struct) {
        return struct.get(base_prefix$LAYOUT, base_prefix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *base_prefix
     * }
     */
    public static void base_prefix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(base_prefix$LAYOUT, base_prefix$OFFSET, fieldValue);
    }

    private static final AddressLayout exec_prefix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("exec_prefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *exec_prefix
     * }
     */
    public static final AddressLayout exec_prefix$layout() {
        return exec_prefix$LAYOUT;
    }

    private static final long exec_prefix$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *exec_prefix
     * }
     */
    public static final long exec_prefix$offset() {
        return exec_prefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *exec_prefix
     * }
     */
    public static MemorySegment exec_prefix(MemorySegment struct) {
        return struct.get(exec_prefix$LAYOUT, exec_prefix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *exec_prefix
     * }
     */
    public static void exec_prefix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(exec_prefix$LAYOUT, exec_prefix$OFFSET, fieldValue);
    }

    private static final AddressLayout base_exec_prefix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("base_exec_prefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *base_exec_prefix
     * }
     */
    public static final AddressLayout base_exec_prefix$layout() {
        return base_exec_prefix$LAYOUT;
    }

    private static final long base_exec_prefix$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *base_exec_prefix
     * }
     */
    public static final long base_exec_prefix$offset() {
        return base_exec_prefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *base_exec_prefix
     * }
     */
    public static MemorySegment base_exec_prefix(MemorySegment struct) {
        return struct.get(base_exec_prefix$LAYOUT, base_exec_prefix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *base_exec_prefix
     * }
     */
    public static void base_exec_prefix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(base_exec_prefix$LAYOUT, base_exec_prefix$OFFSET, fieldValue);
    }

    private static final OfInt skip_source_first_line$LAYOUT = (OfInt)$LAYOUT.select(groupElement("skip_source_first_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int skip_source_first_line
     * }
     */
    public static final OfInt skip_source_first_line$layout() {
        return skip_source_first_line$LAYOUT;
    }

    private static final long skip_source_first_line$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int skip_source_first_line
     * }
     */
    public static final long skip_source_first_line$offset() {
        return skip_source_first_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int skip_source_first_line
     * }
     */
    public static int skip_source_first_line(MemorySegment struct) {
        return struct.get(skip_source_first_line$LAYOUT, skip_source_first_line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int skip_source_first_line
     * }
     */
    public static void skip_source_first_line(MemorySegment struct, int fieldValue) {
        struct.set(skip_source_first_line$LAYOUT, skip_source_first_line$OFFSET, fieldValue);
    }

    private static final AddressLayout run_command$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run_command"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *run_command
     * }
     */
    public static final AddressLayout run_command$layout() {
        return run_command$LAYOUT;
    }

    private static final long run_command$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *run_command
     * }
     */
    public static final long run_command$offset() {
        return run_command$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *run_command
     * }
     */
    public static MemorySegment run_command(MemorySegment struct) {
        return struct.get(run_command$LAYOUT, run_command$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *run_command
     * }
     */
    public static void run_command(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run_command$LAYOUT, run_command$OFFSET, fieldValue);
    }

    private static final AddressLayout run_module$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run_module"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *run_module
     * }
     */
    public static final AddressLayout run_module$layout() {
        return run_module$LAYOUT;
    }

    private static final long run_module$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *run_module
     * }
     */
    public static final long run_module$offset() {
        return run_module$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *run_module
     * }
     */
    public static MemorySegment run_module(MemorySegment struct) {
        return struct.get(run_module$LAYOUT, run_module$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *run_module
     * }
     */
    public static void run_module(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run_module$LAYOUT, run_module$OFFSET, fieldValue);
    }

    private static final AddressLayout run_filename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run_filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *run_filename
     * }
     */
    public static final AddressLayout run_filename$layout() {
        return run_filename$LAYOUT;
    }

    private static final long run_filename$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *run_filename
     * }
     */
    public static final long run_filename$offset() {
        return run_filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *run_filename
     * }
     */
    public static MemorySegment run_filename(MemorySegment struct) {
        return struct.get(run_filename$LAYOUT, run_filename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *run_filename
     * }
     */
    public static void run_filename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run_filename$LAYOUT, run_filename$OFFSET, fieldValue);
    }

    private static final AddressLayout sys_path_0$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sys_path_0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t *sys_path_0
     * }
     */
    public static final AddressLayout sys_path_0$layout() {
        return sys_path_0$LAYOUT;
    }

    private static final long sys_path_0$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t *sys_path_0
     * }
     */
    public static final long sys_path_0$offset() {
        return sys_path_0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t *sys_path_0
     * }
     */
    public static MemorySegment sys_path_0(MemorySegment struct) {
        return struct.get(sys_path_0$LAYOUT, sys_path_0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t *sys_path_0
     * }
     */
    public static void sys_path_0(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sys_path_0$LAYOUT, sys_path_0$OFFSET, fieldValue);
    }

    private static final OfInt _install_importlib$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_install_importlib"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _install_importlib
     * }
     */
    public static final OfInt _install_importlib$layout() {
        return _install_importlib$LAYOUT;
    }

    private static final long _install_importlib$OFFSET = 432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _install_importlib
     * }
     */
    public static final long _install_importlib$offset() {
        return _install_importlib$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _install_importlib
     * }
     */
    public static int _install_importlib(MemorySegment struct) {
        return struct.get(_install_importlib$LAYOUT, _install_importlib$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _install_importlib
     * }
     */
    public static void _install_importlib(MemorySegment struct, int fieldValue) {
        struct.set(_install_importlib$LAYOUT, _install_importlib$OFFSET, fieldValue);
    }

    private static final OfInt _init_main$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_init_main"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _init_main
     * }
     */
    public static final OfInt _init_main$layout() {
        return _init_main$LAYOUT;
    }

    private static final long _init_main$OFFSET = 436;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _init_main
     * }
     */
    public static final long _init_main$offset() {
        return _init_main$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _init_main
     * }
     */
    public static int _init_main(MemorySegment struct) {
        return struct.get(_init_main$LAYOUT, _init_main$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _init_main
     * }
     */
    public static void _init_main(MemorySegment struct, int fieldValue) {
        struct.set(_init_main$LAYOUT, _init_main$OFFSET, fieldValue);
    }

    private static final OfInt _is_python_build$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_is_python_build"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _is_python_build
     * }
     */
    public static final OfInt _is_python_build$layout() {
        return _is_python_build$LAYOUT;
    }

    private static final long _is_python_build$OFFSET = 440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _is_python_build
     * }
     */
    public static final long _is_python_build$offset() {
        return _is_python_build$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _is_python_build
     * }
     */
    public static int _is_python_build(MemorySegment struct) {
        return struct.get(_is_python_build$LAYOUT, _is_python_build$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _is_python_build
     * }
     */
    public static void _is_python_build(MemorySegment struct, int fieldValue) {
        struct.set(_is_python_build$LAYOUT, _is_python_build$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

