// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char __magic[8];
 *     char __encoding[32];
 *     __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, const char **);
 *     int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
 *     __darwin_rune_t __invalid_rune;
 *     __uint32_t __runetype[256];
 *     __darwin_rune_t __maplower[256];
 *     __darwin_rune_t __mapupper[256];
 *     _RuneRange __runetype_ext;
 *     _RuneRange __maplower_ext;
 *     _RuneRange __mapupper_ext;
 *     void *__variable;
 *     int __variable_len;
 *     int __ncharclasses;
 *     _RuneCharClass *__charclasses;
 * }
 * }
 */
public class _RuneLocale {

    _RuneLocale() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(8, Python_h.C_CHAR).withName("__magic"),
        MemoryLayout.sequenceLayout(32, Python_h.C_CHAR).withName("__encoding"),
        Python_h.C_POINTER.withName("__sgetrune"),
        Python_h.C_POINTER.withName("__sputrune"),
        Python_h.C_INT.withName("__invalid_rune"),
        MemoryLayout.sequenceLayout(256, Python_h.C_INT).withName("__runetype"),
        MemoryLayout.sequenceLayout(256, Python_h.C_INT).withName("__maplower"),
        MemoryLayout.sequenceLayout(256, Python_h.C_INT).withName("__mapupper"),
        MemoryLayout.paddingLayout(4),
        _RuneRange.layout().withName("__runetype_ext"),
        _RuneRange.layout().withName("__maplower_ext"),
        _RuneRange.layout().withName("__mapupper_ext"),
        Python_h.C_POINTER.withName("__variable"),
        Python_h.C_INT.withName("__variable_len"),
        Python_h.C_INT.withName("__ncharclasses"),
        Python_h.C_POINTER.withName("__charclasses")
    ).withName("$anon$77:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout __magic$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__magic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char __magic[8]
     * }
     */
    public static final SequenceLayout __magic$layout() {
        return __magic$LAYOUT;
    }

    private static final long __magic$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char __magic[8]
     * }
     */
    public static final long __magic$offset() {
        return __magic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char __magic[8]
     * }
     */
    public static MemorySegment __magic(MemorySegment struct) {
        return struct.asSlice(__magic$OFFSET, __magic$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char __magic[8]
     * }
     */
    public static void __magic(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __magic$OFFSET, __magic$LAYOUT.byteSize());
    }

    private static long[] __magic$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char __magic[8]
     * }
     */
    public static long[] __magic$dimensions() {
        return __magic$DIMS;
    }
    private static final VarHandle __magic$ELEM_HANDLE = __magic$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char __magic[8]
     * }
     */
    public static byte __magic(MemorySegment struct, long index0) {
        return (byte)__magic$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char __magic[8]
     * }
     */
    public static void __magic(MemorySegment struct, long index0, byte fieldValue) {
        __magic$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout __encoding$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__encoding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char __encoding[32]
     * }
     */
    public static final SequenceLayout __encoding$layout() {
        return __encoding$LAYOUT;
    }

    private static final long __encoding$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char __encoding[32]
     * }
     */
    public static final long __encoding$offset() {
        return __encoding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char __encoding[32]
     * }
     */
    public static MemorySegment __encoding(MemorySegment struct) {
        return struct.asSlice(__encoding$OFFSET, __encoding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char __encoding[32]
     * }
     */
    public static void __encoding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __encoding$OFFSET, __encoding$LAYOUT.byteSize());
    }

    private static long[] __encoding$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char __encoding[32]
     * }
     */
    public static long[] __encoding$dimensions() {
        return __encoding$DIMS;
    }
    private static final VarHandle __encoding$ELEM_HANDLE = __encoding$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char __encoding[32]
     * }
     */
    public static byte __encoding(MemorySegment struct, long index0) {
        return (byte)__encoding$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char __encoding[32]
     * }
     */
    public static void __encoding(MemorySegment struct, long index0, byte fieldValue) {
        __encoding$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, const char **)
     * }
     */
    public static class __sgetrune {

        __sgetrune() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, long _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_LONG,
            Python_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = Python_h.upcallHandle(__sgetrune.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(__sgetrune.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout __sgetrune$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("__sgetrune"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, const char **)
     * }
     */
    public static final AddressLayout __sgetrune$layout() {
        return __sgetrune$LAYOUT;
    }

    private static final long __sgetrune$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, const char **)
     * }
     */
    public static final long __sgetrune$offset() {
        return __sgetrune$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, const char **)
     * }
     */
    public static MemorySegment __sgetrune(MemorySegment struct) {
        return struct.get(__sgetrune$LAYOUT, __sgetrune$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, const char **)
     * }
     */
    public static void __sgetrune(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(__sgetrune$LAYOUT, __sgetrune$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **)
     * }
     */
    public static class __sputrune {

        __sputrune() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(int _x0, MemorySegment _x1, long _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_LONG,
            Python_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = Python_h.upcallHandle(__sputrune.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(__sputrune.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,int _x0, MemorySegment _x1, long _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout __sputrune$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("__sputrune"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **)
     * }
     */
    public static final AddressLayout __sputrune$layout() {
        return __sputrune$LAYOUT;
    }

    private static final long __sputrune$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **)
     * }
     */
    public static final long __sputrune$offset() {
        return __sputrune$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **)
     * }
     */
    public static MemorySegment __sputrune(MemorySegment struct) {
        return struct.get(__sputrune$LAYOUT, __sputrune$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **)
     * }
     */
    public static void __sputrune(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(__sputrune$LAYOUT, __sputrune$OFFSET, fieldValue);
    }

    private static final OfInt __invalid_rune$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__invalid_rune"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __darwin_rune_t __invalid_rune
     * }
     */
    public static final OfInt __invalid_rune$layout() {
        return __invalid_rune$LAYOUT;
    }

    private static final long __invalid_rune$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __darwin_rune_t __invalid_rune
     * }
     */
    public static final long __invalid_rune$offset() {
        return __invalid_rune$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __invalid_rune
     * }
     */
    public static int __invalid_rune(MemorySegment struct) {
        return struct.get(__invalid_rune$LAYOUT, __invalid_rune$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __invalid_rune
     * }
     */
    public static void __invalid_rune(MemorySegment struct, int fieldValue) {
        struct.set(__invalid_rune$LAYOUT, __invalid_rune$OFFSET, fieldValue);
    }

    private static final SequenceLayout __runetype$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__runetype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uint32_t __runetype[256]
     * }
     */
    public static final SequenceLayout __runetype$layout() {
        return __runetype$LAYOUT;
    }

    private static final long __runetype$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uint32_t __runetype[256]
     * }
     */
    public static final long __runetype$offset() {
        return __runetype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uint32_t __runetype[256]
     * }
     */
    public static MemorySegment __runetype(MemorySegment struct) {
        return struct.asSlice(__runetype$OFFSET, __runetype$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uint32_t __runetype[256]
     * }
     */
    public static void __runetype(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __runetype$OFFSET, __runetype$LAYOUT.byteSize());
    }

    private static long[] __runetype$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __uint32_t __runetype[256]
     * }
     */
    public static long[] __runetype$dimensions() {
        return __runetype$DIMS;
    }
    private static final VarHandle __runetype$ELEM_HANDLE = __runetype$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __uint32_t __runetype[256]
     * }
     */
    public static int __runetype(MemorySegment struct, long index0) {
        return (int)__runetype$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __uint32_t __runetype[256]
     * }
     */
    public static void __runetype(MemorySegment struct, long index0, int fieldValue) {
        __runetype$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout __maplower$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__maplower"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __darwin_rune_t __maplower[256]
     * }
     */
    public static final SequenceLayout __maplower$layout() {
        return __maplower$LAYOUT;
    }

    private static final long __maplower$OFFSET = 1084;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __darwin_rune_t __maplower[256]
     * }
     */
    public static final long __maplower$offset() {
        return __maplower$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __maplower[256]
     * }
     */
    public static MemorySegment __maplower(MemorySegment struct) {
        return struct.asSlice(__maplower$OFFSET, __maplower$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __maplower[256]
     * }
     */
    public static void __maplower(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __maplower$OFFSET, __maplower$LAYOUT.byteSize());
    }

    private static long[] __maplower$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __darwin_rune_t __maplower[256]
     * }
     */
    public static long[] __maplower$dimensions() {
        return __maplower$DIMS;
    }
    private static final VarHandle __maplower$ELEM_HANDLE = __maplower$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __maplower[256]
     * }
     */
    public static int __maplower(MemorySegment struct, long index0) {
        return (int)__maplower$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __maplower[256]
     * }
     */
    public static void __maplower(MemorySegment struct, long index0, int fieldValue) {
        __maplower$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout __mapupper$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__mapupper"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __darwin_rune_t __mapupper[256]
     * }
     */
    public static final SequenceLayout __mapupper$layout() {
        return __mapupper$LAYOUT;
    }

    private static final long __mapupper$OFFSET = 2108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __darwin_rune_t __mapupper[256]
     * }
     */
    public static final long __mapupper$offset() {
        return __mapupper$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __mapupper[256]
     * }
     */
    public static MemorySegment __mapupper(MemorySegment struct) {
        return struct.asSlice(__mapupper$OFFSET, __mapupper$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __mapupper[256]
     * }
     */
    public static void __mapupper(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __mapupper$OFFSET, __mapupper$LAYOUT.byteSize());
    }

    private static long[] __mapupper$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __darwin_rune_t __mapupper[256]
     * }
     */
    public static long[] __mapupper$dimensions() {
        return __mapupper$DIMS;
    }
    private static final VarHandle __mapupper$ELEM_HANDLE = __mapupper$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __mapupper[256]
     * }
     */
    public static int __mapupper(MemorySegment struct, long index0) {
        return (int)__mapupper$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __darwin_rune_t __mapupper[256]
     * }
     */
    public static void __mapupper(MemorySegment struct, long index0, int fieldValue) {
        __mapupper$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout __runetype_ext$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("__runetype_ext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _RuneRange __runetype_ext
     * }
     */
    public static final GroupLayout __runetype_ext$layout() {
        return __runetype_ext$LAYOUT;
    }

    private static final long __runetype_ext$OFFSET = 3136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _RuneRange __runetype_ext
     * }
     */
    public static final long __runetype_ext$offset() {
        return __runetype_ext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _RuneRange __runetype_ext
     * }
     */
    public static MemorySegment __runetype_ext(MemorySegment struct) {
        return struct.asSlice(__runetype_ext$OFFSET, __runetype_ext$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _RuneRange __runetype_ext
     * }
     */
    public static void __runetype_ext(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __runetype_ext$OFFSET, __runetype_ext$LAYOUT.byteSize());
    }

    private static final GroupLayout __maplower_ext$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("__maplower_ext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _RuneRange __maplower_ext
     * }
     */
    public static final GroupLayout __maplower_ext$layout() {
        return __maplower_ext$LAYOUT;
    }

    private static final long __maplower_ext$OFFSET = 3152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _RuneRange __maplower_ext
     * }
     */
    public static final long __maplower_ext$offset() {
        return __maplower_ext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _RuneRange __maplower_ext
     * }
     */
    public static MemorySegment __maplower_ext(MemorySegment struct) {
        return struct.asSlice(__maplower_ext$OFFSET, __maplower_ext$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _RuneRange __maplower_ext
     * }
     */
    public static void __maplower_ext(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __maplower_ext$OFFSET, __maplower_ext$LAYOUT.byteSize());
    }

    private static final GroupLayout __mapupper_ext$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("__mapupper_ext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _RuneRange __mapupper_ext
     * }
     */
    public static final GroupLayout __mapupper_ext$layout() {
        return __mapupper_ext$LAYOUT;
    }

    private static final long __mapupper_ext$OFFSET = 3168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _RuneRange __mapupper_ext
     * }
     */
    public static final long __mapupper_ext$offset() {
        return __mapupper_ext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _RuneRange __mapupper_ext
     * }
     */
    public static MemorySegment __mapupper_ext(MemorySegment struct) {
        return struct.asSlice(__mapupper_ext$OFFSET, __mapupper_ext$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _RuneRange __mapupper_ext
     * }
     */
    public static void __mapupper_ext(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __mapupper_ext$OFFSET, __mapupper_ext$LAYOUT.byteSize());
    }

    private static final AddressLayout __variable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("__variable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *__variable
     * }
     */
    public static final AddressLayout __variable$layout() {
        return __variable$LAYOUT;
    }

    private static final long __variable$OFFSET = 3184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *__variable
     * }
     */
    public static final long __variable$offset() {
        return __variable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *__variable
     * }
     */
    public static MemorySegment __variable(MemorySegment struct) {
        return struct.get(__variable$LAYOUT, __variable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *__variable
     * }
     */
    public static void __variable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(__variable$LAYOUT, __variable$OFFSET, fieldValue);
    }

    private static final OfInt __variable_len$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__variable_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int __variable_len
     * }
     */
    public static final OfInt __variable_len$layout() {
        return __variable_len$LAYOUT;
    }

    private static final long __variable_len$OFFSET = 3192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int __variable_len
     * }
     */
    public static final long __variable_len$offset() {
        return __variable_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int __variable_len
     * }
     */
    public static int __variable_len(MemorySegment struct) {
        return struct.get(__variable_len$LAYOUT, __variable_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int __variable_len
     * }
     */
    public static void __variable_len(MemorySegment struct, int fieldValue) {
        struct.set(__variable_len$LAYOUT, __variable_len$OFFSET, fieldValue);
    }

    private static final OfInt __ncharclasses$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__ncharclasses"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int __ncharclasses
     * }
     */
    public static final OfInt __ncharclasses$layout() {
        return __ncharclasses$LAYOUT;
    }

    private static final long __ncharclasses$OFFSET = 3196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int __ncharclasses
     * }
     */
    public static final long __ncharclasses$offset() {
        return __ncharclasses$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int __ncharclasses
     * }
     */
    public static int __ncharclasses(MemorySegment struct) {
        return struct.get(__ncharclasses$LAYOUT, __ncharclasses$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int __ncharclasses
     * }
     */
    public static void __ncharclasses(MemorySegment struct, int fieldValue) {
        struct.set(__ncharclasses$LAYOUT, __ncharclasses$OFFSET, fieldValue);
    }

    private static final AddressLayout __charclasses$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("__charclasses"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _RuneCharClass *__charclasses
     * }
     */
    public static final AddressLayout __charclasses$layout() {
        return __charclasses$LAYOUT;
    }

    private static final long __charclasses$OFFSET = 3200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _RuneCharClass *__charclasses
     * }
     */
    public static final long __charclasses$offset() {
        return __charclasses$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _RuneCharClass *__charclasses
     * }
     */
    public static MemorySegment __charclasses(MemorySegment struct) {
        return struct.get(__charclasses$LAYOUT, __charclasses$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _RuneCharClass *__charclasses
     * }
     */
    public static void __charclasses(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(__charclasses$LAYOUT, __charclasses$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

