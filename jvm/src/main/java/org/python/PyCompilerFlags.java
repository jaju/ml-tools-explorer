// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int cf_flags;
 *     int cf_feature_version;
 * }
 * }
 */
public class PyCompilerFlags {

    PyCompilerFlags() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_INT.withName("cf_flags"),
        Python_h.C_INT.withName("cf_feature_version")
    ).withName("$anon$27:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cf_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cf_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cf_flags
     * }
     */
    public static final OfInt cf_flags$layout() {
        return cf_flags$LAYOUT;
    }

    private static final long cf_flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cf_flags
     * }
     */
    public static final long cf_flags$offset() {
        return cf_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cf_flags
     * }
     */
    public static int cf_flags(MemorySegment struct) {
        return struct.get(cf_flags$LAYOUT, cf_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cf_flags
     * }
     */
    public static void cf_flags(MemorySegment struct, int fieldValue) {
        struct.set(cf_flags$LAYOUT, cf_flags$OFFSET, fieldValue);
    }

    private static final OfInt cf_feature_version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cf_feature_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cf_feature_version
     * }
     */
    public static final OfInt cf_feature_version$layout() {
        return cf_feature_version$LAYOUT;
    }

    private static final long cf_feature_version$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cf_feature_version
     * }
     */
    public static final long cf_feature_version$offset() {
        return cf_feature_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cf_feature_version
     * }
     */
    public static int cf_feature_version(MemorySegment struct) {
        return struct.get(cf_feature_version$LAYOUT, cf_feature_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cf_feature_version
     * }
     */
    public static void cf_feature_version(MemorySegment struct, int fieldValue) {
        struct.set(cf_feature_version$LAYOUT, cf_feature_version$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

