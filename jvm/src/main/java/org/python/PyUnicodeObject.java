// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     PyCompactUnicodeObject _base;
 *     union {
 *         void *any;
 *         Py_UCS1 *latin1;
 *         Py_UCS2 *ucs2;
 *         Py_UCS4 *ucs4;
 *     } data;
 * }
 * }
 */
public class PyUnicodeObject {

    PyUnicodeObject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PyCompactUnicodeObject.layout().withName("_base"),
        PyUnicodeObject.data.layout().withName("data")
    ).withName("$anon$164:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout _base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyCompactUnicodeObject _base
     * }
     */
    public static final GroupLayout _base$layout() {
        return _base$LAYOUT;
    }

    private static final long _base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyCompactUnicodeObject _base
     * }
     */
    public static final long _base$offset() {
        return _base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyCompactUnicodeObject _base
     * }
     */
    public static MemorySegment _base(MemorySegment struct) {
        return struct.asSlice(_base$OFFSET, _base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyCompactUnicodeObject _base
     * }
     */
    public static void _base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _base$OFFSET, _base$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * union {
     *     void *any;
     *     Py_UCS1 *latin1;
     *     Py_UCS2 *ucs2;
     *     Py_UCS4 *ucs4;
     * }
     * }
     */
    public static class data {

        data() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            Python_h.C_POINTER.withName("any"),
            Python_h.C_POINTER.withName("latin1"),
            Python_h.C_POINTER.withName("ucs2"),
            Python_h.C_POINTER.withName("ucs4")
        ).withName("$anon$166:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout any$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("any"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *any
         * }
         */
        public static final AddressLayout any$layout() {
            return any$LAYOUT;
        }

        private static final long any$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *any
         * }
         */
        public static final long any$offset() {
            return any$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *any
         * }
         */
        public static MemorySegment any(MemorySegment union) {
            return union.get(any$LAYOUT, any$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *any
         * }
         */
        public static void any(MemorySegment union, MemorySegment fieldValue) {
            union.set(any$LAYOUT, any$OFFSET, fieldValue);
        }

        private static final AddressLayout latin1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("latin1"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Py_UCS1 *latin1
         * }
         */
        public static final AddressLayout latin1$layout() {
            return latin1$LAYOUT;
        }

        private static final long latin1$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Py_UCS1 *latin1
         * }
         */
        public static final long latin1$offset() {
            return latin1$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Py_UCS1 *latin1
         * }
         */
        public static MemorySegment latin1(MemorySegment union) {
            return union.get(latin1$LAYOUT, latin1$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Py_UCS1 *latin1
         * }
         */
        public static void latin1(MemorySegment union, MemorySegment fieldValue) {
            union.set(latin1$LAYOUT, latin1$OFFSET, fieldValue);
        }

        private static final AddressLayout ucs2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ucs2"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Py_UCS2 *ucs2
         * }
         */
        public static final AddressLayout ucs2$layout() {
            return ucs2$LAYOUT;
        }

        private static final long ucs2$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Py_UCS2 *ucs2
         * }
         */
        public static final long ucs2$offset() {
            return ucs2$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Py_UCS2 *ucs2
         * }
         */
        public static MemorySegment ucs2(MemorySegment union) {
            return union.get(ucs2$LAYOUT, ucs2$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Py_UCS2 *ucs2
         * }
         */
        public static void ucs2(MemorySegment union, MemorySegment fieldValue) {
            union.set(ucs2$LAYOUT, ucs2$OFFSET, fieldValue);
        }

        private static final AddressLayout ucs4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ucs4"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Py_UCS4 *ucs4
         * }
         */
        public static final AddressLayout ucs4$layout() {
            return ucs4$LAYOUT;
        }

        private static final long ucs4$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Py_UCS4 *ucs4
         * }
         */
        public static final long ucs4$offset() {
            return ucs4$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Py_UCS4 *ucs4
         * }
         */
        public static MemorySegment ucs4(MemorySegment union) {
            return union.get(ucs4$LAYOUT, ucs4$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Py_UCS4 *ucs4
         * }
         */
        public static void ucs4(MemorySegment union, MemorySegment fieldValue) {
            union.set(ucs4$LAYOUT, ucs4$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout data$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     void *any;
     *     Py_UCS1 *latin1;
     *     Py_UCS2 *ucs2;
     *     Py_UCS4 *ucs4;
     * } data
     * }
     */
    public static final GroupLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     void *any;
     *     Py_UCS1 *latin1;
     *     Py_UCS2 *ucs2;
     *     Py_UCS4 *ucs4;
     * } data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     void *any;
     *     Py_UCS1 *latin1;
     *     Py_UCS2 *ucs2;
     *     Py_UCS4 *ucs4;
     * } data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.asSlice(data$OFFSET, data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     void *any;
     *     Py_UCS1 *latin1;
     *     Py_UCS2 *ucs2;
     *     Py_UCS4 *ucs4;
     * } data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

