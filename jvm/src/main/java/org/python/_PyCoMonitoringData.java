// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     _Py_LocalMonitors local_monitors;
 *     _Py_LocalMonitors active_monitors;
 *     uint8_t *tools;
 *     _PyCoLineInstrumentationData *lines;
 *     uint8_t *line_tools;
 *     uint8_t *per_instruction_opcodes;
 *     uint8_t *per_instruction_tools;
 * }
 * }
 */
public class _PyCoMonitoringData {

    _PyCoMonitoringData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _Py_LocalMonitors.layout().withName("local_monitors"),
        _Py_LocalMonitors.layout().withName("active_monitors"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("tools"),
        Python_h.C_POINTER.withName("lines"),
        Python_h.C_POINTER.withName("line_tools"),
        Python_h.C_POINTER.withName("per_instruction_opcodes"),
        Python_h.C_POINTER.withName("per_instruction_tools")
    ).withName("$anon$53:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout local_monitors$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("local_monitors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _Py_LocalMonitors local_monitors
     * }
     */
    public static final GroupLayout local_monitors$layout() {
        return local_monitors$LAYOUT;
    }

    private static final long local_monitors$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _Py_LocalMonitors local_monitors
     * }
     */
    public static final long local_monitors$offset() {
        return local_monitors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Py_LocalMonitors local_monitors
     * }
     */
    public static MemorySegment local_monitors(MemorySegment struct) {
        return struct.asSlice(local_monitors$OFFSET, local_monitors$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Py_LocalMonitors local_monitors
     * }
     */
    public static void local_monitors(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, local_monitors$OFFSET, local_monitors$LAYOUT.byteSize());
    }

    private static final GroupLayout active_monitors$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("active_monitors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _Py_LocalMonitors active_monitors
     * }
     */
    public static final GroupLayout active_monitors$layout() {
        return active_monitors$LAYOUT;
    }

    private static final long active_monitors$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _Py_LocalMonitors active_monitors
     * }
     */
    public static final long active_monitors$offset() {
        return active_monitors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Py_LocalMonitors active_monitors
     * }
     */
    public static MemorySegment active_monitors(MemorySegment struct) {
        return struct.asSlice(active_monitors$OFFSET, active_monitors$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Py_LocalMonitors active_monitors
     * }
     */
    public static void active_monitors(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, active_monitors$OFFSET, active_monitors$LAYOUT.byteSize());
    }

    private static final AddressLayout tools$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tools"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *tools
     * }
     */
    public static final AddressLayout tools$layout() {
        return tools$LAYOUT;
    }

    private static final long tools$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *tools
     * }
     */
    public static final long tools$offset() {
        return tools$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *tools
     * }
     */
    public static MemorySegment tools(MemorySegment struct) {
        return struct.get(tools$LAYOUT, tools$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *tools
     * }
     */
    public static void tools(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tools$LAYOUT, tools$OFFSET, fieldValue);
    }

    private static final AddressLayout lines$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyCoLineInstrumentationData *lines
     * }
     */
    public static final AddressLayout lines$layout() {
        return lines$LAYOUT;
    }

    private static final long lines$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyCoLineInstrumentationData *lines
     * }
     */
    public static final long lines$offset() {
        return lines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyCoLineInstrumentationData *lines
     * }
     */
    public static MemorySegment lines(MemorySegment struct) {
        return struct.get(lines$LAYOUT, lines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyCoLineInstrumentationData *lines
     * }
     */
    public static void lines(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lines$LAYOUT, lines$OFFSET, fieldValue);
    }

    private static final AddressLayout line_tools$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("line_tools"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *line_tools
     * }
     */
    public static final AddressLayout line_tools$layout() {
        return line_tools$LAYOUT;
    }

    private static final long line_tools$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *line_tools
     * }
     */
    public static final long line_tools$offset() {
        return line_tools$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *line_tools
     * }
     */
    public static MemorySegment line_tools(MemorySegment struct) {
        return struct.get(line_tools$LAYOUT, line_tools$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *line_tools
     * }
     */
    public static void line_tools(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(line_tools$LAYOUT, line_tools$OFFSET, fieldValue);
    }

    private static final AddressLayout per_instruction_opcodes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("per_instruction_opcodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *per_instruction_opcodes
     * }
     */
    public static final AddressLayout per_instruction_opcodes$layout() {
        return per_instruction_opcodes$LAYOUT;
    }

    private static final long per_instruction_opcodes$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *per_instruction_opcodes
     * }
     */
    public static final long per_instruction_opcodes$offset() {
        return per_instruction_opcodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *per_instruction_opcodes
     * }
     */
    public static MemorySegment per_instruction_opcodes(MemorySegment struct) {
        return struct.get(per_instruction_opcodes$LAYOUT, per_instruction_opcodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *per_instruction_opcodes
     * }
     */
    public static void per_instruction_opcodes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(per_instruction_opcodes$LAYOUT, per_instruction_opcodes$OFFSET, fieldValue);
    }

    private static final AddressLayout per_instruction_tools$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("per_instruction_tools"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *per_instruction_tools
     * }
     */
    public static final AddressLayout per_instruction_tools$layout() {
        return per_instruction_tools$LAYOUT;
    }

    private static final long per_instruction_tools$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *per_instruction_tools
     * }
     */
    public static final long per_instruction_tools$offset() {
        return per_instruction_tools$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *per_instruction_tools
     * }
     */
    public static MemorySegment per_instruction_tools(MemorySegment struct) {
        return struct.get(per_instruction_tools$LAYOUT, per_instruction_tools$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *per_instruction_tools
     * }
     */
    public static void per_instruction_tools(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(per_instruction_tools$LAYOUT, per_instruction_tools$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

