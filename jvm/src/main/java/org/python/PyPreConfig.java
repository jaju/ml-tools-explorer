// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PyPreConfig {
 *     int _config_init;
 *     int parse_argv;
 *     int isolated;
 *     int use_environment;
 *     int configure_locale;
 *     int coerce_c_locale;
 *     int coerce_c_locale_warn;
 *     int utf8_mode;
 *     int dev_mode;
 *     int allocator;
 * }
 * }
 */
public class PyPreConfig {

    PyPreConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_INT.withName("_config_init"),
        Python_h.C_INT.withName("parse_argv"),
        Python_h.C_INT.withName("isolated"),
        Python_h.C_INT.withName("use_environment"),
        Python_h.C_INT.withName("configure_locale"),
        Python_h.C_INT.withName("coerce_c_locale"),
        Python_h.C_INT.withName("coerce_c_locale_warn"),
        Python_h.C_INT.withName("utf8_mode"),
        Python_h.C_INT.withName("dev_mode"),
        Python_h.C_INT.withName("allocator")
    ).withName("PyPreConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _config_init$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_config_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _config_init
     * }
     */
    public static final OfInt _config_init$layout() {
        return _config_init$LAYOUT;
    }

    private static final long _config_init$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _config_init
     * }
     */
    public static final long _config_init$offset() {
        return _config_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _config_init
     * }
     */
    public static int _config_init(MemorySegment struct) {
        return struct.get(_config_init$LAYOUT, _config_init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _config_init
     * }
     */
    public static void _config_init(MemorySegment struct, int fieldValue) {
        struct.set(_config_init$LAYOUT, _config_init$OFFSET, fieldValue);
    }

    private static final OfInt parse_argv$LAYOUT = (OfInt)$LAYOUT.select(groupElement("parse_argv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int parse_argv
     * }
     */
    public static final OfInt parse_argv$layout() {
        return parse_argv$LAYOUT;
    }

    private static final long parse_argv$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int parse_argv
     * }
     */
    public static final long parse_argv$offset() {
        return parse_argv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int parse_argv
     * }
     */
    public static int parse_argv(MemorySegment struct) {
        return struct.get(parse_argv$LAYOUT, parse_argv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int parse_argv
     * }
     */
    public static void parse_argv(MemorySegment struct, int fieldValue) {
        struct.set(parse_argv$LAYOUT, parse_argv$OFFSET, fieldValue);
    }

    private static final OfInt isolated$LAYOUT = (OfInt)$LAYOUT.select(groupElement("isolated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int isolated
     * }
     */
    public static final OfInt isolated$layout() {
        return isolated$LAYOUT;
    }

    private static final long isolated$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int isolated
     * }
     */
    public static final long isolated$offset() {
        return isolated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int isolated
     * }
     */
    public static int isolated(MemorySegment struct) {
        return struct.get(isolated$LAYOUT, isolated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int isolated
     * }
     */
    public static void isolated(MemorySegment struct, int fieldValue) {
        struct.set(isolated$LAYOUT, isolated$OFFSET, fieldValue);
    }

    private static final OfInt use_environment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_environment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_environment
     * }
     */
    public static final OfInt use_environment$layout() {
        return use_environment$LAYOUT;
    }

    private static final long use_environment$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_environment
     * }
     */
    public static final long use_environment$offset() {
        return use_environment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_environment
     * }
     */
    public static int use_environment(MemorySegment struct) {
        return struct.get(use_environment$LAYOUT, use_environment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_environment
     * }
     */
    public static void use_environment(MemorySegment struct, int fieldValue) {
        struct.set(use_environment$LAYOUT, use_environment$OFFSET, fieldValue);
    }

    private static final OfInt configure_locale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("configure_locale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int configure_locale
     * }
     */
    public static final OfInt configure_locale$layout() {
        return configure_locale$LAYOUT;
    }

    private static final long configure_locale$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int configure_locale
     * }
     */
    public static final long configure_locale$offset() {
        return configure_locale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int configure_locale
     * }
     */
    public static int configure_locale(MemorySegment struct) {
        return struct.get(configure_locale$LAYOUT, configure_locale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int configure_locale
     * }
     */
    public static void configure_locale(MemorySegment struct, int fieldValue) {
        struct.set(configure_locale$LAYOUT, configure_locale$OFFSET, fieldValue);
    }

    private static final OfInt coerce_c_locale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("coerce_c_locale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int coerce_c_locale
     * }
     */
    public static final OfInt coerce_c_locale$layout() {
        return coerce_c_locale$LAYOUT;
    }

    private static final long coerce_c_locale$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int coerce_c_locale
     * }
     */
    public static final long coerce_c_locale$offset() {
        return coerce_c_locale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int coerce_c_locale
     * }
     */
    public static int coerce_c_locale(MemorySegment struct) {
        return struct.get(coerce_c_locale$LAYOUT, coerce_c_locale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int coerce_c_locale
     * }
     */
    public static void coerce_c_locale(MemorySegment struct, int fieldValue) {
        struct.set(coerce_c_locale$LAYOUT, coerce_c_locale$OFFSET, fieldValue);
    }

    private static final OfInt coerce_c_locale_warn$LAYOUT = (OfInt)$LAYOUT.select(groupElement("coerce_c_locale_warn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int coerce_c_locale_warn
     * }
     */
    public static final OfInt coerce_c_locale_warn$layout() {
        return coerce_c_locale_warn$LAYOUT;
    }

    private static final long coerce_c_locale_warn$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int coerce_c_locale_warn
     * }
     */
    public static final long coerce_c_locale_warn$offset() {
        return coerce_c_locale_warn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int coerce_c_locale_warn
     * }
     */
    public static int coerce_c_locale_warn(MemorySegment struct) {
        return struct.get(coerce_c_locale_warn$LAYOUT, coerce_c_locale_warn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int coerce_c_locale_warn
     * }
     */
    public static void coerce_c_locale_warn(MemorySegment struct, int fieldValue) {
        struct.set(coerce_c_locale_warn$LAYOUT, coerce_c_locale_warn$OFFSET, fieldValue);
    }

    private static final OfInt utf8_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("utf8_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int utf8_mode
     * }
     */
    public static final OfInt utf8_mode$layout() {
        return utf8_mode$LAYOUT;
    }

    private static final long utf8_mode$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int utf8_mode
     * }
     */
    public static final long utf8_mode$offset() {
        return utf8_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int utf8_mode
     * }
     */
    public static int utf8_mode(MemorySegment struct) {
        return struct.get(utf8_mode$LAYOUT, utf8_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int utf8_mode
     * }
     */
    public static void utf8_mode(MemorySegment struct, int fieldValue) {
        struct.set(utf8_mode$LAYOUT, utf8_mode$OFFSET, fieldValue);
    }

    private static final OfInt dev_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dev_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dev_mode
     * }
     */
    public static final OfInt dev_mode$layout() {
        return dev_mode$LAYOUT;
    }

    private static final long dev_mode$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dev_mode
     * }
     */
    public static final long dev_mode$offset() {
        return dev_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dev_mode
     * }
     */
    public static int dev_mode(MemorySegment struct) {
        return struct.get(dev_mode$LAYOUT, dev_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dev_mode
     * }
     */
    public static void dev_mode(MemorySegment struct, int fieldValue) {
        struct.set(dev_mode$LAYOUT, dev_mode$OFFSET, fieldValue);
    }

    private static final OfInt allocator$LAYOUT = (OfInt)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int allocator
     * }
     */
    public static final OfInt allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int allocator
     * }
     */
    public static int allocator(MemorySegment struct) {
        return struct.get(allocator$LAYOUT, allocator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int allocator
     * }
     */
    public static void allocator(MemorySegment struct, int fieldValue) {
        struct.set(allocator$LAYOUT, allocator$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

