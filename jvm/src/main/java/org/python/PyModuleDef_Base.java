// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PyModuleDef_Base {
 *     PyObject ob_base;
 *     PyObject *(*m_init)(void);
 *     Py_ssize_t m_index;
 *     PyObject *m_copy;
 * }
 * }
 */
public class PyModuleDef_Base {

    PyModuleDef_Base() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _object.layout().withName("ob_base"),
        Python_h.C_POINTER.withName("m_init"),
        Python_h.C_LONG.withName("m_index"),
        Python_h.C_POINTER.withName("m_copy")
    ).withName("PyModuleDef_Base");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ob_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ob_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final GroupLayout ob_base$layout() {
        return ob_base$LAYOUT;
    }

    private static final long ob_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final long ob_base$offset() {
        return ob_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static MemorySegment ob_base(MemorySegment struct) {
        return struct.asSlice(ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static void ob_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * PyObject *(*m_init)(void)
     * }
     */
    public static class m_init {

        m_init() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            Python_h.C_POINTER);

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = Python_h.upcallHandle(m_init.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(m_init.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout m_init$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *(*m_init)(void)
     * }
     */
    public static final AddressLayout m_init$layout() {
        return m_init$LAYOUT;
    }

    private static final long m_init$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *(*m_init)(void)
     * }
     */
    public static final long m_init$offset() {
        return m_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *(*m_init)(void)
     * }
     */
    public static MemorySegment m_init(MemorySegment struct) {
        return struct.get(m_init$LAYOUT, m_init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *(*m_init)(void)
     * }
     */
    public static void m_init(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_init$LAYOUT, m_init$OFFSET, fieldValue);
    }

    private static final OfLong m_index$LAYOUT = (OfLong)$LAYOUT.select(groupElement("m_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t m_index
     * }
     */
    public static final OfLong m_index$layout() {
        return m_index$LAYOUT;
    }

    private static final long m_index$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t m_index
     * }
     */
    public static final long m_index$offset() {
        return m_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t m_index
     * }
     */
    public static long m_index(MemorySegment struct) {
        return struct.get(m_index$LAYOUT, m_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t m_index
     * }
     */
    public static void m_index(MemorySegment struct, long fieldValue) {
        struct.set(m_index$LAYOUT, m_index$OFFSET, fieldValue);
    }

    private static final AddressLayout m_copy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_copy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *m_copy
     * }
     */
    public static final AddressLayout m_copy$layout() {
        return m_copy$LAYOUT;
    }

    private static final long m_copy$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *m_copy
     * }
     */
    public static final long m_copy$offset() {
        return m_copy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *m_copy
     * }
     */
    public static MemorySegment m_copy(MemorySegment struct) {
        return struct.get(m_copy$LAYOUT, m_copy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *m_copy
     * }
     */
    public static void m_copy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_copy$LAYOUT, m_copy$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

