// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct wrapperbase {
 *     const char *name;
 *     int offset;
 *     void *function;
 *     wrapperfunc wrapper;
 *     const char *doc;
 *     int flags;
 *     PyObject *name_strobj;
 * }
 * }
 */
public class wrapperbase {

    wrapperbase() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("name"),
        Python_h.C_INT.withName("offset"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("function"),
        Python_h.C_POINTER.withName("wrapper"),
        Python_h.C_POINTER.withName("doc"),
        Python_h.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("name_strobj")
    ).withName("wrapperbase");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final AddressLayout function$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("function"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *function
     * }
     */
    public static final AddressLayout function$layout() {
        return function$LAYOUT;
    }

    private static final long function$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *function
     * }
     */
    public static final long function$offset() {
        return function$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *function
     * }
     */
    public static MemorySegment function(MemorySegment struct) {
        return struct.get(function$LAYOUT, function$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *function
     * }
     */
    public static void function(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(function$LAYOUT, function$OFFSET, fieldValue);
    }

    private static final AddressLayout wrapper$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wrapper"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wrapperfunc wrapper
     * }
     */
    public static final AddressLayout wrapper$layout() {
        return wrapper$LAYOUT;
    }

    private static final long wrapper$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wrapperfunc wrapper
     * }
     */
    public static final long wrapper$offset() {
        return wrapper$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wrapperfunc wrapper
     * }
     */
    public static MemorySegment wrapper(MemorySegment struct) {
        return struct.get(wrapper$LAYOUT, wrapper$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wrapperfunc wrapper
     * }
     */
    public static void wrapper(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wrapper$LAYOUT, wrapper$OFFSET, fieldValue);
    }

    private static final AddressLayout doc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("doc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *doc
     * }
     */
    public static final AddressLayout doc$layout() {
        return doc$LAYOUT;
    }

    private static final long doc$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *doc
     * }
     */
    public static final long doc$offset() {
        return doc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *doc
     * }
     */
    public static MemorySegment doc(MemorySegment struct) {
        return struct.get(doc$LAYOUT, doc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *doc
     * }
     */
    public static void doc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(doc$LAYOUT, doc$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout name_strobj$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name_strobj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *name_strobj
     * }
     */
    public static final AddressLayout name_strobj$layout() {
        return name_strobj$LAYOUT;
    }

    private static final long name_strobj$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *name_strobj
     * }
     */
    public static final long name_strobj$offset() {
        return name_strobj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *name_strobj
     * }
     */
    public static MemorySegment name_strobj(MemorySegment struct) {
        return struct.get(name_strobj$LAYOUT, name_strobj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *name_strobj
     * }
     */
    public static void name_strobj(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name_strobj$LAYOUT, name_strobj$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

