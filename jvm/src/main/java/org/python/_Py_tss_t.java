// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _Py_tss_t {
 *     int _is_initialized;
 *     pthread_key_t _key;
 * }
 * }
 */
public class _Py_tss_t {

    _Py_tss_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_INT.withName("_is_initialized"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_LONG.withName("_key")
    ).withName("_Py_tss_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _is_initialized$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_is_initialized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _is_initialized
     * }
     */
    public static final OfInt _is_initialized$layout() {
        return _is_initialized$LAYOUT;
    }

    private static final long _is_initialized$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _is_initialized
     * }
     */
    public static final long _is_initialized$offset() {
        return _is_initialized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _is_initialized
     * }
     */
    public static int _is_initialized(MemorySegment struct) {
        return struct.get(_is_initialized$LAYOUT, _is_initialized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _is_initialized
     * }
     */
    public static void _is_initialized(MemorySegment struct, int fieldValue) {
        struct.set(_is_initialized$LAYOUT, _is_initialized$OFFSET, fieldValue);
    }

    private static final OfLong _key$LAYOUT = (OfLong)$LAYOUT.select(groupElement("_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * pthread_key_t _key
     * }
     */
    public static final OfLong _key$layout() {
        return _key$LAYOUT;
    }

    private static final long _key$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * pthread_key_t _key
     * }
     */
    public static final long _key$offset() {
        return _key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * pthread_key_t _key
     * }
     */
    public static long _key(MemorySegment struct) {
        return struct.get(_key$LAYOUT, _key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * pthread_key_t _key
     * }
     */
    public static void _key(MemorySegment struct, long fieldValue) {
        struct.set(_key$LAYOUT, _key$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

