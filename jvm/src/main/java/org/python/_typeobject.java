// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _typeobject {
 *     PyVarObject ob_base;
 *     const char *tp_name;
 *     Py_ssize_t tp_basicsize;
 *     Py_ssize_t tp_itemsize;
 *     destructor tp_dealloc;
 *     Py_ssize_t tp_vectorcall_offset;
 *     getattrfunc tp_getattr;
 *     setattrfunc tp_setattr;
 *     PyAsyncMethods *tp_as_async;
 *     reprfunc tp_repr;
 *     PyNumberMethods *tp_as_number;
 *     PySequenceMethods *tp_as_sequence;
 *     PyMappingMethods *tp_as_mapping;
 *     hashfunc tp_hash;
 *     ternaryfunc tp_call;
 *     reprfunc tp_str;
 *     getattrofunc tp_getattro;
 *     setattrofunc tp_setattro;
 *     PyBufferProcs *tp_as_buffer;
 *     unsigned long tp_flags;
 *     const char *tp_doc;
 *     traverseproc tp_traverse;
 *     inquiry tp_clear;
 *     richcmpfunc tp_richcompare;
 *     Py_ssize_t tp_weaklistoffset;
 *     getiterfunc tp_iter;
 *     iternextfunc tp_iternext;
 *     PyMethodDef *tp_methods;
 *     PyMemberDef *tp_members;
 *     PyGetSetDef *tp_getset;
 *     PyTypeObject *tp_base;
 *     PyObject *tp_dict;
 *     descrgetfunc tp_descr_get;
 *     descrsetfunc tp_descr_set;
 *     Py_ssize_t tp_dictoffset;
 *     initproc tp_init;
 *     allocfunc tp_alloc;
 *     newfunc tp_new;
 *     freefunc tp_free;
 *     inquiry tp_is_gc;
 *     PyObject *tp_bases;
 *     PyObject *tp_mro;
 *     PyObject *tp_cache;
 *     void *tp_subclasses;
 *     PyObject *tp_weaklist;
 *     destructor tp_del;
 *     unsigned int tp_version_tag;
 *     destructor tp_finalize;
 *     vectorcallfunc tp_vectorcall;
 *     unsigned char tp_watched;
 *     uint16_t tp_versions_used;
 * }
 * }
 */
public class _typeobject {

    _typeobject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        PyVarObject.layout().withName("ob_base"),
        Python_h.C_POINTER.withName("tp_name"),
        Python_h.C_LONG.withName("tp_basicsize"),
        Python_h.C_LONG.withName("tp_itemsize"),
        Python_h.C_POINTER.withName("tp_dealloc"),
        Python_h.C_LONG.withName("tp_vectorcall_offset"),
        Python_h.C_POINTER.withName("tp_getattr"),
        Python_h.C_POINTER.withName("tp_setattr"),
        Python_h.C_POINTER.withName("tp_as_async"),
        Python_h.C_POINTER.withName("tp_repr"),
        Python_h.C_POINTER.withName("tp_as_number"),
        Python_h.C_POINTER.withName("tp_as_sequence"),
        Python_h.C_POINTER.withName("tp_as_mapping"),
        Python_h.C_POINTER.withName("tp_hash"),
        Python_h.C_POINTER.withName("tp_call"),
        Python_h.C_POINTER.withName("tp_str"),
        Python_h.C_POINTER.withName("tp_getattro"),
        Python_h.C_POINTER.withName("tp_setattro"),
        Python_h.C_POINTER.withName("tp_as_buffer"),
        Python_h.C_LONG.withName("tp_flags"),
        Python_h.C_POINTER.withName("tp_doc"),
        Python_h.C_POINTER.withName("tp_traverse"),
        Python_h.C_POINTER.withName("tp_clear"),
        Python_h.C_POINTER.withName("tp_richcompare"),
        Python_h.C_LONG.withName("tp_weaklistoffset"),
        Python_h.C_POINTER.withName("tp_iter"),
        Python_h.C_POINTER.withName("tp_iternext"),
        Python_h.C_POINTER.withName("tp_methods"),
        Python_h.C_POINTER.withName("tp_members"),
        Python_h.C_POINTER.withName("tp_getset"),
        Python_h.C_POINTER.withName("tp_base"),
        Python_h.C_POINTER.withName("tp_dict"),
        Python_h.C_POINTER.withName("tp_descr_get"),
        Python_h.C_POINTER.withName("tp_descr_set"),
        Python_h.C_LONG.withName("tp_dictoffset"),
        Python_h.C_POINTER.withName("tp_init"),
        Python_h.C_POINTER.withName("tp_alloc"),
        Python_h.C_POINTER.withName("tp_new"),
        Python_h.C_POINTER.withName("tp_free"),
        Python_h.C_POINTER.withName("tp_is_gc"),
        Python_h.C_POINTER.withName("tp_bases"),
        Python_h.C_POINTER.withName("tp_mro"),
        Python_h.C_POINTER.withName("tp_cache"),
        Python_h.C_POINTER.withName("tp_subclasses"),
        Python_h.C_POINTER.withName("tp_weaklist"),
        Python_h.C_POINTER.withName("tp_del"),
        Python_h.C_INT.withName("tp_version_tag"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("tp_finalize"),
        Python_h.C_POINTER.withName("tp_vectorcall"),
        Python_h.C_CHAR.withName("tp_watched"),
        MemoryLayout.paddingLayout(1),
        Python_h.C_SHORT.withName("tp_versions_used"),
        MemoryLayout.paddingLayout(4)
    ).withName("_typeobject");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ob_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ob_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyVarObject ob_base
     * }
     */
    public static final GroupLayout ob_base$layout() {
        return ob_base$LAYOUT;
    }

    private static final long ob_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyVarObject ob_base
     * }
     */
    public static final long ob_base$offset() {
        return ob_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyVarObject ob_base
     * }
     */
    public static MemorySegment ob_base(MemorySegment struct) {
        return struct.asSlice(ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyVarObject ob_base
     * }
     */
    public static void ob_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    private static final AddressLayout tp_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *tp_name
     * }
     */
    public static final AddressLayout tp_name$layout() {
        return tp_name$LAYOUT;
    }

    private static final long tp_name$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *tp_name
     * }
     */
    public static final long tp_name$offset() {
        return tp_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *tp_name
     * }
     */
    public static MemorySegment tp_name(MemorySegment struct) {
        return struct.get(tp_name$LAYOUT, tp_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *tp_name
     * }
     */
    public static void tp_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_name$LAYOUT, tp_name$OFFSET, fieldValue);
    }

    private static final OfLong tp_basicsize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tp_basicsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_basicsize
     * }
     */
    public static final OfLong tp_basicsize$layout() {
        return tp_basicsize$LAYOUT;
    }

    private static final long tp_basicsize$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_basicsize
     * }
     */
    public static final long tp_basicsize$offset() {
        return tp_basicsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_basicsize
     * }
     */
    public static long tp_basicsize(MemorySegment struct) {
        return struct.get(tp_basicsize$LAYOUT, tp_basicsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_basicsize
     * }
     */
    public static void tp_basicsize(MemorySegment struct, long fieldValue) {
        struct.set(tp_basicsize$LAYOUT, tp_basicsize$OFFSET, fieldValue);
    }

    private static final OfLong tp_itemsize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tp_itemsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_itemsize
     * }
     */
    public static final OfLong tp_itemsize$layout() {
        return tp_itemsize$LAYOUT;
    }

    private static final long tp_itemsize$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_itemsize
     * }
     */
    public static final long tp_itemsize$offset() {
        return tp_itemsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_itemsize
     * }
     */
    public static long tp_itemsize(MemorySegment struct) {
        return struct.get(tp_itemsize$LAYOUT, tp_itemsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_itemsize
     * }
     */
    public static void tp_itemsize(MemorySegment struct, long fieldValue) {
        struct.set(tp_itemsize$LAYOUT, tp_itemsize$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_dealloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_dealloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * destructor tp_dealloc
     * }
     */
    public static final AddressLayout tp_dealloc$layout() {
        return tp_dealloc$LAYOUT;
    }

    private static final long tp_dealloc$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * destructor tp_dealloc
     * }
     */
    public static final long tp_dealloc$offset() {
        return tp_dealloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * destructor tp_dealloc
     * }
     */
    public static MemorySegment tp_dealloc(MemorySegment struct) {
        return struct.get(tp_dealloc$LAYOUT, tp_dealloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * destructor tp_dealloc
     * }
     */
    public static void tp_dealloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_dealloc$LAYOUT, tp_dealloc$OFFSET, fieldValue);
    }

    private static final OfLong tp_vectorcall_offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tp_vectorcall_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_vectorcall_offset
     * }
     */
    public static final OfLong tp_vectorcall_offset$layout() {
        return tp_vectorcall_offset$LAYOUT;
    }

    private static final long tp_vectorcall_offset$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_vectorcall_offset
     * }
     */
    public static final long tp_vectorcall_offset$offset() {
        return tp_vectorcall_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_vectorcall_offset
     * }
     */
    public static long tp_vectorcall_offset(MemorySegment struct) {
        return struct.get(tp_vectorcall_offset$LAYOUT, tp_vectorcall_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_vectorcall_offset
     * }
     */
    public static void tp_vectorcall_offset(MemorySegment struct, long fieldValue) {
        struct.set(tp_vectorcall_offset$LAYOUT, tp_vectorcall_offset$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_getattr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_getattr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * getattrfunc tp_getattr
     * }
     */
    public static final AddressLayout tp_getattr$layout() {
        return tp_getattr$LAYOUT;
    }

    private static final long tp_getattr$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * getattrfunc tp_getattr
     * }
     */
    public static final long tp_getattr$offset() {
        return tp_getattr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * getattrfunc tp_getattr
     * }
     */
    public static MemorySegment tp_getattr(MemorySegment struct) {
        return struct.get(tp_getattr$LAYOUT, tp_getattr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * getattrfunc tp_getattr
     * }
     */
    public static void tp_getattr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_getattr$LAYOUT, tp_getattr$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_setattr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_setattr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * setattrfunc tp_setattr
     * }
     */
    public static final AddressLayout tp_setattr$layout() {
        return tp_setattr$LAYOUT;
    }

    private static final long tp_setattr$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * setattrfunc tp_setattr
     * }
     */
    public static final long tp_setattr$offset() {
        return tp_setattr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * setattrfunc tp_setattr
     * }
     */
    public static MemorySegment tp_setattr(MemorySegment struct) {
        return struct.get(tp_setattr$LAYOUT, tp_setattr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * setattrfunc tp_setattr
     * }
     */
    public static void tp_setattr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_setattr$LAYOUT, tp_setattr$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_as_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_as_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyAsyncMethods *tp_as_async
     * }
     */
    public static final AddressLayout tp_as_async$layout() {
        return tp_as_async$LAYOUT;
    }

    private static final long tp_as_async$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyAsyncMethods *tp_as_async
     * }
     */
    public static final long tp_as_async$offset() {
        return tp_as_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyAsyncMethods *tp_as_async
     * }
     */
    public static MemorySegment tp_as_async(MemorySegment struct) {
        return struct.get(tp_as_async$LAYOUT, tp_as_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyAsyncMethods *tp_as_async
     * }
     */
    public static void tp_as_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_as_async$LAYOUT, tp_as_async$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_repr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_repr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * reprfunc tp_repr
     * }
     */
    public static final AddressLayout tp_repr$layout() {
        return tp_repr$LAYOUT;
    }

    private static final long tp_repr$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * reprfunc tp_repr
     * }
     */
    public static final long tp_repr$offset() {
        return tp_repr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * reprfunc tp_repr
     * }
     */
    public static MemorySegment tp_repr(MemorySegment struct) {
        return struct.get(tp_repr$LAYOUT, tp_repr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * reprfunc tp_repr
     * }
     */
    public static void tp_repr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_repr$LAYOUT, tp_repr$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_as_number$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_as_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyNumberMethods *tp_as_number
     * }
     */
    public static final AddressLayout tp_as_number$layout() {
        return tp_as_number$LAYOUT;
    }

    private static final long tp_as_number$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyNumberMethods *tp_as_number
     * }
     */
    public static final long tp_as_number$offset() {
        return tp_as_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyNumberMethods *tp_as_number
     * }
     */
    public static MemorySegment tp_as_number(MemorySegment struct) {
        return struct.get(tp_as_number$LAYOUT, tp_as_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyNumberMethods *tp_as_number
     * }
     */
    public static void tp_as_number(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_as_number$LAYOUT, tp_as_number$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_as_sequence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_as_sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PySequenceMethods *tp_as_sequence
     * }
     */
    public static final AddressLayout tp_as_sequence$layout() {
        return tp_as_sequence$LAYOUT;
    }

    private static final long tp_as_sequence$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PySequenceMethods *tp_as_sequence
     * }
     */
    public static final long tp_as_sequence$offset() {
        return tp_as_sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PySequenceMethods *tp_as_sequence
     * }
     */
    public static MemorySegment tp_as_sequence(MemorySegment struct) {
        return struct.get(tp_as_sequence$LAYOUT, tp_as_sequence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PySequenceMethods *tp_as_sequence
     * }
     */
    public static void tp_as_sequence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_as_sequence$LAYOUT, tp_as_sequence$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_as_mapping$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_as_mapping"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyMappingMethods *tp_as_mapping
     * }
     */
    public static final AddressLayout tp_as_mapping$layout() {
        return tp_as_mapping$LAYOUT;
    }

    private static final long tp_as_mapping$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyMappingMethods *tp_as_mapping
     * }
     */
    public static final long tp_as_mapping$offset() {
        return tp_as_mapping$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyMappingMethods *tp_as_mapping
     * }
     */
    public static MemorySegment tp_as_mapping(MemorySegment struct) {
        return struct.get(tp_as_mapping$LAYOUT, tp_as_mapping$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyMappingMethods *tp_as_mapping
     * }
     */
    public static void tp_as_mapping(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_as_mapping$LAYOUT, tp_as_mapping$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_hash$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hashfunc tp_hash
     * }
     */
    public static final AddressLayout tp_hash$layout() {
        return tp_hash$LAYOUT;
    }

    private static final long tp_hash$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hashfunc tp_hash
     * }
     */
    public static final long tp_hash$offset() {
        return tp_hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hashfunc tp_hash
     * }
     */
    public static MemorySegment tp_hash(MemorySegment struct) {
        return struct.get(tp_hash$LAYOUT, tp_hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hashfunc tp_hash
     * }
     */
    public static void tp_hash(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_hash$LAYOUT, tp_hash$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_call$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_call"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ternaryfunc tp_call
     * }
     */
    public static final AddressLayout tp_call$layout() {
        return tp_call$LAYOUT;
    }

    private static final long tp_call$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ternaryfunc tp_call
     * }
     */
    public static final long tp_call$offset() {
        return tp_call$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ternaryfunc tp_call
     * }
     */
    public static MemorySegment tp_call(MemorySegment struct) {
        return struct.get(tp_call$LAYOUT, tp_call$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ternaryfunc tp_call
     * }
     */
    public static void tp_call(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_call$LAYOUT, tp_call$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_str$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_str"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * reprfunc tp_str
     * }
     */
    public static final AddressLayout tp_str$layout() {
        return tp_str$LAYOUT;
    }

    private static final long tp_str$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * reprfunc tp_str
     * }
     */
    public static final long tp_str$offset() {
        return tp_str$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * reprfunc tp_str
     * }
     */
    public static MemorySegment tp_str(MemorySegment struct) {
        return struct.get(tp_str$LAYOUT, tp_str$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * reprfunc tp_str
     * }
     */
    public static void tp_str(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_str$LAYOUT, tp_str$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_getattro$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_getattro"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * getattrofunc tp_getattro
     * }
     */
    public static final AddressLayout tp_getattro$layout() {
        return tp_getattro$LAYOUT;
    }

    private static final long tp_getattro$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * getattrofunc tp_getattro
     * }
     */
    public static final long tp_getattro$offset() {
        return tp_getattro$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * getattrofunc tp_getattro
     * }
     */
    public static MemorySegment tp_getattro(MemorySegment struct) {
        return struct.get(tp_getattro$LAYOUT, tp_getattro$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * getattrofunc tp_getattro
     * }
     */
    public static void tp_getattro(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_getattro$LAYOUT, tp_getattro$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_setattro$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_setattro"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * setattrofunc tp_setattro
     * }
     */
    public static final AddressLayout tp_setattro$layout() {
        return tp_setattro$LAYOUT;
    }

    private static final long tp_setattro$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * setattrofunc tp_setattro
     * }
     */
    public static final long tp_setattro$offset() {
        return tp_setattro$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * setattrofunc tp_setattro
     * }
     */
    public static MemorySegment tp_setattro(MemorySegment struct) {
        return struct.get(tp_setattro$LAYOUT, tp_setattro$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * setattrofunc tp_setattro
     * }
     */
    public static void tp_setattro(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_setattro$LAYOUT, tp_setattro$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_as_buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_as_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyBufferProcs *tp_as_buffer
     * }
     */
    public static final AddressLayout tp_as_buffer$layout() {
        return tp_as_buffer$LAYOUT;
    }

    private static final long tp_as_buffer$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyBufferProcs *tp_as_buffer
     * }
     */
    public static final long tp_as_buffer$offset() {
        return tp_as_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyBufferProcs *tp_as_buffer
     * }
     */
    public static MemorySegment tp_as_buffer(MemorySegment struct) {
        return struct.get(tp_as_buffer$LAYOUT, tp_as_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyBufferProcs *tp_as_buffer
     * }
     */
    public static void tp_as_buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_as_buffer$LAYOUT, tp_as_buffer$OFFSET, fieldValue);
    }

    private static final OfLong tp_flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tp_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long tp_flags
     * }
     */
    public static final OfLong tp_flags$layout() {
        return tp_flags$LAYOUT;
    }

    private static final long tp_flags$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long tp_flags
     * }
     */
    public static final long tp_flags$offset() {
        return tp_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long tp_flags
     * }
     */
    public static long tp_flags(MemorySegment struct) {
        return struct.get(tp_flags$LAYOUT, tp_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long tp_flags
     * }
     */
    public static void tp_flags(MemorySegment struct, long fieldValue) {
        struct.set(tp_flags$LAYOUT, tp_flags$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_doc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_doc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *tp_doc
     * }
     */
    public static final AddressLayout tp_doc$layout() {
        return tp_doc$LAYOUT;
    }

    private static final long tp_doc$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *tp_doc
     * }
     */
    public static final long tp_doc$offset() {
        return tp_doc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *tp_doc
     * }
     */
    public static MemorySegment tp_doc(MemorySegment struct) {
        return struct.get(tp_doc$LAYOUT, tp_doc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *tp_doc
     * }
     */
    public static void tp_doc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_doc$LAYOUT, tp_doc$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_traverse$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_traverse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * traverseproc tp_traverse
     * }
     */
    public static final AddressLayout tp_traverse$layout() {
        return tp_traverse$LAYOUT;
    }

    private static final long tp_traverse$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * traverseproc tp_traverse
     * }
     */
    public static final long tp_traverse$offset() {
        return tp_traverse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * traverseproc tp_traverse
     * }
     */
    public static MemorySegment tp_traverse(MemorySegment struct) {
        return struct.get(tp_traverse$LAYOUT, tp_traverse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * traverseproc tp_traverse
     * }
     */
    public static void tp_traverse(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_traverse$LAYOUT, tp_traverse$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_clear$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_clear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inquiry tp_clear
     * }
     */
    public static final AddressLayout tp_clear$layout() {
        return tp_clear$LAYOUT;
    }

    private static final long tp_clear$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inquiry tp_clear
     * }
     */
    public static final long tp_clear$offset() {
        return tp_clear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inquiry tp_clear
     * }
     */
    public static MemorySegment tp_clear(MemorySegment struct) {
        return struct.get(tp_clear$LAYOUT, tp_clear$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inquiry tp_clear
     * }
     */
    public static void tp_clear(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_clear$LAYOUT, tp_clear$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_richcompare$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_richcompare"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * richcmpfunc tp_richcompare
     * }
     */
    public static final AddressLayout tp_richcompare$layout() {
        return tp_richcompare$LAYOUT;
    }

    private static final long tp_richcompare$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * richcmpfunc tp_richcompare
     * }
     */
    public static final long tp_richcompare$offset() {
        return tp_richcompare$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * richcmpfunc tp_richcompare
     * }
     */
    public static MemorySegment tp_richcompare(MemorySegment struct) {
        return struct.get(tp_richcompare$LAYOUT, tp_richcompare$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * richcmpfunc tp_richcompare
     * }
     */
    public static void tp_richcompare(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_richcompare$LAYOUT, tp_richcompare$OFFSET, fieldValue);
    }

    private static final OfLong tp_weaklistoffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tp_weaklistoffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_weaklistoffset
     * }
     */
    public static final OfLong tp_weaklistoffset$layout() {
        return tp_weaklistoffset$LAYOUT;
    }

    private static final long tp_weaklistoffset$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_weaklistoffset
     * }
     */
    public static final long tp_weaklistoffset$offset() {
        return tp_weaklistoffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_weaklistoffset
     * }
     */
    public static long tp_weaklistoffset(MemorySegment struct) {
        return struct.get(tp_weaklistoffset$LAYOUT, tp_weaklistoffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_weaklistoffset
     * }
     */
    public static void tp_weaklistoffset(MemorySegment struct, long fieldValue) {
        struct.set(tp_weaklistoffset$LAYOUT, tp_weaklistoffset$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_iter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_iter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * getiterfunc tp_iter
     * }
     */
    public static final AddressLayout tp_iter$layout() {
        return tp_iter$LAYOUT;
    }

    private static final long tp_iter$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * getiterfunc tp_iter
     * }
     */
    public static final long tp_iter$offset() {
        return tp_iter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * getiterfunc tp_iter
     * }
     */
    public static MemorySegment tp_iter(MemorySegment struct) {
        return struct.get(tp_iter$LAYOUT, tp_iter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * getiterfunc tp_iter
     * }
     */
    public static void tp_iter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_iter$LAYOUT, tp_iter$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_iternext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_iternext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * iternextfunc tp_iternext
     * }
     */
    public static final AddressLayout tp_iternext$layout() {
        return tp_iternext$LAYOUT;
    }

    private static final long tp_iternext$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * iternextfunc tp_iternext
     * }
     */
    public static final long tp_iternext$offset() {
        return tp_iternext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * iternextfunc tp_iternext
     * }
     */
    public static MemorySegment tp_iternext(MemorySegment struct) {
        return struct.get(tp_iternext$LAYOUT, tp_iternext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * iternextfunc tp_iternext
     * }
     */
    public static void tp_iternext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_iternext$LAYOUT, tp_iternext$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_methods$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_methods"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyMethodDef *tp_methods
     * }
     */
    public static final AddressLayout tp_methods$layout() {
        return tp_methods$LAYOUT;
    }

    private static final long tp_methods$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyMethodDef *tp_methods
     * }
     */
    public static final long tp_methods$offset() {
        return tp_methods$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyMethodDef *tp_methods
     * }
     */
    public static MemorySegment tp_methods(MemorySegment struct) {
        return struct.get(tp_methods$LAYOUT, tp_methods$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyMethodDef *tp_methods
     * }
     */
    public static void tp_methods(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_methods$LAYOUT, tp_methods$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_members$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_members"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyMemberDef *tp_members
     * }
     */
    public static final AddressLayout tp_members$layout() {
        return tp_members$LAYOUT;
    }

    private static final long tp_members$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyMemberDef *tp_members
     * }
     */
    public static final long tp_members$offset() {
        return tp_members$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyMemberDef *tp_members
     * }
     */
    public static MemorySegment tp_members(MemorySegment struct) {
        return struct.get(tp_members$LAYOUT, tp_members$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyMemberDef *tp_members
     * }
     */
    public static void tp_members(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_members$LAYOUT, tp_members$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_getset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_getset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyGetSetDef *tp_getset
     * }
     */
    public static final AddressLayout tp_getset$layout() {
        return tp_getset$LAYOUT;
    }

    private static final long tp_getset$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyGetSetDef *tp_getset
     * }
     */
    public static final long tp_getset$offset() {
        return tp_getset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyGetSetDef *tp_getset
     * }
     */
    public static MemorySegment tp_getset(MemorySegment struct) {
        return struct.get(tp_getset$LAYOUT, tp_getset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyGetSetDef *tp_getset
     * }
     */
    public static void tp_getset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_getset$LAYOUT, tp_getset$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_base$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyTypeObject *tp_base
     * }
     */
    public static final AddressLayout tp_base$layout() {
        return tp_base$LAYOUT;
    }

    private static final long tp_base$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyTypeObject *tp_base
     * }
     */
    public static final long tp_base$offset() {
        return tp_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyTypeObject *tp_base
     * }
     */
    public static MemorySegment tp_base(MemorySegment struct) {
        return struct.get(tp_base$LAYOUT, tp_base$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyTypeObject *tp_base
     * }
     */
    public static void tp_base(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_base$LAYOUT, tp_base$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_dict$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_dict"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *tp_dict
     * }
     */
    public static final AddressLayout tp_dict$layout() {
        return tp_dict$LAYOUT;
    }

    private static final long tp_dict$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *tp_dict
     * }
     */
    public static final long tp_dict$offset() {
        return tp_dict$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *tp_dict
     * }
     */
    public static MemorySegment tp_dict(MemorySegment struct) {
        return struct.get(tp_dict$LAYOUT, tp_dict$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *tp_dict
     * }
     */
    public static void tp_dict(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_dict$LAYOUT, tp_dict$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_descr_get$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_descr_get"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * descrgetfunc tp_descr_get
     * }
     */
    public static final AddressLayout tp_descr_get$layout() {
        return tp_descr_get$LAYOUT;
    }

    private static final long tp_descr_get$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * descrgetfunc tp_descr_get
     * }
     */
    public static final long tp_descr_get$offset() {
        return tp_descr_get$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * descrgetfunc tp_descr_get
     * }
     */
    public static MemorySegment tp_descr_get(MemorySegment struct) {
        return struct.get(tp_descr_get$LAYOUT, tp_descr_get$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * descrgetfunc tp_descr_get
     * }
     */
    public static void tp_descr_get(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_descr_get$LAYOUT, tp_descr_get$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_descr_set$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_descr_set"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * descrsetfunc tp_descr_set
     * }
     */
    public static final AddressLayout tp_descr_set$layout() {
        return tp_descr_set$LAYOUT;
    }

    private static final long tp_descr_set$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * descrsetfunc tp_descr_set
     * }
     */
    public static final long tp_descr_set$offset() {
        return tp_descr_set$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * descrsetfunc tp_descr_set
     * }
     */
    public static MemorySegment tp_descr_set(MemorySegment struct) {
        return struct.get(tp_descr_set$LAYOUT, tp_descr_set$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * descrsetfunc tp_descr_set
     * }
     */
    public static void tp_descr_set(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_descr_set$LAYOUT, tp_descr_set$OFFSET, fieldValue);
    }

    private static final OfLong tp_dictoffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tp_dictoffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_dictoffset
     * }
     */
    public static final OfLong tp_dictoffset$layout() {
        return tp_dictoffset$LAYOUT;
    }

    private static final long tp_dictoffset$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_dictoffset
     * }
     */
    public static final long tp_dictoffset$offset() {
        return tp_dictoffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_dictoffset
     * }
     */
    public static long tp_dictoffset(MemorySegment struct) {
        return struct.get(tp_dictoffset$LAYOUT, tp_dictoffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t tp_dictoffset
     * }
     */
    public static void tp_dictoffset(MemorySegment struct, long fieldValue) {
        struct.set(tp_dictoffset$LAYOUT, tp_dictoffset$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_init$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * initproc tp_init
     * }
     */
    public static final AddressLayout tp_init$layout() {
        return tp_init$LAYOUT;
    }

    private static final long tp_init$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * initproc tp_init
     * }
     */
    public static final long tp_init$offset() {
        return tp_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * initproc tp_init
     * }
     */
    public static MemorySegment tp_init(MemorySegment struct) {
        return struct.get(tp_init$LAYOUT, tp_init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * initproc tp_init
     * }
     */
    public static void tp_init(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_init$LAYOUT, tp_init$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_alloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * allocfunc tp_alloc
     * }
     */
    public static final AddressLayout tp_alloc$layout() {
        return tp_alloc$LAYOUT;
    }

    private static final long tp_alloc$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * allocfunc tp_alloc
     * }
     */
    public static final long tp_alloc$offset() {
        return tp_alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * allocfunc tp_alloc
     * }
     */
    public static MemorySegment tp_alloc(MemorySegment struct) {
        return struct.get(tp_alloc$LAYOUT, tp_alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * allocfunc tp_alloc
     * }
     */
    public static void tp_alloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_alloc$LAYOUT, tp_alloc$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_new$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_new"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * newfunc tp_new
     * }
     */
    public static final AddressLayout tp_new$layout() {
        return tp_new$LAYOUT;
    }

    private static final long tp_new$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * newfunc tp_new
     * }
     */
    public static final long tp_new$offset() {
        return tp_new$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * newfunc tp_new
     * }
     */
    public static MemorySegment tp_new(MemorySegment struct) {
        return struct.get(tp_new$LAYOUT, tp_new$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * newfunc tp_new
     * }
     */
    public static void tp_new(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_new$LAYOUT, tp_new$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * freefunc tp_free
     * }
     */
    public static final AddressLayout tp_free$layout() {
        return tp_free$LAYOUT;
    }

    private static final long tp_free$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * freefunc tp_free
     * }
     */
    public static final long tp_free$offset() {
        return tp_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * freefunc tp_free
     * }
     */
    public static MemorySegment tp_free(MemorySegment struct) {
        return struct.get(tp_free$LAYOUT, tp_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * freefunc tp_free
     * }
     */
    public static void tp_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_free$LAYOUT, tp_free$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_is_gc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_is_gc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inquiry tp_is_gc
     * }
     */
    public static final AddressLayout tp_is_gc$layout() {
        return tp_is_gc$LAYOUT;
    }

    private static final long tp_is_gc$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inquiry tp_is_gc
     * }
     */
    public static final long tp_is_gc$offset() {
        return tp_is_gc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inquiry tp_is_gc
     * }
     */
    public static MemorySegment tp_is_gc(MemorySegment struct) {
        return struct.get(tp_is_gc$LAYOUT, tp_is_gc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inquiry tp_is_gc
     * }
     */
    public static void tp_is_gc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_is_gc$LAYOUT, tp_is_gc$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_bases$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_bases"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *tp_bases
     * }
     */
    public static final AddressLayout tp_bases$layout() {
        return tp_bases$LAYOUT;
    }

    private static final long tp_bases$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *tp_bases
     * }
     */
    public static final long tp_bases$offset() {
        return tp_bases$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *tp_bases
     * }
     */
    public static MemorySegment tp_bases(MemorySegment struct) {
        return struct.get(tp_bases$LAYOUT, tp_bases$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *tp_bases
     * }
     */
    public static void tp_bases(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_bases$LAYOUT, tp_bases$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_mro$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_mro"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *tp_mro
     * }
     */
    public static final AddressLayout tp_mro$layout() {
        return tp_mro$LAYOUT;
    }

    private static final long tp_mro$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *tp_mro
     * }
     */
    public static final long tp_mro$offset() {
        return tp_mro$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *tp_mro
     * }
     */
    public static MemorySegment tp_mro(MemorySegment struct) {
        return struct.get(tp_mro$LAYOUT, tp_mro$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *tp_mro
     * }
     */
    public static void tp_mro(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_mro$LAYOUT, tp_mro$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_cache$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_cache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *tp_cache
     * }
     */
    public static final AddressLayout tp_cache$layout() {
        return tp_cache$LAYOUT;
    }

    private static final long tp_cache$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *tp_cache
     * }
     */
    public static final long tp_cache$offset() {
        return tp_cache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *tp_cache
     * }
     */
    public static MemorySegment tp_cache(MemorySegment struct) {
        return struct.get(tp_cache$LAYOUT, tp_cache$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *tp_cache
     * }
     */
    public static void tp_cache(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_cache$LAYOUT, tp_cache$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_subclasses$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_subclasses"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *tp_subclasses
     * }
     */
    public static final AddressLayout tp_subclasses$layout() {
        return tp_subclasses$LAYOUT;
    }

    private static final long tp_subclasses$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *tp_subclasses
     * }
     */
    public static final long tp_subclasses$offset() {
        return tp_subclasses$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *tp_subclasses
     * }
     */
    public static MemorySegment tp_subclasses(MemorySegment struct) {
        return struct.get(tp_subclasses$LAYOUT, tp_subclasses$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *tp_subclasses
     * }
     */
    public static void tp_subclasses(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_subclasses$LAYOUT, tp_subclasses$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_weaklist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_weaklist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *tp_weaklist
     * }
     */
    public static final AddressLayout tp_weaklist$layout() {
        return tp_weaklist$LAYOUT;
    }

    private static final long tp_weaklist$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *tp_weaklist
     * }
     */
    public static final long tp_weaklist$offset() {
        return tp_weaklist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *tp_weaklist
     * }
     */
    public static MemorySegment tp_weaklist(MemorySegment struct) {
        return struct.get(tp_weaklist$LAYOUT, tp_weaklist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *tp_weaklist
     * }
     */
    public static void tp_weaklist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_weaklist$LAYOUT, tp_weaklist$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_del$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_del"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * destructor tp_del
     * }
     */
    public static final AddressLayout tp_del$layout() {
        return tp_del$LAYOUT;
    }

    private static final long tp_del$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * destructor tp_del
     * }
     */
    public static final long tp_del$offset() {
        return tp_del$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * destructor tp_del
     * }
     */
    public static MemorySegment tp_del(MemorySegment struct) {
        return struct.get(tp_del$LAYOUT, tp_del$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * destructor tp_del
     * }
     */
    public static void tp_del(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_del$LAYOUT, tp_del$OFFSET, fieldValue);
    }

    private static final OfInt tp_version_tag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tp_version_tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int tp_version_tag
     * }
     */
    public static final OfInt tp_version_tag$layout() {
        return tp_version_tag$LAYOUT;
    }

    private static final long tp_version_tag$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int tp_version_tag
     * }
     */
    public static final long tp_version_tag$offset() {
        return tp_version_tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int tp_version_tag
     * }
     */
    public static int tp_version_tag(MemorySegment struct) {
        return struct.get(tp_version_tag$LAYOUT, tp_version_tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int tp_version_tag
     * }
     */
    public static void tp_version_tag(MemorySegment struct, int fieldValue) {
        struct.set(tp_version_tag$LAYOUT, tp_version_tag$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_finalize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_finalize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * destructor tp_finalize
     * }
     */
    public static final AddressLayout tp_finalize$layout() {
        return tp_finalize$LAYOUT;
    }

    private static final long tp_finalize$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * destructor tp_finalize
     * }
     */
    public static final long tp_finalize$offset() {
        return tp_finalize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * destructor tp_finalize
     * }
     */
    public static MemorySegment tp_finalize(MemorySegment struct) {
        return struct.get(tp_finalize$LAYOUT, tp_finalize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * destructor tp_finalize
     * }
     */
    public static void tp_finalize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_finalize$LAYOUT, tp_finalize$OFFSET, fieldValue);
    }

    private static final AddressLayout tp_vectorcall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tp_vectorcall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vectorcallfunc tp_vectorcall
     * }
     */
    public static final AddressLayout tp_vectorcall$layout() {
        return tp_vectorcall$LAYOUT;
    }

    private static final long tp_vectorcall$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vectorcallfunc tp_vectorcall
     * }
     */
    public static final long tp_vectorcall$offset() {
        return tp_vectorcall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vectorcallfunc tp_vectorcall
     * }
     */
    public static MemorySegment tp_vectorcall(MemorySegment struct) {
        return struct.get(tp_vectorcall$LAYOUT, tp_vectorcall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vectorcallfunc tp_vectorcall
     * }
     */
    public static void tp_vectorcall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tp_vectorcall$LAYOUT, tp_vectorcall$OFFSET, fieldValue);
    }

    private static final OfByte tp_watched$LAYOUT = (OfByte)$LAYOUT.select(groupElement("tp_watched"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char tp_watched
     * }
     */
    public static final OfByte tp_watched$layout() {
        return tp_watched$LAYOUT;
    }

    private static final long tp_watched$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char tp_watched
     * }
     */
    public static final long tp_watched$offset() {
        return tp_watched$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char tp_watched
     * }
     */
    public static byte tp_watched(MemorySegment struct) {
        return struct.get(tp_watched$LAYOUT, tp_watched$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char tp_watched
     * }
     */
    public static void tp_watched(MemorySegment struct, byte fieldValue) {
        struct.set(tp_watched$LAYOUT, tp_watched$OFFSET, fieldValue);
    }

    private static final OfShort tp_versions_used$LAYOUT = (OfShort)$LAYOUT.select(groupElement("tp_versions_used"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t tp_versions_used
     * }
     */
    public static final OfShort tp_versions_used$layout() {
        return tp_versions_used$LAYOUT;
    }

    private static final long tp_versions_used$OFFSET = 410;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t tp_versions_used
     * }
     */
    public static final long tp_versions_used$offset() {
        return tp_versions_used$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t tp_versions_used
     * }
     */
    public static short tp_versions_used(MemorySegment struct) {
        return struct.get(tp_versions_used$LAYOUT, tp_versions_used$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t tp_versions_used
     * }
     */
    public static void tp_versions_used(MemorySegment struct, short fieldValue) {
        struct.set(tp_versions_used$LAYOUT, tp_versions_used$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

