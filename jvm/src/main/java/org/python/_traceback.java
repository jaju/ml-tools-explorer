// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _traceback {
 *     PyObject ob_base;
 *     PyTracebackObject *tb_next;
 *     PyFrameObject *tb_frame;
 *     int tb_lasti;
 *     int tb_lineno;
 * }
 * }
 */
public class _traceback {

    _traceback() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _object.layout().withName("ob_base"),
        Python_h.C_POINTER.withName("tb_next"),
        Python_h.C_POINTER.withName("tb_frame"),
        Python_h.C_INT.withName("tb_lasti"),
        Python_h.C_INT.withName("tb_lineno")
    ).withName("_traceback");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ob_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ob_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final GroupLayout ob_base$layout() {
        return ob_base$LAYOUT;
    }

    private static final long ob_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final long ob_base$offset() {
        return ob_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static MemorySegment ob_base(MemorySegment struct) {
        return struct.asSlice(ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static void ob_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    private static final AddressLayout tb_next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tb_next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyTracebackObject *tb_next
     * }
     */
    public static final AddressLayout tb_next$layout() {
        return tb_next$LAYOUT;
    }

    private static final long tb_next$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyTracebackObject *tb_next
     * }
     */
    public static final long tb_next$offset() {
        return tb_next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyTracebackObject *tb_next
     * }
     */
    public static MemorySegment tb_next(MemorySegment struct) {
        return struct.get(tb_next$LAYOUT, tb_next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyTracebackObject *tb_next
     * }
     */
    public static void tb_next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tb_next$LAYOUT, tb_next$OFFSET, fieldValue);
    }

    private static final AddressLayout tb_frame$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tb_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyFrameObject *tb_frame
     * }
     */
    public static final AddressLayout tb_frame$layout() {
        return tb_frame$LAYOUT;
    }

    private static final long tb_frame$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyFrameObject *tb_frame
     * }
     */
    public static final long tb_frame$offset() {
        return tb_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyFrameObject *tb_frame
     * }
     */
    public static MemorySegment tb_frame(MemorySegment struct) {
        return struct.get(tb_frame$LAYOUT, tb_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyFrameObject *tb_frame
     * }
     */
    public static void tb_frame(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tb_frame$LAYOUT, tb_frame$OFFSET, fieldValue);
    }

    private static final OfInt tb_lasti$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tb_lasti"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tb_lasti
     * }
     */
    public static final OfInt tb_lasti$layout() {
        return tb_lasti$LAYOUT;
    }

    private static final long tb_lasti$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tb_lasti
     * }
     */
    public static final long tb_lasti$offset() {
        return tb_lasti$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tb_lasti
     * }
     */
    public static int tb_lasti(MemorySegment struct) {
        return struct.get(tb_lasti$LAYOUT, tb_lasti$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tb_lasti
     * }
     */
    public static void tb_lasti(MemorySegment struct, int fieldValue) {
        struct.set(tb_lasti$LAYOUT, tb_lasti$OFFSET, fieldValue);
    }

    private static final OfInt tb_lineno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tb_lineno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tb_lineno
     * }
     */
    public static final OfInt tb_lineno$layout() {
        return tb_lineno$LAYOUT;
    }

    private static final long tb_lineno$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tb_lineno
     * }
     */
    public static final long tb_lineno$offset() {
        return tb_lineno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tb_lineno
     * }
     */
    public static int tb_lineno(MemorySegment struct) {
        return struct.get(tb_lineno$LAYOUT, tb_lineno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tb_lineno
     * }
     */
    public static void tb_lineno(MemorySegment struct, int fieldValue) {
        struct.set(tb_lineno$LAYOUT, tb_lineno$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

