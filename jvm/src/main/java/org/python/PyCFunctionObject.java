// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     PyObject ob_base;
 *     PyMethodDef *m_ml;
 *     PyObject *m_self;
 *     PyObject *m_module;
 *     PyObject *m_weakreflist;
 *     vectorcallfunc vectorcall;
 * }
 * }
 */
public class PyCFunctionObject {

    PyCFunctionObject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _object.layout().withName("ob_base"),
        Python_h.C_POINTER.withName("m_ml"),
        Python_h.C_POINTER.withName("m_self"),
        Python_h.C_POINTER.withName("m_module"),
        Python_h.C_POINTER.withName("m_weakreflist"),
        Python_h.C_POINTER.withName("vectorcall")
    ).withName("$anon$7:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ob_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ob_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final GroupLayout ob_base$layout() {
        return ob_base$LAYOUT;
    }

    private static final long ob_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final long ob_base$offset() {
        return ob_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static MemorySegment ob_base(MemorySegment struct) {
        return struct.asSlice(ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static void ob_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    private static final AddressLayout m_ml$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_ml"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyMethodDef *m_ml
     * }
     */
    public static final AddressLayout m_ml$layout() {
        return m_ml$LAYOUT;
    }

    private static final long m_ml$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyMethodDef *m_ml
     * }
     */
    public static final long m_ml$offset() {
        return m_ml$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyMethodDef *m_ml
     * }
     */
    public static MemorySegment m_ml(MemorySegment struct) {
        return struct.get(m_ml$LAYOUT, m_ml$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyMethodDef *m_ml
     * }
     */
    public static void m_ml(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_ml$LAYOUT, m_ml$OFFSET, fieldValue);
    }

    private static final AddressLayout m_self$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_self"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *m_self
     * }
     */
    public static final AddressLayout m_self$layout() {
        return m_self$LAYOUT;
    }

    private static final long m_self$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *m_self
     * }
     */
    public static final long m_self$offset() {
        return m_self$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *m_self
     * }
     */
    public static MemorySegment m_self(MemorySegment struct) {
        return struct.get(m_self$LAYOUT, m_self$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *m_self
     * }
     */
    public static void m_self(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_self$LAYOUT, m_self$OFFSET, fieldValue);
    }

    private static final AddressLayout m_module$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_module"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *m_module
     * }
     */
    public static final AddressLayout m_module$layout() {
        return m_module$LAYOUT;
    }

    private static final long m_module$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *m_module
     * }
     */
    public static final long m_module$offset() {
        return m_module$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *m_module
     * }
     */
    public static MemorySegment m_module(MemorySegment struct) {
        return struct.get(m_module$LAYOUT, m_module$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *m_module
     * }
     */
    public static void m_module(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_module$LAYOUT, m_module$OFFSET, fieldValue);
    }

    private static final AddressLayout m_weakreflist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("m_weakreflist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *m_weakreflist
     * }
     */
    public static final AddressLayout m_weakreflist$layout() {
        return m_weakreflist$LAYOUT;
    }

    private static final long m_weakreflist$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *m_weakreflist
     * }
     */
    public static final long m_weakreflist$offset() {
        return m_weakreflist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *m_weakreflist
     * }
     */
    public static MemorySegment m_weakreflist(MemorySegment struct) {
        return struct.get(m_weakreflist$LAYOUT, m_weakreflist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *m_weakreflist
     * }
     */
    public static void m_weakreflist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(m_weakreflist$LAYOUT, m_weakreflist$OFFSET, fieldValue);
    }

    private static final AddressLayout vectorcall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vectorcall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static final AddressLayout vectorcall$layout() {
        return vectorcall$LAYOUT;
    }

    private static final long vectorcall$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static final long vectorcall$offset() {
        return vectorcall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static MemorySegment vectorcall(MemorySegment struct) {
        return struct.get(vectorcall$LAYOUT, vectorcall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static void vectorcall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vectorcall$LAYOUT, vectorcall$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

