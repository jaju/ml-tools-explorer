// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     unaryfunc am_await;
 *     unaryfunc am_aiter;
 *     unaryfunc am_anext;
 *     sendfunc am_send;
 * }
 * }
 */
public class PyAsyncMethods {

    PyAsyncMethods() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("am_await"),
        Python_h.C_POINTER.withName("am_aiter"),
        Python_h.C_POINTER.withName("am_anext"),
        Python_h.C_POINTER.withName("am_send")
    ).withName("$anon$129:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout am_await$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("am_await"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc am_await
     * }
     */
    public static final AddressLayout am_await$layout() {
        return am_await$LAYOUT;
    }

    private static final long am_await$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc am_await
     * }
     */
    public static final long am_await$offset() {
        return am_await$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc am_await
     * }
     */
    public static MemorySegment am_await(MemorySegment struct) {
        return struct.get(am_await$LAYOUT, am_await$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc am_await
     * }
     */
    public static void am_await(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(am_await$LAYOUT, am_await$OFFSET, fieldValue);
    }

    private static final AddressLayout am_aiter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("am_aiter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc am_aiter
     * }
     */
    public static final AddressLayout am_aiter$layout() {
        return am_aiter$LAYOUT;
    }

    private static final long am_aiter$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc am_aiter
     * }
     */
    public static final long am_aiter$offset() {
        return am_aiter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc am_aiter
     * }
     */
    public static MemorySegment am_aiter(MemorySegment struct) {
        return struct.get(am_aiter$LAYOUT, am_aiter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc am_aiter
     * }
     */
    public static void am_aiter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(am_aiter$LAYOUT, am_aiter$OFFSET, fieldValue);
    }

    private static final AddressLayout am_anext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("am_anext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc am_anext
     * }
     */
    public static final AddressLayout am_anext$layout() {
        return am_anext$LAYOUT;
    }

    private static final long am_anext$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc am_anext
     * }
     */
    public static final long am_anext$offset() {
        return am_anext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc am_anext
     * }
     */
    public static MemorySegment am_anext(MemorySegment struct) {
        return struct.get(am_anext$LAYOUT, am_anext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc am_anext
     * }
     */
    public static void am_anext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(am_anext$LAYOUT, am_anext$OFFSET, fieldValue);
    }

    private static final AddressLayout am_send$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("am_send"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * sendfunc am_send
     * }
     */
    public static final AddressLayout am_send$layout() {
        return am_send$LAYOUT;
    }

    private static final long am_send$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * sendfunc am_send
     * }
     */
    public static final long am_send$offset() {
        return am_send$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * sendfunc am_send
     * }
     */
    public static MemorySegment am_send(MemorySegment struct) {
        return struct.get(am_send$LAYOUT, am_send$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * sendfunc am_send
     * }
     */
    public static void am_send(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(am_send$LAYOUT, am_send$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

