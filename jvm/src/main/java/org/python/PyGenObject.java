// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     PyObject ob_base;
 *     PyObject *gi_weakreflist;
 *     PyObject *gi_name;
 *     PyObject *gi_qualname;
 *     _PyErr_StackItem gi_exc_state;
 *     PyObject *gi_origin_or_finalizer;
 *     char gi_hooks_inited;
 *     char gi_closed;
 *     char gi_running_async;
 *     int8_t gi_frame_state;
 *     PyObject *gi_iframe[1];
 * }
 * }
 */
public class PyGenObject {

    PyGenObject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _object.layout().withName("ob_base"),
        Python_h.C_POINTER.withName("gi_weakreflist"),
        Python_h.C_POINTER.withName("gi_name"),
        Python_h.C_POINTER.withName("gi_qualname"),
        _err_stackitem.layout().withName("gi_exc_state"),
        Python_h.C_POINTER.withName("gi_origin_or_finalizer"),
        Python_h.C_CHAR.withName("gi_hooks_inited"),
        Python_h.C_CHAR.withName("gi_closed"),
        Python_h.C_CHAR.withName("gi_running_async"),
        Python_h.C_CHAR.withName("gi_frame_state"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(1, Python_h.C_POINTER).withName("gi_iframe")
    ).withName("$anon$31:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ob_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ob_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final GroupLayout ob_base$layout() {
        return ob_base$LAYOUT;
    }

    private static final long ob_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final long ob_base$offset() {
        return ob_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static MemorySegment ob_base(MemorySegment struct) {
        return struct.asSlice(ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static void ob_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    private static final AddressLayout gi_weakreflist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gi_weakreflist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *gi_weakreflist
     * }
     */
    public static final AddressLayout gi_weakreflist$layout() {
        return gi_weakreflist$LAYOUT;
    }

    private static final long gi_weakreflist$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *gi_weakreflist
     * }
     */
    public static final long gi_weakreflist$offset() {
        return gi_weakreflist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *gi_weakreflist
     * }
     */
    public static MemorySegment gi_weakreflist(MemorySegment struct) {
        return struct.get(gi_weakreflist$LAYOUT, gi_weakreflist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *gi_weakreflist
     * }
     */
    public static void gi_weakreflist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gi_weakreflist$LAYOUT, gi_weakreflist$OFFSET, fieldValue);
    }

    private static final AddressLayout gi_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gi_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *gi_name
     * }
     */
    public static final AddressLayout gi_name$layout() {
        return gi_name$LAYOUT;
    }

    private static final long gi_name$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *gi_name
     * }
     */
    public static final long gi_name$offset() {
        return gi_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *gi_name
     * }
     */
    public static MemorySegment gi_name(MemorySegment struct) {
        return struct.get(gi_name$LAYOUT, gi_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *gi_name
     * }
     */
    public static void gi_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gi_name$LAYOUT, gi_name$OFFSET, fieldValue);
    }

    private static final AddressLayout gi_qualname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gi_qualname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *gi_qualname
     * }
     */
    public static final AddressLayout gi_qualname$layout() {
        return gi_qualname$LAYOUT;
    }

    private static final long gi_qualname$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *gi_qualname
     * }
     */
    public static final long gi_qualname$offset() {
        return gi_qualname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *gi_qualname
     * }
     */
    public static MemorySegment gi_qualname(MemorySegment struct) {
        return struct.get(gi_qualname$LAYOUT, gi_qualname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *gi_qualname
     * }
     */
    public static void gi_qualname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gi_qualname$LAYOUT, gi_qualname$OFFSET, fieldValue);
    }

    private static final GroupLayout gi_exc_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gi_exc_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyErr_StackItem gi_exc_state
     * }
     */
    public static final GroupLayout gi_exc_state$layout() {
        return gi_exc_state$LAYOUT;
    }

    private static final long gi_exc_state$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyErr_StackItem gi_exc_state
     * }
     */
    public static final long gi_exc_state$offset() {
        return gi_exc_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem gi_exc_state
     * }
     */
    public static MemorySegment gi_exc_state(MemorySegment struct) {
        return struct.asSlice(gi_exc_state$OFFSET, gi_exc_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem gi_exc_state
     * }
     */
    public static void gi_exc_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gi_exc_state$OFFSET, gi_exc_state$LAYOUT.byteSize());
    }

    private static final AddressLayout gi_origin_or_finalizer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gi_origin_or_finalizer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *gi_origin_or_finalizer
     * }
     */
    public static final AddressLayout gi_origin_or_finalizer$layout() {
        return gi_origin_or_finalizer$LAYOUT;
    }

    private static final long gi_origin_or_finalizer$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *gi_origin_or_finalizer
     * }
     */
    public static final long gi_origin_or_finalizer$offset() {
        return gi_origin_or_finalizer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *gi_origin_or_finalizer
     * }
     */
    public static MemorySegment gi_origin_or_finalizer(MemorySegment struct) {
        return struct.get(gi_origin_or_finalizer$LAYOUT, gi_origin_or_finalizer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *gi_origin_or_finalizer
     * }
     */
    public static void gi_origin_or_finalizer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gi_origin_or_finalizer$LAYOUT, gi_origin_or_finalizer$OFFSET, fieldValue);
    }

    private static final OfByte gi_hooks_inited$LAYOUT = (OfByte)$LAYOUT.select(groupElement("gi_hooks_inited"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char gi_hooks_inited
     * }
     */
    public static final OfByte gi_hooks_inited$layout() {
        return gi_hooks_inited$LAYOUT;
    }

    private static final long gi_hooks_inited$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char gi_hooks_inited
     * }
     */
    public static final long gi_hooks_inited$offset() {
        return gi_hooks_inited$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char gi_hooks_inited
     * }
     */
    public static byte gi_hooks_inited(MemorySegment struct) {
        return struct.get(gi_hooks_inited$LAYOUT, gi_hooks_inited$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char gi_hooks_inited
     * }
     */
    public static void gi_hooks_inited(MemorySegment struct, byte fieldValue) {
        struct.set(gi_hooks_inited$LAYOUT, gi_hooks_inited$OFFSET, fieldValue);
    }

    private static final OfByte gi_closed$LAYOUT = (OfByte)$LAYOUT.select(groupElement("gi_closed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char gi_closed
     * }
     */
    public static final OfByte gi_closed$layout() {
        return gi_closed$LAYOUT;
    }

    private static final long gi_closed$OFFSET = 65;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char gi_closed
     * }
     */
    public static final long gi_closed$offset() {
        return gi_closed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char gi_closed
     * }
     */
    public static byte gi_closed(MemorySegment struct) {
        return struct.get(gi_closed$LAYOUT, gi_closed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char gi_closed
     * }
     */
    public static void gi_closed(MemorySegment struct, byte fieldValue) {
        struct.set(gi_closed$LAYOUT, gi_closed$OFFSET, fieldValue);
    }

    private static final OfByte gi_running_async$LAYOUT = (OfByte)$LAYOUT.select(groupElement("gi_running_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char gi_running_async
     * }
     */
    public static final OfByte gi_running_async$layout() {
        return gi_running_async$LAYOUT;
    }

    private static final long gi_running_async$OFFSET = 66;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char gi_running_async
     * }
     */
    public static final long gi_running_async$offset() {
        return gi_running_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char gi_running_async
     * }
     */
    public static byte gi_running_async(MemorySegment struct) {
        return struct.get(gi_running_async$LAYOUT, gi_running_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char gi_running_async
     * }
     */
    public static void gi_running_async(MemorySegment struct, byte fieldValue) {
        struct.set(gi_running_async$LAYOUT, gi_running_async$OFFSET, fieldValue);
    }

    private static final OfByte gi_frame_state$LAYOUT = (OfByte)$LAYOUT.select(groupElement("gi_frame_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t gi_frame_state
     * }
     */
    public static final OfByte gi_frame_state$layout() {
        return gi_frame_state$LAYOUT;
    }

    private static final long gi_frame_state$OFFSET = 67;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t gi_frame_state
     * }
     */
    public static final long gi_frame_state$offset() {
        return gi_frame_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t gi_frame_state
     * }
     */
    public static byte gi_frame_state(MemorySegment struct) {
        return struct.get(gi_frame_state$LAYOUT, gi_frame_state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t gi_frame_state
     * }
     */
    public static void gi_frame_state(MemorySegment struct, byte fieldValue) {
        struct.set(gi_frame_state$LAYOUT, gi_frame_state$OFFSET, fieldValue);
    }

    private static final SequenceLayout gi_iframe$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("gi_iframe"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *gi_iframe[1]
     * }
     */
    public static final SequenceLayout gi_iframe$layout() {
        return gi_iframe$LAYOUT;
    }

    private static final long gi_iframe$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *gi_iframe[1]
     * }
     */
    public static final long gi_iframe$offset() {
        return gi_iframe$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *gi_iframe[1]
     * }
     */
    public static MemorySegment gi_iframe(MemorySegment struct) {
        return struct.asSlice(gi_iframe$OFFSET, gi_iframe$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *gi_iframe[1]
     * }
     */
    public static void gi_iframe(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gi_iframe$OFFSET, gi_iframe$LAYOUT.byteSize());
    }

    private static long[] gi_iframe$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * PyObject *gi_iframe[1]
     * }
     */
    public static long[] gi_iframe$dimensions() {
        return gi_iframe$DIMS;
    }
    private static final VarHandle gi_iframe$ELEM_HANDLE = gi_iframe$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * PyObject *gi_iframe[1]
     * }
     */
    public static MemorySegment gi_iframe(MemorySegment struct, long index0) {
        return (MemorySegment)gi_iframe$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * PyObject *gi_iframe[1]
     * }
     */
    public static void gi_iframe(MemorySegment struct, long index0, MemorySegment fieldValue) {
        gi_iframe$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

