// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     binaryfunc nb_add;
 *     binaryfunc nb_subtract;
 *     binaryfunc nb_multiply;
 *     binaryfunc nb_remainder;
 *     binaryfunc nb_divmod;
 *     ternaryfunc nb_power;
 *     unaryfunc nb_negative;
 *     unaryfunc nb_positive;
 *     unaryfunc nb_absolute;
 *     inquiry nb_bool;
 *     unaryfunc nb_invert;
 *     binaryfunc nb_lshift;
 *     binaryfunc nb_rshift;
 *     binaryfunc nb_and;
 *     binaryfunc nb_xor;
 *     binaryfunc nb_or;
 *     unaryfunc nb_int;
 *     void *nb_reserved;
 *     unaryfunc nb_float;
 *     binaryfunc nb_inplace_add;
 *     binaryfunc nb_inplace_subtract;
 *     binaryfunc nb_inplace_multiply;
 *     binaryfunc nb_inplace_remainder;
 *     ternaryfunc nb_inplace_power;
 *     binaryfunc nb_inplace_lshift;
 *     binaryfunc nb_inplace_rshift;
 *     binaryfunc nb_inplace_and;
 *     binaryfunc nb_inplace_xor;
 *     binaryfunc nb_inplace_or;
 *     binaryfunc nb_floor_divide;
 *     binaryfunc nb_true_divide;
 *     binaryfunc nb_inplace_floor_divide;
 *     binaryfunc nb_inplace_true_divide;
 *     unaryfunc nb_index;
 *     binaryfunc nb_matrix_multiply;
 *     binaryfunc nb_inplace_matrix_multiply;
 * }
 * }
 */
public class PyNumberMethods {

    PyNumberMethods() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("nb_add"),
        Python_h.C_POINTER.withName("nb_subtract"),
        Python_h.C_POINTER.withName("nb_multiply"),
        Python_h.C_POINTER.withName("nb_remainder"),
        Python_h.C_POINTER.withName("nb_divmod"),
        Python_h.C_POINTER.withName("nb_power"),
        Python_h.C_POINTER.withName("nb_negative"),
        Python_h.C_POINTER.withName("nb_positive"),
        Python_h.C_POINTER.withName("nb_absolute"),
        Python_h.C_POINTER.withName("nb_bool"),
        Python_h.C_POINTER.withName("nb_invert"),
        Python_h.C_POINTER.withName("nb_lshift"),
        Python_h.C_POINTER.withName("nb_rshift"),
        Python_h.C_POINTER.withName("nb_and"),
        Python_h.C_POINTER.withName("nb_xor"),
        Python_h.C_POINTER.withName("nb_or"),
        Python_h.C_POINTER.withName("nb_int"),
        Python_h.C_POINTER.withName("nb_reserved"),
        Python_h.C_POINTER.withName("nb_float"),
        Python_h.C_POINTER.withName("nb_inplace_add"),
        Python_h.C_POINTER.withName("nb_inplace_subtract"),
        Python_h.C_POINTER.withName("nb_inplace_multiply"),
        Python_h.C_POINTER.withName("nb_inplace_remainder"),
        Python_h.C_POINTER.withName("nb_inplace_power"),
        Python_h.C_POINTER.withName("nb_inplace_lshift"),
        Python_h.C_POINTER.withName("nb_inplace_rshift"),
        Python_h.C_POINTER.withName("nb_inplace_and"),
        Python_h.C_POINTER.withName("nb_inplace_xor"),
        Python_h.C_POINTER.withName("nb_inplace_or"),
        Python_h.C_POINTER.withName("nb_floor_divide"),
        Python_h.C_POINTER.withName("nb_true_divide"),
        Python_h.C_POINTER.withName("nb_inplace_floor_divide"),
        Python_h.C_POINTER.withName("nb_inplace_true_divide"),
        Python_h.C_POINTER.withName("nb_index"),
        Python_h.C_POINTER.withName("nb_matrix_multiply"),
        Python_h.C_POINTER.withName("nb_inplace_matrix_multiply")
    ).withName("$anon$60:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout nb_add$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_add"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_add
     * }
     */
    public static final AddressLayout nb_add$layout() {
        return nb_add$LAYOUT;
    }

    private static final long nb_add$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_add
     * }
     */
    public static final long nb_add$offset() {
        return nb_add$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_add
     * }
     */
    public static MemorySegment nb_add(MemorySegment struct) {
        return struct.get(nb_add$LAYOUT, nb_add$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_add
     * }
     */
    public static void nb_add(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_add$LAYOUT, nb_add$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_subtract$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_subtract"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_subtract
     * }
     */
    public static final AddressLayout nb_subtract$layout() {
        return nb_subtract$LAYOUT;
    }

    private static final long nb_subtract$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_subtract
     * }
     */
    public static final long nb_subtract$offset() {
        return nb_subtract$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_subtract
     * }
     */
    public static MemorySegment nb_subtract(MemorySegment struct) {
        return struct.get(nb_subtract$LAYOUT, nb_subtract$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_subtract
     * }
     */
    public static void nb_subtract(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_subtract$LAYOUT, nb_subtract$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_multiply$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_multiply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_multiply
     * }
     */
    public static final AddressLayout nb_multiply$layout() {
        return nb_multiply$LAYOUT;
    }

    private static final long nb_multiply$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_multiply
     * }
     */
    public static final long nb_multiply$offset() {
        return nb_multiply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_multiply
     * }
     */
    public static MemorySegment nb_multiply(MemorySegment struct) {
        return struct.get(nb_multiply$LAYOUT, nb_multiply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_multiply
     * }
     */
    public static void nb_multiply(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_multiply$LAYOUT, nb_multiply$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_remainder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_remainder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_remainder
     * }
     */
    public static final AddressLayout nb_remainder$layout() {
        return nb_remainder$LAYOUT;
    }

    private static final long nb_remainder$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_remainder
     * }
     */
    public static final long nb_remainder$offset() {
        return nb_remainder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_remainder
     * }
     */
    public static MemorySegment nb_remainder(MemorySegment struct) {
        return struct.get(nb_remainder$LAYOUT, nb_remainder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_remainder
     * }
     */
    public static void nb_remainder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_remainder$LAYOUT, nb_remainder$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_divmod$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_divmod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_divmod
     * }
     */
    public static final AddressLayout nb_divmod$layout() {
        return nb_divmod$LAYOUT;
    }

    private static final long nb_divmod$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_divmod
     * }
     */
    public static final long nb_divmod$offset() {
        return nb_divmod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_divmod
     * }
     */
    public static MemorySegment nb_divmod(MemorySegment struct) {
        return struct.get(nb_divmod$LAYOUT, nb_divmod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_divmod
     * }
     */
    public static void nb_divmod(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_divmod$LAYOUT, nb_divmod$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_power$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_power"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ternaryfunc nb_power
     * }
     */
    public static final AddressLayout nb_power$layout() {
        return nb_power$LAYOUT;
    }

    private static final long nb_power$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ternaryfunc nb_power
     * }
     */
    public static final long nb_power$offset() {
        return nb_power$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ternaryfunc nb_power
     * }
     */
    public static MemorySegment nb_power(MemorySegment struct) {
        return struct.get(nb_power$LAYOUT, nb_power$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ternaryfunc nb_power
     * }
     */
    public static void nb_power(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_power$LAYOUT, nb_power$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_negative$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_negative"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc nb_negative
     * }
     */
    public static final AddressLayout nb_negative$layout() {
        return nb_negative$LAYOUT;
    }

    private static final long nb_negative$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc nb_negative
     * }
     */
    public static final long nb_negative$offset() {
        return nb_negative$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc nb_negative
     * }
     */
    public static MemorySegment nb_negative(MemorySegment struct) {
        return struct.get(nb_negative$LAYOUT, nb_negative$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc nb_negative
     * }
     */
    public static void nb_negative(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_negative$LAYOUT, nb_negative$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_positive$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_positive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc nb_positive
     * }
     */
    public static final AddressLayout nb_positive$layout() {
        return nb_positive$LAYOUT;
    }

    private static final long nb_positive$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc nb_positive
     * }
     */
    public static final long nb_positive$offset() {
        return nb_positive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc nb_positive
     * }
     */
    public static MemorySegment nb_positive(MemorySegment struct) {
        return struct.get(nb_positive$LAYOUT, nb_positive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc nb_positive
     * }
     */
    public static void nb_positive(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_positive$LAYOUT, nb_positive$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_absolute$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_absolute"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc nb_absolute
     * }
     */
    public static final AddressLayout nb_absolute$layout() {
        return nb_absolute$LAYOUT;
    }

    private static final long nb_absolute$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc nb_absolute
     * }
     */
    public static final long nb_absolute$offset() {
        return nb_absolute$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc nb_absolute
     * }
     */
    public static MemorySegment nb_absolute(MemorySegment struct) {
        return struct.get(nb_absolute$LAYOUT, nb_absolute$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc nb_absolute
     * }
     */
    public static void nb_absolute(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_absolute$LAYOUT, nb_absolute$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_bool$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_bool"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * inquiry nb_bool
     * }
     */
    public static final AddressLayout nb_bool$layout() {
        return nb_bool$LAYOUT;
    }

    private static final long nb_bool$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * inquiry nb_bool
     * }
     */
    public static final long nb_bool$offset() {
        return nb_bool$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * inquiry nb_bool
     * }
     */
    public static MemorySegment nb_bool(MemorySegment struct) {
        return struct.get(nb_bool$LAYOUT, nb_bool$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * inquiry nb_bool
     * }
     */
    public static void nb_bool(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_bool$LAYOUT, nb_bool$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_invert$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_invert"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc nb_invert
     * }
     */
    public static final AddressLayout nb_invert$layout() {
        return nb_invert$LAYOUT;
    }

    private static final long nb_invert$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc nb_invert
     * }
     */
    public static final long nb_invert$offset() {
        return nb_invert$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc nb_invert
     * }
     */
    public static MemorySegment nb_invert(MemorySegment struct) {
        return struct.get(nb_invert$LAYOUT, nb_invert$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc nb_invert
     * }
     */
    public static void nb_invert(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_invert$LAYOUT, nb_invert$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_lshift$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_lshift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_lshift
     * }
     */
    public static final AddressLayout nb_lshift$layout() {
        return nb_lshift$LAYOUT;
    }

    private static final long nb_lshift$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_lshift
     * }
     */
    public static final long nb_lshift$offset() {
        return nb_lshift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_lshift
     * }
     */
    public static MemorySegment nb_lshift(MemorySegment struct) {
        return struct.get(nb_lshift$LAYOUT, nb_lshift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_lshift
     * }
     */
    public static void nb_lshift(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_lshift$LAYOUT, nb_lshift$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_rshift$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_rshift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_rshift
     * }
     */
    public static final AddressLayout nb_rshift$layout() {
        return nb_rshift$LAYOUT;
    }

    private static final long nb_rshift$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_rshift
     * }
     */
    public static final long nb_rshift$offset() {
        return nb_rshift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_rshift
     * }
     */
    public static MemorySegment nb_rshift(MemorySegment struct) {
        return struct.get(nb_rshift$LAYOUT, nb_rshift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_rshift
     * }
     */
    public static void nb_rshift(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_rshift$LAYOUT, nb_rshift$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_and$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_and"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_and
     * }
     */
    public static final AddressLayout nb_and$layout() {
        return nb_and$LAYOUT;
    }

    private static final long nb_and$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_and
     * }
     */
    public static final long nb_and$offset() {
        return nb_and$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_and
     * }
     */
    public static MemorySegment nb_and(MemorySegment struct) {
        return struct.get(nb_and$LAYOUT, nb_and$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_and
     * }
     */
    public static void nb_and(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_and$LAYOUT, nb_and$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_xor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_xor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_xor
     * }
     */
    public static final AddressLayout nb_xor$layout() {
        return nb_xor$LAYOUT;
    }

    private static final long nb_xor$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_xor
     * }
     */
    public static final long nb_xor$offset() {
        return nb_xor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_xor
     * }
     */
    public static MemorySegment nb_xor(MemorySegment struct) {
        return struct.get(nb_xor$LAYOUT, nb_xor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_xor
     * }
     */
    public static void nb_xor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_xor$LAYOUT, nb_xor$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_or$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_or"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_or
     * }
     */
    public static final AddressLayout nb_or$layout() {
        return nb_or$LAYOUT;
    }

    private static final long nb_or$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_or
     * }
     */
    public static final long nb_or$offset() {
        return nb_or$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_or
     * }
     */
    public static MemorySegment nb_or(MemorySegment struct) {
        return struct.get(nb_or$LAYOUT, nb_or$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_or
     * }
     */
    public static void nb_or(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_or$LAYOUT, nb_or$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_int$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_int"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc nb_int
     * }
     */
    public static final AddressLayout nb_int$layout() {
        return nb_int$LAYOUT;
    }

    private static final long nb_int$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc nb_int
     * }
     */
    public static final long nb_int$offset() {
        return nb_int$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc nb_int
     * }
     */
    public static MemorySegment nb_int(MemorySegment struct) {
        return struct.get(nb_int$LAYOUT, nb_int$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc nb_int
     * }
     */
    public static void nb_int(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_int$LAYOUT, nb_int$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_reserved$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *nb_reserved
     * }
     */
    public static final AddressLayout nb_reserved$layout() {
        return nb_reserved$LAYOUT;
    }

    private static final long nb_reserved$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *nb_reserved
     * }
     */
    public static final long nb_reserved$offset() {
        return nb_reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *nb_reserved
     * }
     */
    public static MemorySegment nb_reserved(MemorySegment struct) {
        return struct.get(nb_reserved$LAYOUT, nb_reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *nb_reserved
     * }
     */
    public static void nb_reserved(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_reserved$LAYOUT, nb_reserved$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_float$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_float"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc nb_float
     * }
     */
    public static final AddressLayout nb_float$layout() {
        return nb_float$LAYOUT;
    }

    private static final long nb_float$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc nb_float
     * }
     */
    public static final long nb_float$offset() {
        return nb_float$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc nb_float
     * }
     */
    public static MemorySegment nb_float(MemorySegment struct) {
        return struct.get(nb_float$LAYOUT, nb_float$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc nb_float
     * }
     */
    public static void nb_float(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_float$LAYOUT, nb_float$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_add$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_add"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_add
     * }
     */
    public static final AddressLayout nb_inplace_add$layout() {
        return nb_inplace_add$LAYOUT;
    }

    private static final long nb_inplace_add$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_add
     * }
     */
    public static final long nb_inplace_add$offset() {
        return nb_inplace_add$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_add
     * }
     */
    public static MemorySegment nb_inplace_add(MemorySegment struct) {
        return struct.get(nb_inplace_add$LAYOUT, nb_inplace_add$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_add
     * }
     */
    public static void nb_inplace_add(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_add$LAYOUT, nb_inplace_add$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_subtract$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_subtract"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_subtract
     * }
     */
    public static final AddressLayout nb_inplace_subtract$layout() {
        return nb_inplace_subtract$LAYOUT;
    }

    private static final long nb_inplace_subtract$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_subtract
     * }
     */
    public static final long nb_inplace_subtract$offset() {
        return nb_inplace_subtract$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_subtract
     * }
     */
    public static MemorySegment nb_inplace_subtract(MemorySegment struct) {
        return struct.get(nb_inplace_subtract$LAYOUT, nb_inplace_subtract$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_subtract
     * }
     */
    public static void nb_inplace_subtract(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_subtract$LAYOUT, nb_inplace_subtract$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_multiply$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_multiply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_multiply
     * }
     */
    public static final AddressLayout nb_inplace_multiply$layout() {
        return nb_inplace_multiply$LAYOUT;
    }

    private static final long nb_inplace_multiply$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_multiply
     * }
     */
    public static final long nb_inplace_multiply$offset() {
        return nb_inplace_multiply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_multiply
     * }
     */
    public static MemorySegment nb_inplace_multiply(MemorySegment struct) {
        return struct.get(nb_inplace_multiply$LAYOUT, nb_inplace_multiply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_multiply
     * }
     */
    public static void nb_inplace_multiply(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_multiply$LAYOUT, nb_inplace_multiply$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_remainder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_remainder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_remainder
     * }
     */
    public static final AddressLayout nb_inplace_remainder$layout() {
        return nb_inplace_remainder$LAYOUT;
    }

    private static final long nb_inplace_remainder$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_remainder
     * }
     */
    public static final long nb_inplace_remainder$offset() {
        return nb_inplace_remainder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_remainder
     * }
     */
    public static MemorySegment nb_inplace_remainder(MemorySegment struct) {
        return struct.get(nb_inplace_remainder$LAYOUT, nb_inplace_remainder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_remainder
     * }
     */
    public static void nb_inplace_remainder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_remainder$LAYOUT, nb_inplace_remainder$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_power$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_power"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ternaryfunc nb_inplace_power
     * }
     */
    public static final AddressLayout nb_inplace_power$layout() {
        return nb_inplace_power$LAYOUT;
    }

    private static final long nb_inplace_power$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ternaryfunc nb_inplace_power
     * }
     */
    public static final long nb_inplace_power$offset() {
        return nb_inplace_power$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ternaryfunc nb_inplace_power
     * }
     */
    public static MemorySegment nb_inplace_power(MemorySegment struct) {
        return struct.get(nb_inplace_power$LAYOUT, nb_inplace_power$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ternaryfunc nb_inplace_power
     * }
     */
    public static void nb_inplace_power(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_power$LAYOUT, nb_inplace_power$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_lshift$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_lshift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_lshift
     * }
     */
    public static final AddressLayout nb_inplace_lshift$layout() {
        return nb_inplace_lshift$LAYOUT;
    }

    private static final long nb_inplace_lshift$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_lshift
     * }
     */
    public static final long nb_inplace_lshift$offset() {
        return nb_inplace_lshift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_lshift
     * }
     */
    public static MemorySegment nb_inplace_lshift(MemorySegment struct) {
        return struct.get(nb_inplace_lshift$LAYOUT, nb_inplace_lshift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_lshift
     * }
     */
    public static void nb_inplace_lshift(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_lshift$LAYOUT, nb_inplace_lshift$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_rshift$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_rshift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_rshift
     * }
     */
    public static final AddressLayout nb_inplace_rshift$layout() {
        return nb_inplace_rshift$LAYOUT;
    }

    private static final long nb_inplace_rshift$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_rshift
     * }
     */
    public static final long nb_inplace_rshift$offset() {
        return nb_inplace_rshift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_rshift
     * }
     */
    public static MemorySegment nb_inplace_rshift(MemorySegment struct) {
        return struct.get(nb_inplace_rshift$LAYOUT, nb_inplace_rshift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_rshift
     * }
     */
    public static void nb_inplace_rshift(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_rshift$LAYOUT, nb_inplace_rshift$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_and$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_and"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_and
     * }
     */
    public static final AddressLayout nb_inplace_and$layout() {
        return nb_inplace_and$LAYOUT;
    }

    private static final long nb_inplace_and$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_and
     * }
     */
    public static final long nb_inplace_and$offset() {
        return nb_inplace_and$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_and
     * }
     */
    public static MemorySegment nb_inplace_and(MemorySegment struct) {
        return struct.get(nb_inplace_and$LAYOUT, nb_inplace_and$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_and
     * }
     */
    public static void nb_inplace_and(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_and$LAYOUT, nb_inplace_and$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_xor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_xor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_xor
     * }
     */
    public static final AddressLayout nb_inplace_xor$layout() {
        return nb_inplace_xor$LAYOUT;
    }

    private static final long nb_inplace_xor$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_xor
     * }
     */
    public static final long nb_inplace_xor$offset() {
        return nb_inplace_xor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_xor
     * }
     */
    public static MemorySegment nb_inplace_xor(MemorySegment struct) {
        return struct.get(nb_inplace_xor$LAYOUT, nb_inplace_xor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_xor
     * }
     */
    public static void nb_inplace_xor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_xor$LAYOUT, nb_inplace_xor$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_or$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_or"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_or
     * }
     */
    public static final AddressLayout nb_inplace_or$layout() {
        return nb_inplace_or$LAYOUT;
    }

    private static final long nb_inplace_or$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_or
     * }
     */
    public static final long nb_inplace_or$offset() {
        return nb_inplace_or$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_or
     * }
     */
    public static MemorySegment nb_inplace_or(MemorySegment struct) {
        return struct.get(nb_inplace_or$LAYOUT, nb_inplace_or$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_or
     * }
     */
    public static void nb_inplace_or(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_or$LAYOUT, nb_inplace_or$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_floor_divide$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_floor_divide"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_floor_divide
     * }
     */
    public static final AddressLayout nb_floor_divide$layout() {
        return nb_floor_divide$LAYOUT;
    }

    private static final long nb_floor_divide$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_floor_divide
     * }
     */
    public static final long nb_floor_divide$offset() {
        return nb_floor_divide$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_floor_divide
     * }
     */
    public static MemorySegment nb_floor_divide(MemorySegment struct) {
        return struct.get(nb_floor_divide$LAYOUT, nb_floor_divide$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_floor_divide
     * }
     */
    public static void nb_floor_divide(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_floor_divide$LAYOUT, nb_floor_divide$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_true_divide$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_true_divide"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_true_divide
     * }
     */
    public static final AddressLayout nb_true_divide$layout() {
        return nb_true_divide$LAYOUT;
    }

    private static final long nb_true_divide$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_true_divide
     * }
     */
    public static final long nb_true_divide$offset() {
        return nb_true_divide$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_true_divide
     * }
     */
    public static MemorySegment nb_true_divide(MemorySegment struct) {
        return struct.get(nb_true_divide$LAYOUT, nb_true_divide$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_true_divide
     * }
     */
    public static void nb_true_divide(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_true_divide$LAYOUT, nb_true_divide$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_floor_divide$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_floor_divide"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_floor_divide
     * }
     */
    public static final AddressLayout nb_inplace_floor_divide$layout() {
        return nb_inplace_floor_divide$LAYOUT;
    }

    private static final long nb_inplace_floor_divide$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_floor_divide
     * }
     */
    public static final long nb_inplace_floor_divide$offset() {
        return nb_inplace_floor_divide$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_floor_divide
     * }
     */
    public static MemorySegment nb_inplace_floor_divide(MemorySegment struct) {
        return struct.get(nb_inplace_floor_divide$LAYOUT, nb_inplace_floor_divide$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_floor_divide
     * }
     */
    public static void nb_inplace_floor_divide(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_floor_divide$LAYOUT, nb_inplace_floor_divide$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_true_divide$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_true_divide"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_true_divide
     * }
     */
    public static final AddressLayout nb_inplace_true_divide$layout() {
        return nb_inplace_true_divide$LAYOUT;
    }

    private static final long nb_inplace_true_divide$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_true_divide
     * }
     */
    public static final long nb_inplace_true_divide$offset() {
        return nb_inplace_true_divide$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_true_divide
     * }
     */
    public static MemorySegment nb_inplace_true_divide(MemorySegment struct) {
        return struct.get(nb_inplace_true_divide$LAYOUT, nb_inplace_true_divide$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_true_divide
     * }
     */
    public static void nb_inplace_true_divide(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_true_divide$LAYOUT, nb_inplace_true_divide$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_index$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unaryfunc nb_index
     * }
     */
    public static final AddressLayout nb_index$layout() {
        return nb_index$LAYOUT;
    }

    private static final long nb_index$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unaryfunc nb_index
     * }
     */
    public static final long nb_index$offset() {
        return nb_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unaryfunc nb_index
     * }
     */
    public static MemorySegment nb_index(MemorySegment struct) {
        return struct.get(nb_index$LAYOUT, nb_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unaryfunc nb_index
     * }
     */
    public static void nb_index(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_index$LAYOUT, nb_index$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_matrix_multiply$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_matrix_multiply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_matrix_multiply
     * }
     */
    public static final AddressLayout nb_matrix_multiply$layout() {
        return nb_matrix_multiply$LAYOUT;
    }

    private static final long nb_matrix_multiply$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_matrix_multiply
     * }
     */
    public static final long nb_matrix_multiply$offset() {
        return nb_matrix_multiply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_matrix_multiply
     * }
     */
    public static MemorySegment nb_matrix_multiply(MemorySegment struct) {
        return struct.get(nb_matrix_multiply$LAYOUT, nb_matrix_multiply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_matrix_multiply
     * }
     */
    public static void nb_matrix_multiply(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_matrix_multiply$LAYOUT, nb_matrix_multiply$OFFSET, fieldValue);
    }

    private static final AddressLayout nb_inplace_matrix_multiply$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nb_inplace_matrix_multiply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_matrix_multiply
     * }
     */
    public static final AddressLayout nb_inplace_matrix_multiply$layout() {
        return nb_inplace_matrix_multiply$LAYOUT;
    }

    private static final long nb_inplace_matrix_multiply$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_matrix_multiply
     * }
     */
    public static final long nb_inplace_matrix_multiply$offset() {
        return nb_inplace_matrix_multiply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_matrix_multiply
     * }
     */
    public static MemorySegment nb_inplace_matrix_multiply(MemorySegment struct) {
        return struct.get(nb_inplace_matrix_multiply$LAYOUT, nb_inplace_matrix_multiply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * binaryfunc nb_inplace_matrix_multiply
     * }
     */
    public static void nb_inplace_matrix_multiply(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nb_inplace_matrix_multiply$LAYOUT, nb_inplace_matrix_multiply$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

