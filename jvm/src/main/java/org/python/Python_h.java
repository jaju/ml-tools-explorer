// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class Python_h extends Python_h_1 {

    Python_h() {
        // Should not be called directly
    }

    private static class PyIndex_Check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyIndex_Check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyIndex_Check(PyObject *)
     * }
     */
    public static FunctionDescriptor PyIndex_Check$descriptor() {
        return PyIndex_Check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyIndex_Check(PyObject *)
     * }
     */
    public static MethodHandle PyIndex_Check$handle() {
        return PyIndex_Check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyIndex_Check(PyObject *)
     * }
     */
    public static MemorySegment PyIndex_Check$address() {
        return PyIndex_Check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyIndex_Check(PyObject *)
     * }
     */
    public static int PyIndex_Check(MemorySegment x0) {
        var mh$ = PyIndex_Check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyIndex_Check", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_Index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_Index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_Index(PyObject *o)
     * }
     */
    public static FunctionDescriptor PyNumber_Index$descriptor() {
        return PyNumber_Index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_Index(PyObject *o)
     * }
     */
    public static MethodHandle PyNumber_Index$handle() {
        return PyNumber_Index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_Index(PyObject *o)
     * }
     */
    public static MemorySegment PyNumber_Index$address() {
        return PyNumber_Index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_Index(PyObject *o)
     * }
     */
    public static MemorySegment PyNumber_Index(MemorySegment o) {
        var mh$ = PyNumber_Index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_Index", o);
            }
            return (MemorySegment)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_AsSsize_t {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_LONG,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_AsSsize_t");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Py_ssize_t PyNumber_AsSsize_t(PyObject *o, PyObject *exc)
     * }
     */
    public static FunctionDescriptor PyNumber_AsSsize_t$descriptor() {
        return PyNumber_AsSsize_t.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Py_ssize_t PyNumber_AsSsize_t(PyObject *o, PyObject *exc)
     * }
     */
    public static MethodHandle PyNumber_AsSsize_t$handle() {
        return PyNumber_AsSsize_t.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Py_ssize_t PyNumber_AsSsize_t(PyObject *o, PyObject *exc)
     * }
     */
    public static MemorySegment PyNumber_AsSsize_t$address() {
        return PyNumber_AsSsize_t.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Py_ssize_t PyNumber_AsSsize_t(PyObject *o, PyObject *exc)
     * }
     */
    public static long PyNumber_AsSsize_t(MemorySegment o, MemorySegment exc) {
        var mh$ = PyNumber_AsSsize_t.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_AsSsize_t", o, exc);
            }
            return (long)mh$.invokeExact(o, exc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_Long {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_Long");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_Long(PyObject *o)
     * }
     */
    public static FunctionDescriptor PyNumber_Long$descriptor() {
        return PyNumber_Long.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_Long(PyObject *o)
     * }
     */
    public static MethodHandle PyNumber_Long$handle() {
        return PyNumber_Long.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_Long(PyObject *o)
     * }
     */
    public static MemorySegment PyNumber_Long$address() {
        return PyNumber_Long.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_Long(PyObject *o)
     * }
     */
    public static MemorySegment PyNumber_Long(MemorySegment o) {
        var mh$ = PyNumber_Long.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_Long", o);
            }
            return (MemorySegment)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_Float(PyObject *o)
     * }
     */
    public static FunctionDescriptor PyNumber_Float$descriptor() {
        return PyNumber_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_Float(PyObject *o)
     * }
     */
    public static MethodHandle PyNumber_Float$handle() {
        return PyNumber_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_Float(PyObject *o)
     * }
     */
    public static MemorySegment PyNumber_Float$address() {
        return PyNumber_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_Float(PyObject *o)
     * }
     */
    public static MemorySegment PyNumber_Float(MemorySegment o) {
        var mh$ = PyNumber_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_Float", o);
            }
            return (MemorySegment)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceAdd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceAdd(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceAdd$descriptor() {
        return PyNumber_InPlaceAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceAdd(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceAdd$handle() {
        return PyNumber_InPlaceAdd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceAdd(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceAdd$address() {
        return PyNumber_InPlaceAdd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceAdd(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceAdd(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceAdd", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceSubtract {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceSubtract");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceSubtract(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceSubtract$descriptor() {
        return PyNumber_InPlaceSubtract.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceSubtract(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceSubtract$handle() {
        return PyNumber_InPlaceSubtract.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceSubtract(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceSubtract$address() {
        return PyNumber_InPlaceSubtract.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceSubtract(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceSubtract(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceSubtract.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceSubtract", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceMultiply {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceMultiply");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceMultiply(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceMultiply$descriptor() {
        return PyNumber_InPlaceMultiply.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceMultiply(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceMultiply$handle() {
        return PyNumber_InPlaceMultiply.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceMultiply(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceMultiply$address() {
        return PyNumber_InPlaceMultiply.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceMultiply(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceMultiply(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceMultiply.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceMultiply", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceMatrixMultiply {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceMatrixMultiply");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceMatrixMultiply(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceMatrixMultiply$descriptor() {
        return PyNumber_InPlaceMatrixMultiply.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceMatrixMultiply(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceMatrixMultiply$handle() {
        return PyNumber_InPlaceMatrixMultiply.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceMatrixMultiply(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceMatrixMultiply$address() {
        return PyNumber_InPlaceMatrixMultiply.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceMatrixMultiply(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceMatrixMultiply(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceMatrixMultiply.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceMatrixMultiply", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceFloorDivide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceFloorDivide");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceFloorDivide(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceFloorDivide$descriptor() {
        return PyNumber_InPlaceFloorDivide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceFloorDivide(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceFloorDivide$handle() {
        return PyNumber_InPlaceFloorDivide.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceFloorDivide(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceFloorDivide$address() {
        return PyNumber_InPlaceFloorDivide.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceFloorDivide(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceFloorDivide(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceFloorDivide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceFloorDivide", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceTrueDivide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceTrueDivide");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceTrueDivide(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceTrueDivide$descriptor() {
        return PyNumber_InPlaceTrueDivide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceTrueDivide(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceTrueDivide$handle() {
        return PyNumber_InPlaceTrueDivide.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceTrueDivide(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceTrueDivide$address() {
        return PyNumber_InPlaceTrueDivide.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceTrueDivide(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceTrueDivide(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceTrueDivide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceTrueDivide", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceRemainder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceRemainder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceRemainder(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceRemainder$descriptor() {
        return PyNumber_InPlaceRemainder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceRemainder(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceRemainder$handle() {
        return PyNumber_InPlaceRemainder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceRemainder(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceRemainder$address() {
        return PyNumber_InPlaceRemainder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceRemainder(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceRemainder(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceRemainder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceRemainder", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlacePower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlacePower");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlacePower(PyObject *o1, PyObject *o2, PyObject *o3)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlacePower$descriptor() {
        return PyNumber_InPlacePower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlacePower(PyObject *o1, PyObject *o2, PyObject *o3)
     * }
     */
    public static MethodHandle PyNumber_InPlacePower$handle() {
        return PyNumber_InPlacePower.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlacePower(PyObject *o1, PyObject *o2, PyObject *o3)
     * }
     */
    public static MemorySegment PyNumber_InPlacePower$address() {
        return PyNumber_InPlacePower.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlacePower(PyObject *o1, PyObject *o2, PyObject *o3)
     * }
     */
    public static MemorySegment PyNumber_InPlacePower(MemorySegment o1, MemorySegment o2, MemorySegment o3) {
        var mh$ = PyNumber_InPlacePower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlacePower", o1, o2, o3);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2, o3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceLshift {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceLshift");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceLshift(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceLshift$descriptor() {
        return PyNumber_InPlaceLshift.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceLshift(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceLshift$handle() {
        return PyNumber_InPlaceLshift.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceLshift(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceLshift$address() {
        return PyNumber_InPlaceLshift.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceLshift(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceLshift(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceLshift.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceLshift", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceRshift {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceRshift");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceRshift(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceRshift$descriptor() {
        return PyNumber_InPlaceRshift.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceRshift(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceRshift$handle() {
        return PyNumber_InPlaceRshift.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceRshift(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceRshift$address() {
        return PyNumber_InPlaceRshift.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceRshift(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceRshift(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceRshift.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceRshift", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceAnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceAnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceAnd(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceAnd$descriptor() {
        return PyNumber_InPlaceAnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceAnd(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceAnd$handle() {
        return PyNumber_InPlaceAnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceAnd(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceAnd$address() {
        return PyNumber_InPlaceAnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceAnd(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceAnd(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceAnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceAnd", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceXor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceXor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceXor(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceXor$descriptor() {
        return PyNumber_InPlaceXor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceXor(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceXor$handle() {
        return PyNumber_InPlaceXor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceXor(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceXor$address() {
        return PyNumber_InPlaceXor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceXor(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceXor(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceXor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceXor", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_InPlaceOr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_InPlaceOr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceOr(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PyNumber_InPlaceOr$descriptor() {
        return PyNumber_InPlaceOr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceOr(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PyNumber_InPlaceOr$handle() {
        return PyNumber_InPlaceOr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceOr(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceOr$address() {
        return PyNumber_InPlaceOr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_InPlaceOr(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PyNumber_InPlaceOr(MemorySegment o1, MemorySegment o2) {
        var mh$ = PyNumber_InPlaceOr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_InPlaceOr", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyNumber_ToBase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_INT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyNumber_ToBase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyNumber_ToBase(PyObject *n, int base)
     * }
     */
    public static FunctionDescriptor PyNumber_ToBase$descriptor() {
        return PyNumber_ToBase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyNumber_ToBase(PyObject *n, int base)
     * }
     */
    public static MethodHandle PyNumber_ToBase$handle() {
        return PyNumber_ToBase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyNumber_ToBase(PyObject *n, int base)
     * }
     */
    public static MemorySegment PyNumber_ToBase$address() {
        return PyNumber_ToBase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyNumber_ToBase(PyObject *n, int base)
     * }
     */
    public static MemorySegment PyNumber_ToBase(MemorySegment n, int base) {
        var mh$ = PyNumber_ToBase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyNumber_ToBase", n, base);
            }
            return (MemorySegment)mh$.invokeExact(n, base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PySequence_Check(PyObject *o)
     * }
     */
    public static FunctionDescriptor PySequence_Check$descriptor() {
        return PySequence_Check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PySequence_Check(PyObject *o)
     * }
     */
    public static MethodHandle PySequence_Check$handle() {
        return PySequence_Check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PySequence_Check(PyObject *o)
     * }
     */
    public static MemorySegment PySequence_Check$address() {
        return PySequence_Check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PySequence_Check(PyObject *o)
     * }
     */
    public static int PySequence_Check(MemorySegment o) {
        var mh$ = PySequence_Check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Check", o);
            }
            return (int)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_LONG,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Size(PyObject *o)
     * }
     */
    public static FunctionDescriptor PySequence_Size$descriptor() {
        return PySequence_Size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Size(PyObject *o)
     * }
     */
    public static MethodHandle PySequence_Size$handle() {
        return PySequence_Size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Size(PyObject *o)
     * }
     */
    public static MemorySegment PySequence_Size$address() {
        return PySequence_Size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Size(PyObject *o)
     * }
     */
    public static long PySequence_Size(MemorySegment o) {
        var mh$ = PySequence_Size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Size", o);
            }
            return (long)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_LONG,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Length(PyObject *o)
     * }
     */
    public static FunctionDescriptor PySequence_Length$descriptor() {
        return PySequence_Length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Length(PyObject *o)
     * }
     */
    public static MethodHandle PySequence_Length$handle() {
        return PySequence_Length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Length(PyObject *o)
     * }
     */
    public static MemorySegment PySequence_Length$address() {
        return PySequence_Length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Length(PyObject *o)
     * }
     */
    public static long PySequence_Length(MemorySegment o) {
        var mh$ = PySequence_Length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Length", o);
            }
            return (long)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Concat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Concat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PySequence_Concat(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PySequence_Concat$descriptor() {
        return PySequence_Concat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PySequence_Concat(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PySequence_Concat$handle() {
        return PySequence_Concat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PySequence_Concat(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PySequence_Concat$address() {
        return PySequence_Concat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PySequence_Concat(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PySequence_Concat(MemorySegment o1, MemorySegment o2) {
        var mh$ = PySequence_Concat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Concat", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Repeat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Repeat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PySequence_Repeat(PyObject *o, Py_ssize_t count)
     * }
     */
    public static FunctionDescriptor PySequence_Repeat$descriptor() {
        return PySequence_Repeat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PySequence_Repeat(PyObject *o, Py_ssize_t count)
     * }
     */
    public static MethodHandle PySequence_Repeat$handle() {
        return PySequence_Repeat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PySequence_Repeat(PyObject *o, Py_ssize_t count)
     * }
     */
    public static MemorySegment PySequence_Repeat$address() {
        return PySequence_Repeat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PySequence_Repeat(PyObject *o, Py_ssize_t count)
     * }
     */
    public static MemorySegment PySequence_Repeat(MemorySegment o, long count) {
        var mh$ = PySequence_Repeat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Repeat", o, count);
            }
            return (MemorySegment)mh$.invokeExact(o, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_GetItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_GetItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PySequence_GetItem(PyObject *o, Py_ssize_t i)
     * }
     */
    public static FunctionDescriptor PySequence_GetItem$descriptor() {
        return PySequence_GetItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PySequence_GetItem(PyObject *o, Py_ssize_t i)
     * }
     */
    public static MethodHandle PySequence_GetItem$handle() {
        return PySequence_GetItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PySequence_GetItem(PyObject *o, Py_ssize_t i)
     * }
     */
    public static MemorySegment PySequence_GetItem$address() {
        return PySequence_GetItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PySequence_GetItem(PyObject *o, Py_ssize_t i)
     * }
     */
    public static MemorySegment PySequence_GetItem(MemorySegment o, long i) {
        var mh$ = PySequence_GetItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_GetItem", o, i);
            }
            return (MemorySegment)mh$.invokeExact(o, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_GetSlice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_LONG,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_GetSlice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PySequence_GetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)
     * }
     */
    public static FunctionDescriptor PySequence_GetSlice$descriptor() {
        return PySequence_GetSlice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PySequence_GetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)
     * }
     */
    public static MethodHandle PySequence_GetSlice$handle() {
        return PySequence_GetSlice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PySequence_GetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)
     * }
     */
    public static MemorySegment PySequence_GetSlice$address() {
        return PySequence_GetSlice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PySequence_GetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)
     * }
     */
    public static MemorySegment PySequence_GetSlice(MemorySegment o, long i1, long i2) {
        var mh$ = PySequence_GetSlice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_GetSlice", o, i1, i2);
            }
            return (MemorySegment)mh$.invokeExact(o, i1, i2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_SetItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_LONG,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_SetItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PySequence_SetItem(PyObject *o, Py_ssize_t i, PyObject *v)
     * }
     */
    public static FunctionDescriptor PySequence_SetItem$descriptor() {
        return PySequence_SetItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PySequence_SetItem(PyObject *o, Py_ssize_t i, PyObject *v)
     * }
     */
    public static MethodHandle PySequence_SetItem$handle() {
        return PySequence_SetItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PySequence_SetItem(PyObject *o, Py_ssize_t i, PyObject *v)
     * }
     */
    public static MemorySegment PySequence_SetItem$address() {
        return PySequence_SetItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PySequence_SetItem(PyObject *o, Py_ssize_t i, PyObject *v)
     * }
     */
    public static int PySequence_SetItem(MemorySegment o, long i, MemorySegment v) {
        var mh$ = PySequence_SetItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_SetItem", o, i, v);
            }
            return (int)mh$.invokeExact(o, i, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_DelItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_DelItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PySequence_DelItem(PyObject *o, Py_ssize_t i)
     * }
     */
    public static FunctionDescriptor PySequence_DelItem$descriptor() {
        return PySequence_DelItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PySequence_DelItem(PyObject *o, Py_ssize_t i)
     * }
     */
    public static MethodHandle PySequence_DelItem$handle() {
        return PySequence_DelItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PySequence_DelItem(PyObject *o, Py_ssize_t i)
     * }
     */
    public static MemorySegment PySequence_DelItem$address() {
        return PySequence_DelItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PySequence_DelItem(PyObject *o, Py_ssize_t i)
     * }
     */
    public static int PySequence_DelItem(MemorySegment o, long i) {
        var mh$ = PySequence_DelItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_DelItem", o, i);
            }
            return (int)mh$.invokeExact(o, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_SetSlice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_LONG,
            Python_h.C_LONG,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_SetSlice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PySequence_SetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2, PyObject *v)
     * }
     */
    public static FunctionDescriptor PySequence_SetSlice$descriptor() {
        return PySequence_SetSlice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PySequence_SetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2, PyObject *v)
     * }
     */
    public static MethodHandle PySequence_SetSlice$handle() {
        return PySequence_SetSlice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PySequence_SetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2, PyObject *v)
     * }
     */
    public static MemorySegment PySequence_SetSlice$address() {
        return PySequence_SetSlice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PySequence_SetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2, PyObject *v)
     * }
     */
    public static int PySequence_SetSlice(MemorySegment o, long i1, long i2, MemorySegment v) {
        var mh$ = PySequence_SetSlice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_SetSlice", o, i1, i2, v);
            }
            return (int)mh$.invokeExact(o, i1, i2, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_DelSlice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_LONG,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_DelSlice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PySequence_DelSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)
     * }
     */
    public static FunctionDescriptor PySequence_DelSlice$descriptor() {
        return PySequence_DelSlice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PySequence_DelSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)
     * }
     */
    public static MethodHandle PySequence_DelSlice$handle() {
        return PySequence_DelSlice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PySequence_DelSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)
     * }
     */
    public static MemorySegment PySequence_DelSlice$address() {
        return PySequence_DelSlice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PySequence_DelSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2)
     * }
     */
    public static int PySequence_DelSlice(MemorySegment o, long i1, long i2) {
        var mh$ = PySequence_DelSlice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_DelSlice", o, i1, i2);
            }
            return (int)mh$.invokeExact(o, i1, i2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Tuple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Tuple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PySequence_Tuple(PyObject *o)
     * }
     */
    public static FunctionDescriptor PySequence_Tuple$descriptor() {
        return PySequence_Tuple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PySequence_Tuple(PyObject *o)
     * }
     */
    public static MethodHandle PySequence_Tuple$handle() {
        return PySequence_Tuple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PySequence_Tuple(PyObject *o)
     * }
     */
    public static MemorySegment PySequence_Tuple$address() {
        return PySequence_Tuple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PySequence_Tuple(PyObject *o)
     * }
     */
    public static MemorySegment PySequence_Tuple(MemorySegment o) {
        var mh$ = PySequence_Tuple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Tuple", o);
            }
            return (MemorySegment)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_List {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_List");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PySequence_List(PyObject *o)
     * }
     */
    public static FunctionDescriptor PySequence_List$descriptor() {
        return PySequence_List.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PySequence_List(PyObject *o)
     * }
     */
    public static MethodHandle PySequence_List$handle() {
        return PySequence_List.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PySequence_List(PyObject *o)
     * }
     */
    public static MemorySegment PySequence_List$address() {
        return PySequence_List.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PySequence_List(PyObject *o)
     * }
     */
    public static MemorySegment PySequence_List(MemorySegment o) {
        var mh$ = PySequence_List.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_List", o);
            }
            return (MemorySegment)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Fast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Fast");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PySequence_Fast(PyObject *o, const char *m)
     * }
     */
    public static FunctionDescriptor PySequence_Fast$descriptor() {
        return PySequence_Fast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PySequence_Fast(PyObject *o, const char *m)
     * }
     */
    public static MethodHandle PySequence_Fast$handle() {
        return PySequence_Fast.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PySequence_Fast(PyObject *o, const char *m)
     * }
     */
    public static MemorySegment PySequence_Fast$address() {
        return PySequence_Fast.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PySequence_Fast(PyObject *o, const char *m)
     * }
     */
    public static MemorySegment PySequence_Fast(MemorySegment o, MemorySegment m) {
        var mh$ = PySequence_Fast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Fast", o, m);
            }
            return (MemorySegment)mh$.invokeExact(o, m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_LONG,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Count(PyObject *o, PyObject *value)
     * }
     */
    public static FunctionDescriptor PySequence_Count$descriptor() {
        return PySequence_Count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Count(PyObject *o, PyObject *value)
     * }
     */
    public static MethodHandle PySequence_Count$handle() {
        return PySequence_Count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Count(PyObject *o, PyObject *value)
     * }
     */
    public static MemorySegment PySequence_Count$address() {
        return PySequence_Count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Count(PyObject *o, PyObject *value)
     * }
     */
    public static long PySequence_Count(MemorySegment o, MemorySegment value) {
        var mh$ = PySequence_Count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Count", o, value);
            }
            return (long)mh$.invokeExact(o, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Contains {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Contains");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PySequence_Contains(PyObject *seq, PyObject *ob)
     * }
     */
    public static FunctionDescriptor PySequence_Contains$descriptor() {
        return PySequence_Contains.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PySequence_Contains(PyObject *seq, PyObject *ob)
     * }
     */
    public static MethodHandle PySequence_Contains$handle() {
        return PySequence_Contains.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PySequence_Contains(PyObject *seq, PyObject *ob)
     * }
     */
    public static MemorySegment PySequence_Contains$address() {
        return PySequence_Contains.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PySequence_Contains(PyObject *seq, PyObject *ob)
     * }
     */
    public static int PySequence_Contains(MemorySegment seq, MemorySegment ob) {
        var mh$ = PySequence_Contains.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Contains", seq, ob);
            }
            return (int)mh$.invokeExact(seq, ob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_In {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_In");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PySequence_In(PyObject *o, PyObject *value)
     * }
     */
    public static FunctionDescriptor PySequence_In$descriptor() {
        return PySequence_In.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PySequence_In(PyObject *o, PyObject *value)
     * }
     */
    public static MethodHandle PySequence_In$handle() {
        return PySequence_In.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PySequence_In(PyObject *o, PyObject *value)
     * }
     */
    public static MemorySegment PySequence_In$address() {
        return PySequence_In.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PySequence_In(PyObject *o, PyObject *value)
     * }
     */
    public static int PySequence_In(MemorySegment o, MemorySegment value) {
        var mh$ = PySequence_In.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_In", o, value);
            }
            return (int)mh$.invokeExact(o, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_Index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_LONG,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_Index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Index(PyObject *o, PyObject *value)
     * }
     */
    public static FunctionDescriptor PySequence_Index$descriptor() {
        return PySequence_Index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Index(PyObject *o, PyObject *value)
     * }
     */
    public static MethodHandle PySequence_Index$handle() {
        return PySequence_Index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Index(PyObject *o, PyObject *value)
     * }
     */
    public static MemorySegment PySequence_Index$address() {
        return PySequence_Index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Py_ssize_t PySequence_Index(PyObject *o, PyObject *value)
     * }
     */
    public static long PySequence_Index(MemorySegment o, MemorySegment value) {
        var mh$ = PySequence_Index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_Index", o, value);
            }
            return (long)mh$.invokeExact(o, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_InPlaceConcat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_InPlaceConcat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PySequence_InPlaceConcat(PyObject *o1, PyObject *o2)
     * }
     */
    public static FunctionDescriptor PySequence_InPlaceConcat$descriptor() {
        return PySequence_InPlaceConcat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PySequence_InPlaceConcat(PyObject *o1, PyObject *o2)
     * }
     */
    public static MethodHandle PySequence_InPlaceConcat$handle() {
        return PySequence_InPlaceConcat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PySequence_InPlaceConcat(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PySequence_InPlaceConcat$address() {
        return PySequence_InPlaceConcat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PySequence_InPlaceConcat(PyObject *o1, PyObject *o2)
     * }
     */
    public static MemorySegment PySequence_InPlaceConcat(MemorySegment o1, MemorySegment o2) {
        var mh$ = PySequence_InPlaceConcat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_InPlaceConcat", o1, o2);
            }
            return (MemorySegment)mh$.invokeExact(o1, o2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PySequence_InPlaceRepeat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PySequence_InPlaceRepeat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PySequence_InPlaceRepeat(PyObject *o, Py_ssize_t count)
     * }
     */
    public static FunctionDescriptor PySequence_InPlaceRepeat$descriptor() {
        return PySequence_InPlaceRepeat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PySequence_InPlaceRepeat(PyObject *o, Py_ssize_t count)
     * }
     */
    public static MethodHandle PySequence_InPlaceRepeat$handle() {
        return PySequence_InPlaceRepeat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PySequence_InPlaceRepeat(PyObject *o, Py_ssize_t count)
     * }
     */
    public static MemorySegment PySequence_InPlaceRepeat$address() {
        return PySequence_InPlaceRepeat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PySequence_InPlaceRepeat(PyObject *o, Py_ssize_t count)
     * }
     */
    public static MemorySegment PySequence_InPlaceRepeat(MemorySegment o, long count) {
        var mh$ = PySequence_InPlaceRepeat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PySequence_InPlaceRepeat", o, count);
            }
            return (MemorySegment)mh$.invokeExact(o, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_Check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_Check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyMapping_Check(PyObject *o)
     * }
     */
    public static FunctionDescriptor PyMapping_Check$descriptor() {
        return PyMapping_Check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyMapping_Check(PyObject *o)
     * }
     */
    public static MethodHandle PyMapping_Check$handle() {
        return PyMapping_Check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyMapping_Check(PyObject *o)
     * }
     */
    public static MemorySegment PyMapping_Check$address() {
        return PyMapping_Check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyMapping_Check(PyObject *o)
     * }
     */
    public static int PyMapping_Check(MemorySegment o) {
        var mh$ = PyMapping_Check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_Check", o);
            }
            return (int)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_Size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_LONG,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_Size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Py_ssize_t PyMapping_Size(PyObject *o)
     * }
     */
    public static FunctionDescriptor PyMapping_Size$descriptor() {
        return PyMapping_Size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Py_ssize_t PyMapping_Size(PyObject *o)
     * }
     */
    public static MethodHandle PyMapping_Size$handle() {
        return PyMapping_Size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Py_ssize_t PyMapping_Size(PyObject *o)
     * }
     */
    public static MemorySegment PyMapping_Size$address() {
        return PyMapping_Size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Py_ssize_t PyMapping_Size(PyObject *o)
     * }
     */
    public static long PyMapping_Size(MemorySegment o) {
        var mh$ = PyMapping_Size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_Size", o);
            }
            return (long)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_Length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_LONG,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_Length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Py_ssize_t PyMapping_Length(PyObject *o)
     * }
     */
    public static FunctionDescriptor PyMapping_Length$descriptor() {
        return PyMapping_Length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Py_ssize_t PyMapping_Length(PyObject *o)
     * }
     */
    public static MethodHandle PyMapping_Length$handle() {
        return PyMapping_Length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Py_ssize_t PyMapping_Length(PyObject *o)
     * }
     */
    public static MemorySegment PyMapping_Length$address() {
        return PyMapping_Length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Py_ssize_t PyMapping_Length(PyObject *o)
     * }
     */
    public static long PyMapping_Length(MemorySegment o) {
        var mh$ = PyMapping_Length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_Length", o);
            }
            return (long)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_HasKeyString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_HasKeyString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyMapping_HasKeyString(PyObject *o, const char *key)
     * }
     */
    public static FunctionDescriptor PyMapping_HasKeyString$descriptor() {
        return PyMapping_HasKeyString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyMapping_HasKeyString(PyObject *o, const char *key)
     * }
     */
    public static MethodHandle PyMapping_HasKeyString$handle() {
        return PyMapping_HasKeyString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyMapping_HasKeyString(PyObject *o, const char *key)
     * }
     */
    public static MemorySegment PyMapping_HasKeyString$address() {
        return PyMapping_HasKeyString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyMapping_HasKeyString(PyObject *o, const char *key)
     * }
     */
    public static int PyMapping_HasKeyString(MemorySegment o, MemorySegment key) {
        var mh$ = PyMapping_HasKeyString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_HasKeyString", o, key);
            }
            return (int)mh$.invokeExact(o, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_HasKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_HasKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyMapping_HasKey(PyObject *o, PyObject *key)
     * }
     */
    public static FunctionDescriptor PyMapping_HasKey$descriptor() {
        return PyMapping_HasKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyMapping_HasKey(PyObject *o, PyObject *key)
     * }
     */
    public static MethodHandle PyMapping_HasKey$handle() {
        return PyMapping_HasKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyMapping_HasKey(PyObject *o, PyObject *key)
     * }
     */
    public static MemorySegment PyMapping_HasKey$address() {
        return PyMapping_HasKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyMapping_HasKey(PyObject *o, PyObject *key)
     * }
     */
    public static int PyMapping_HasKey(MemorySegment o, MemorySegment key) {
        var mh$ = PyMapping_HasKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_HasKey", o, key);
            }
            return (int)mh$.invokeExact(o, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_HasKeyWithError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_HasKeyWithError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyMapping_HasKeyWithError(PyObject *o, PyObject *key)
     * }
     */
    public static FunctionDescriptor PyMapping_HasKeyWithError$descriptor() {
        return PyMapping_HasKeyWithError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyMapping_HasKeyWithError(PyObject *o, PyObject *key)
     * }
     */
    public static MethodHandle PyMapping_HasKeyWithError$handle() {
        return PyMapping_HasKeyWithError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyMapping_HasKeyWithError(PyObject *o, PyObject *key)
     * }
     */
    public static MemorySegment PyMapping_HasKeyWithError$address() {
        return PyMapping_HasKeyWithError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyMapping_HasKeyWithError(PyObject *o, PyObject *key)
     * }
     */
    public static int PyMapping_HasKeyWithError(MemorySegment o, MemorySegment key) {
        var mh$ = PyMapping_HasKeyWithError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_HasKeyWithError", o, key);
            }
            return (int)mh$.invokeExact(o, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_HasKeyStringWithError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_HasKeyStringWithError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyMapping_HasKeyStringWithError(PyObject *o, const char *key)
     * }
     */
    public static FunctionDescriptor PyMapping_HasKeyStringWithError$descriptor() {
        return PyMapping_HasKeyStringWithError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyMapping_HasKeyStringWithError(PyObject *o, const char *key)
     * }
     */
    public static MethodHandle PyMapping_HasKeyStringWithError$handle() {
        return PyMapping_HasKeyStringWithError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyMapping_HasKeyStringWithError(PyObject *o, const char *key)
     * }
     */
    public static MemorySegment PyMapping_HasKeyStringWithError$address() {
        return PyMapping_HasKeyStringWithError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyMapping_HasKeyStringWithError(PyObject *o, const char *key)
     * }
     */
    public static int PyMapping_HasKeyStringWithError(MemorySegment o, MemorySegment key) {
        var mh$ = PyMapping_HasKeyStringWithError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_HasKeyStringWithError", o, key);
            }
            return (int)mh$.invokeExact(o, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_Keys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_Keys");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyMapping_Keys(PyObject *o)
     * }
     */
    public static FunctionDescriptor PyMapping_Keys$descriptor() {
        return PyMapping_Keys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyMapping_Keys(PyObject *o)
     * }
     */
    public static MethodHandle PyMapping_Keys$handle() {
        return PyMapping_Keys.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyMapping_Keys(PyObject *o)
     * }
     */
    public static MemorySegment PyMapping_Keys$address() {
        return PyMapping_Keys.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyMapping_Keys(PyObject *o)
     * }
     */
    public static MemorySegment PyMapping_Keys(MemorySegment o) {
        var mh$ = PyMapping_Keys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_Keys", o);
            }
            return (MemorySegment)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_Values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_Values");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyMapping_Values(PyObject *o)
     * }
     */
    public static FunctionDescriptor PyMapping_Values$descriptor() {
        return PyMapping_Values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyMapping_Values(PyObject *o)
     * }
     */
    public static MethodHandle PyMapping_Values$handle() {
        return PyMapping_Values.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyMapping_Values(PyObject *o)
     * }
     */
    public static MemorySegment PyMapping_Values$address() {
        return PyMapping_Values.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyMapping_Values(PyObject *o)
     * }
     */
    public static MemorySegment PyMapping_Values(MemorySegment o) {
        var mh$ = PyMapping_Values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_Values", o);
            }
            return (MemorySegment)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_Items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_Items");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyMapping_Items(PyObject *o)
     * }
     */
    public static FunctionDescriptor PyMapping_Items$descriptor() {
        return PyMapping_Items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyMapping_Items(PyObject *o)
     * }
     */
    public static MethodHandle PyMapping_Items$handle() {
        return PyMapping_Items.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyMapping_Items(PyObject *o)
     * }
     */
    public static MemorySegment PyMapping_Items$address() {
        return PyMapping_Items.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyMapping_Items(PyObject *o)
     * }
     */
    public static MemorySegment PyMapping_Items(MemorySegment o) {
        var mh$ = PyMapping_Items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_Items", o);
            }
            return (MemorySegment)mh$.invokeExact(o);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_GetItemString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_GetItemString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyMapping_GetItemString(PyObject *o, const char *key)
     * }
     */
    public static FunctionDescriptor PyMapping_GetItemString$descriptor() {
        return PyMapping_GetItemString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyMapping_GetItemString(PyObject *o, const char *key)
     * }
     */
    public static MethodHandle PyMapping_GetItemString$handle() {
        return PyMapping_GetItemString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyMapping_GetItemString(PyObject *o, const char *key)
     * }
     */
    public static MemorySegment PyMapping_GetItemString$address() {
        return PyMapping_GetItemString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyMapping_GetItemString(PyObject *o, const char *key)
     * }
     */
    public static MemorySegment PyMapping_GetItemString(MemorySegment o, MemorySegment key) {
        var mh$ = PyMapping_GetItemString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_GetItemString", o, key);
            }
            return (MemorySegment)mh$.invokeExact(o, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_GetOptionalItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_GetOptionalItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyMapping_GetOptionalItem(PyObject *, PyObject *, PyObject **)
     * }
     */
    public static FunctionDescriptor PyMapping_GetOptionalItem$descriptor() {
        return PyMapping_GetOptionalItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyMapping_GetOptionalItem(PyObject *, PyObject *, PyObject **)
     * }
     */
    public static MethodHandle PyMapping_GetOptionalItem$handle() {
        return PyMapping_GetOptionalItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyMapping_GetOptionalItem(PyObject *, PyObject *, PyObject **)
     * }
     */
    public static MemorySegment PyMapping_GetOptionalItem$address() {
        return PyMapping_GetOptionalItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyMapping_GetOptionalItem(PyObject *, PyObject *, PyObject **)
     * }
     */
    public static int PyMapping_GetOptionalItem(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = PyMapping_GetOptionalItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_GetOptionalItem", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_GetOptionalItemString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_GetOptionalItemString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyMapping_GetOptionalItemString(PyObject *, const char *, PyObject **)
     * }
     */
    public static FunctionDescriptor PyMapping_GetOptionalItemString$descriptor() {
        return PyMapping_GetOptionalItemString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyMapping_GetOptionalItemString(PyObject *, const char *, PyObject **)
     * }
     */
    public static MethodHandle PyMapping_GetOptionalItemString$handle() {
        return PyMapping_GetOptionalItemString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyMapping_GetOptionalItemString(PyObject *, const char *, PyObject **)
     * }
     */
    public static MemorySegment PyMapping_GetOptionalItemString$address() {
        return PyMapping_GetOptionalItemString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyMapping_GetOptionalItemString(PyObject *, const char *, PyObject **)
     * }
     */
    public static int PyMapping_GetOptionalItemString(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = PyMapping_GetOptionalItemString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_GetOptionalItemString", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyMapping_SetItemString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyMapping_SetItemString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyMapping_SetItemString(PyObject *o, const char *key, PyObject *value)
     * }
     */
    public static FunctionDescriptor PyMapping_SetItemString$descriptor() {
        return PyMapping_SetItemString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyMapping_SetItemString(PyObject *o, const char *key, PyObject *value)
     * }
     */
    public static MethodHandle PyMapping_SetItemString$handle() {
        return PyMapping_SetItemString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyMapping_SetItemString(PyObject *o, const char *key, PyObject *value)
     * }
     */
    public static MemorySegment PyMapping_SetItemString$address() {
        return PyMapping_SetItemString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyMapping_SetItemString(PyObject *o, const char *key, PyObject *value)
     * }
     */
    public static int PyMapping_SetItemString(MemorySegment o, MemorySegment key, MemorySegment value) {
        var mh$ = PyMapping_SetItemString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyMapping_SetItemString", o, key, value);
            }
            return (int)mh$.invokeExact(o, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyObject_IsInstance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyObject_IsInstance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyObject_IsInstance(PyObject *object, PyObject *typeorclass)
     * }
     */
    public static FunctionDescriptor PyObject_IsInstance$descriptor() {
        return PyObject_IsInstance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyObject_IsInstance(PyObject *object, PyObject *typeorclass)
     * }
     */
    public static MethodHandle PyObject_IsInstance$handle() {
        return PyObject_IsInstance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyObject_IsInstance(PyObject *object, PyObject *typeorclass)
     * }
     */
    public static MemorySegment PyObject_IsInstance$address() {
        return PyObject_IsInstance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyObject_IsInstance(PyObject *object, PyObject *typeorclass)
     * }
     */
    public static int PyObject_IsInstance(MemorySegment object, MemorySegment typeorclass) {
        var mh$ = PyObject_IsInstance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyObject_IsInstance", object, typeorclass);
            }
            return (int)mh$.invokeExact(object, typeorclass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyObject_IsSubclass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyObject_IsSubclass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyObject_IsSubclass(PyObject *object, PyObject *typeorclass)
     * }
     */
    public static FunctionDescriptor PyObject_IsSubclass$descriptor() {
        return PyObject_IsSubclass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyObject_IsSubclass(PyObject *object, PyObject *typeorclass)
     * }
     */
    public static MethodHandle PyObject_IsSubclass$handle() {
        return PyObject_IsSubclass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyObject_IsSubclass(PyObject *object, PyObject *typeorclass)
     * }
     */
    public static MemorySegment PyObject_IsSubclass$address() {
        return PyObject_IsSubclass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyObject_IsSubclass(PyObject *object, PyObject *typeorclass)
     * }
     */
    public static int PyObject_IsSubclass(MemorySegment object, MemorySegment typeorclass) {
        var mh$ = PyObject_IsSubclass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyObject_IsSubclass", object, typeorclass);
            }
            return (int)mh$.invokeExact(object, typeorclass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * PyObject *_PyObject_CallMethodId(PyObject *obj, _Py_Identifier *name, const char *format, ...)
     * }
     */
    public static class _PyObject_CallMethodId {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Python_h.C_POINTER,
                Python_h.C_POINTER,
                Python_h.C_POINTER,
                Python_h.C_POINTER
            );
        private static final MemorySegment ADDR = Python_h.findOrThrow("_PyObject_CallMethodId");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private _PyObject_CallMethodId(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * PyObject *_PyObject_CallMethodId(PyObject *obj, _Py_Identifier *name, const char *format, ...)
         * }
         */
        public static _PyObject_CallMethodId makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new _PyObject_CallMethodId(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment obj, MemorySegment name, MemorySegment format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("_PyObject_CallMethodId", obj, name, format, x3);
                }
                return (MemorySegment) spreader.invokeExact(obj, name, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class _PyStack_AsDict {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("_PyStack_AsDict");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *_PyStack_AsDict(PyObject *const *values, PyObject *kwnames)
     * }
     */
    public static FunctionDescriptor _PyStack_AsDict$descriptor() {
        return _PyStack_AsDict.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *_PyStack_AsDict(PyObject *const *values, PyObject *kwnames)
     * }
     */
    public static MethodHandle _PyStack_AsDict$handle() {
        return _PyStack_AsDict.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *_PyStack_AsDict(PyObject *const *values, PyObject *kwnames)
     * }
     */
    public static MemorySegment _PyStack_AsDict$address() {
        return _PyStack_AsDict.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *_PyStack_AsDict(PyObject *const *values, PyObject *kwnames)
     * }
     */
    public static MemorySegment _PyStack_AsDict(MemorySegment values, MemorySegment kwnames) {
        var mh$ = _PyStack_AsDict.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_PyStack_AsDict", values, kwnames);
            }
            return (MemorySegment)mh$.invokeExact(values, kwnames);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyVectorcall_Function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyVectorcall_Function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * vectorcallfunc PyVectorcall_Function(PyObject *callable)
     * }
     */
    public static FunctionDescriptor PyVectorcall_Function$descriptor() {
        return PyVectorcall_Function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * vectorcallfunc PyVectorcall_Function(PyObject *callable)
     * }
     */
    public static MethodHandle PyVectorcall_Function$handle() {
        return PyVectorcall_Function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * vectorcallfunc PyVectorcall_Function(PyObject *callable)
     * }
     */
    public static MemorySegment PyVectorcall_Function$address() {
        return PyVectorcall_Function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * vectorcallfunc PyVectorcall_Function(PyObject *callable)
     * }
     */
    public static MemorySegment PyVectorcall_Function(MemorySegment callable) {
        var mh$ = PyVectorcall_Function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyVectorcall_Function", callable);
            }
            return (MemorySegment)mh$.invokeExact(callable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyObject_VectorcallDict {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_LONG,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyObject_VectorcallDict");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyObject_VectorcallDict(PyObject *callable, PyObject *const *args, size_t nargsf, PyObject *kwargs)
     * }
     */
    public static FunctionDescriptor PyObject_VectorcallDict$descriptor() {
        return PyObject_VectorcallDict.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyObject_VectorcallDict(PyObject *callable, PyObject *const *args, size_t nargsf, PyObject *kwargs)
     * }
     */
    public static MethodHandle PyObject_VectorcallDict$handle() {
        return PyObject_VectorcallDict.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyObject_VectorcallDict(PyObject *callable, PyObject *const *args, size_t nargsf, PyObject *kwargs)
     * }
     */
    public static MemorySegment PyObject_VectorcallDict$address() {
        return PyObject_VectorcallDict.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyObject_VectorcallDict(PyObject *callable, PyObject *const *args, size_t nargsf, PyObject *kwargs)
     * }
     */
    public static MemorySegment PyObject_VectorcallDict(MemorySegment callable, MemorySegment args, long nargsf, MemorySegment kwargs) {
        var mh$ = PyObject_VectorcallDict.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyObject_VectorcallDict", callable, args, nargsf, kwargs);
            }
            return (MemorySegment)mh$.invokeExact(callable, args, nargsf, kwargs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyObject_CallOneArg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyObject_CallOneArg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PyObject *PyObject_CallOneArg(PyObject *func, PyObject *arg)
     * }
     */
    public static FunctionDescriptor PyObject_CallOneArg$descriptor() {
        return PyObject_CallOneArg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PyObject *PyObject_CallOneArg(PyObject *func, PyObject *arg)
     * }
     */
    public static MethodHandle PyObject_CallOneArg$handle() {
        return PyObject_CallOneArg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PyObject *PyObject_CallOneArg(PyObject *func, PyObject *arg)
     * }
     */
    public static MemorySegment PyObject_CallOneArg$address() {
        return PyObject_CallOneArg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PyObject *PyObject_CallOneArg(PyObject *func, PyObject *arg)
     * }
     */
    public static MemorySegment PyObject_CallOneArg(MemorySegment func, MemorySegment arg) {
        var mh$ = PyObject_CallOneArg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyObject_CallOneArg", func, arg);
            }
            return (MemorySegment)mh$.invokeExact(func, arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyObject_LengthHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_LONG,
            Python_h.C_POINTER,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyObject_LengthHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * Py_ssize_t PyObject_LengthHint(PyObject *o, Py_ssize_t)
     * }
     */
    public static FunctionDescriptor PyObject_LengthHint$descriptor() {
        return PyObject_LengthHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * Py_ssize_t PyObject_LengthHint(PyObject *o, Py_ssize_t)
     * }
     */
    public static MethodHandle PyObject_LengthHint$handle() {
        return PyObject_LengthHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * Py_ssize_t PyObject_LengthHint(PyObject *o, Py_ssize_t)
     * }
     */
    public static MemorySegment PyObject_LengthHint$address() {
        return PyObject_LengthHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * Py_ssize_t PyObject_LengthHint(PyObject *o, Py_ssize_t)
     * }
     */
    public static long PyObject_LengthHint(MemorySegment o, long x1) {
        var mh$ = PyObject_LengthHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyObject_LengthHint", o, x1);
            }
            return (long)mh$.invokeExact(o, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyFilter_Type$constants {
        public static final GroupLayout LAYOUT = _typeobject.layout();
        public static final MemorySegment SEGMENT = Python_h.findOrThrow("PyFilter_Type").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PyTypeObject PyFilter_Type
     * }
     */
    public static GroupLayout PyFilter_Type$layout() {
        return PyFilter_Type$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PyTypeObject PyFilter_Type
     * }
     */
    public static MemorySegment PyFilter_Type() {
        return PyFilter_Type$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PyTypeObject PyFilter_Type
     * }
     */
    public static void PyFilter_Type(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PyFilter_Type$constants.SEGMENT, 0L, PyFilter_Type$constants.LAYOUT.byteSize());
    }

    private static class PyMap_Type$constants {
        public static final GroupLayout LAYOUT = _typeobject.layout();
        public static final MemorySegment SEGMENT = Python_h.findOrThrow("PyMap_Type").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PyTypeObject PyMap_Type
     * }
     */
    public static GroupLayout PyMap_Type$layout() {
        return PyMap_Type$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PyTypeObject PyMap_Type
     * }
     */
    public static MemorySegment PyMap_Type() {
        return PyMap_Type$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PyTypeObject PyMap_Type
     * }
     */
    public static void PyMap_Type(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PyMap_Type$constants.SEGMENT, 0L, PyMap_Type$constants.LAYOUT.byteSize());
    }

    private static class PyZip_Type$constants {
        public static final GroupLayout LAYOUT = _typeobject.layout();
        public static final MemorySegment SEGMENT = Python_h.findOrThrow("PyZip_Type").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern PyTypeObject PyZip_Type
     * }
     */
    public static GroupLayout PyZip_Type$layout() {
        return PyZip_Type$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern PyTypeObject PyZip_Type
     * }
     */
    public static MemorySegment PyZip_Type() {
        return PyZip_Type$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern PyTypeObject PyZip_Type
     * }
     */
    public static void PyZip_Type(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PyZip_Type$constants.SEGMENT, 0L, PyZip_Type$constants.LAYOUT.byteSize());
    }

    private static class PyCriticalSection_Begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyCriticalSection_Begin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void PyCriticalSection_Begin(PyCriticalSection *c, PyObject *op)
     * }
     */
    public static FunctionDescriptor PyCriticalSection_Begin$descriptor() {
        return PyCriticalSection_Begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void PyCriticalSection_Begin(PyCriticalSection *c, PyObject *op)
     * }
     */
    public static MethodHandle PyCriticalSection_Begin$handle() {
        return PyCriticalSection_Begin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void PyCriticalSection_Begin(PyCriticalSection *c, PyObject *op)
     * }
     */
    public static MemorySegment PyCriticalSection_Begin$address() {
        return PyCriticalSection_Begin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void PyCriticalSection_Begin(PyCriticalSection *c, PyObject *op)
     * }
     */
    public static void PyCriticalSection_Begin(MemorySegment c, MemorySegment op) {
        var mh$ = PyCriticalSection_Begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyCriticalSection_Begin", c, op);
            }
            mh$.invokeExact(c, op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyCriticalSection_End {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyCriticalSection_End");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void PyCriticalSection_End(PyCriticalSection *c)
     * }
     */
    public static FunctionDescriptor PyCriticalSection_End$descriptor() {
        return PyCriticalSection_End.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void PyCriticalSection_End(PyCriticalSection *c)
     * }
     */
    public static MethodHandle PyCriticalSection_End$handle() {
        return PyCriticalSection_End.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void PyCriticalSection_End(PyCriticalSection *c)
     * }
     */
    public static MemorySegment PyCriticalSection_End$address() {
        return PyCriticalSection_End.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void PyCriticalSection_End(PyCriticalSection *c)
     * }
     */
    public static void PyCriticalSection_End(MemorySegment c) {
        var mh$ = PyCriticalSection_End.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyCriticalSection_End", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyCriticalSection2_Begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyCriticalSection2_Begin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void PyCriticalSection2_Begin(PyCriticalSection2 *c, PyObject *a, PyObject *b)
     * }
     */
    public static FunctionDescriptor PyCriticalSection2_Begin$descriptor() {
        return PyCriticalSection2_Begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void PyCriticalSection2_Begin(PyCriticalSection2 *c, PyObject *a, PyObject *b)
     * }
     */
    public static MethodHandle PyCriticalSection2_Begin$handle() {
        return PyCriticalSection2_Begin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void PyCriticalSection2_Begin(PyCriticalSection2 *c, PyObject *a, PyObject *b)
     * }
     */
    public static MemorySegment PyCriticalSection2_Begin$address() {
        return PyCriticalSection2_Begin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void PyCriticalSection2_Begin(PyCriticalSection2 *c, PyObject *a, PyObject *b)
     * }
     */
    public static void PyCriticalSection2_Begin(MemorySegment c, MemorySegment a, MemorySegment b) {
        var mh$ = PyCriticalSection2_Begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyCriticalSection2_Begin", c, a, b);
            }
            mh$.invokeExact(c, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyCriticalSection2_End {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyCriticalSection2_End");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void PyCriticalSection2_End(PyCriticalSection2 *c)
     * }
     */
    public static FunctionDescriptor PyCriticalSection2_End$descriptor() {
        return PyCriticalSection2_End.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void PyCriticalSection2_End(PyCriticalSection2 *c)
     * }
     */
    public static MethodHandle PyCriticalSection2_End$handle() {
        return PyCriticalSection2_End.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void PyCriticalSection2_End(PyCriticalSection2 *c)
     * }
     */
    public static MemorySegment PyCriticalSection2_End$address() {
        return PyCriticalSection2_End.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void PyCriticalSection2_End(PyCriticalSection2 *c)
     * }
     */
    public static void PyCriticalSection2_End(MemorySegment c) {
        var mh$ = PyCriticalSection2_End.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyCriticalSection2_End", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Py_ctype_table$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(256, Python_h.C_INT);
        public static final MemorySegment SEGMENT = Python_h.findOrThrow("_Py_ctype_table").reinterpret(LAYOUT.byteSize());
    public static final VarHandle HANDLE = LAYOUT.varHandle(sequenceElement());

        public static final long[] DIMS = { 256 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const unsigned int _Py_ctype_table[256]
     * }
     */
    public static SequenceLayout _Py_ctype_table$layout() {
        return _Py_ctype_table$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern const unsigned int _Py_ctype_table[256]
     * }
     */
    public static long[] _Py_ctype_table$dimensions() {
        return _Py_ctype_table$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const unsigned int _Py_ctype_table[256]
     * }
     */
    public static MemorySegment _Py_ctype_table() {
        return _Py_ctype_table$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const unsigned int _Py_ctype_table[256]
     * }
     */
    public static void _Py_ctype_table(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, _Py_ctype_table$constants.SEGMENT, 0L, _Py_ctype_table$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern const unsigned int _Py_ctype_table[256]
     * }
     */
    public static int _Py_ctype_table(long index0) {
        return (int)_Py_ctype_table$constants.HANDLE.get(_Py_ctype_table$constants.SEGMENT, 0L, index0);
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern const unsigned int _Py_ctype_table[256]
     * }
     */
    public static void _Py_ctype_table(long index0, int varValue) {
        _Py_ctype_table$constants.HANDLE.set(_Py_ctype_table$constants.SEGMENT, 0L, index0, varValue);
    }

    private static class _Py_ctype_tolower$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(256, Python_h.C_CHAR);
        public static final MemorySegment SEGMENT = Python_h.findOrThrow("_Py_ctype_tolower").reinterpret(LAYOUT.byteSize());
    public static final VarHandle HANDLE = LAYOUT.varHandle(sequenceElement());

        public static final long[] DIMS = { 256 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_tolower[256]
     * }
     */
    public static SequenceLayout _Py_ctype_tolower$layout() {
        return _Py_ctype_tolower$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_tolower[256]
     * }
     */
    public static long[] _Py_ctype_tolower$dimensions() {
        return _Py_ctype_tolower$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_tolower[256]
     * }
     */
    public static MemorySegment _Py_ctype_tolower() {
        return _Py_ctype_tolower$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_tolower[256]
     * }
     */
    public static void _Py_ctype_tolower(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, _Py_ctype_tolower$constants.SEGMENT, 0L, _Py_ctype_tolower$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_tolower[256]
     * }
     */
    public static byte _Py_ctype_tolower(long index0) {
        return (byte)_Py_ctype_tolower$constants.HANDLE.get(_Py_ctype_tolower$constants.SEGMENT, 0L, index0);
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_tolower[256]
     * }
     */
    public static void _Py_ctype_tolower(long index0, byte varValue) {
        _Py_ctype_tolower$constants.HANDLE.set(_Py_ctype_tolower$constants.SEGMENT, 0L, index0, varValue);
    }

    private static class _Py_ctype_toupper$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(256, Python_h.C_CHAR);
        public static final MemorySegment SEGMENT = Python_h.findOrThrow("_Py_ctype_toupper").reinterpret(LAYOUT.byteSize());
    public static final VarHandle HANDLE = LAYOUT.varHandle(sequenceElement());

        public static final long[] DIMS = { 256 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_toupper[256]
     * }
     */
    public static SequenceLayout _Py_ctype_toupper$layout() {
        return _Py_ctype_toupper$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_toupper[256]
     * }
     */
    public static long[] _Py_ctype_toupper$dimensions() {
        return _Py_ctype_toupper$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_toupper[256]
     * }
     */
    public static MemorySegment _Py_ctype_toupper() {
        return _Py_ctype_toupper$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_toupper[256]
     * }
     */
    public static void _Py_ctype_toupper(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, _Py_ctype_toupper$constants.SEGMENT, 0L, _Py_ctype_toupper$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_toupper[256]
     * }
     */
    public static byte _Py_ctype_toupper(long index0) {
        return (byte)_Py_ctype_toupper$constants.HANDLE.get(_Py_ctype_toupper$constants.SEGMENT, 0L, index0);
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern const unsigned char _Py_ctype_toupper[256]
     * }
     */
    public static void _Py_ctype_toupper(long index0, byte varValue) {
        _Py_ctype_toupper$constants.HANDLE.set(_Py_ctype_toupper$constants.SEGMENT, 0L, index0, varValue);
    }

    private static class PyOS_string_to_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_DOUBLE,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyOS_string_to_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double PyOS_string_to_double(const char *str, char **endptr, PyObject *overflow_exception)
     * }
     */
    public static FunctionDescriptor PyOS_string_to_double$descriptor() {
        return PyOS_string_to_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double PyOS_string_to_double(const char *str, char **endptr, PyObject *overflow_exception)
     * }
     */
    public static MethodHandle PyOS_string_to_double$handle() {
        return PyOS_string_to_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double PyOS_string_to_double(const char *str, char **endptr, PyObject *overflow_exception)
     * }
     */
    public static MemorySegment PyOS_string_to_double$address() {
        return PyOS_string_to_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double PyOS_string_to_double(const char *str, char **endptr, PyObject *overflow_exception)
     * }
     */
    public static double PyOS_string_to_double(MemorySegment str, MemorySegment endptr, MemorySegment overflow_exception) {
        var mh$ = PyOS_string_to_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyOS_string_to_double", str, endptr, overflow_exception);
            }
            return (double)mh$.invokeExact(str, endptr, overflow_exception);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyOS_double_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_DOUBLE,
            Python_h.C_CHAR,
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyOS_double_to_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *PyOS_double_to_string(double val, char format_code, int precision, int flags, int *type)
     * }
     */
    public static FunctionDescriptor PyOS_double_to_string$descriptor() {
        return PyOS_double_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *PyOS_double_to_string(double val, char format_code, int precision, int flags, int *type)
     * }
     */
    public static MethodHandle PyOS_double_to_string$handle() {
        return PyOS_double_to_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *PyOS_double_to_string(double val, char format_code, int precision, int flags, int *type)
     * }
     */
    public static MemorySegment PyOS_double_to_string$address() {
        return PyOS_double_to_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *PyOS_double_to_string(double val, char format_code, int precision, int flags, int *type)
     * }
     */
    public static MemorySegment PyOS_double_to_string(double val, byte format_code, int precision, int flags, MemorySegment type) {
        var mh$ = PyOS_double_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyOS_double_to_string", val, format_code, precision, flags, type);
            }
            return (MemorySegment)mh$.invokeExact(val, format_code, precision, flags, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyOS_mystrnicmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyOS_mystrnicmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyOS_mystrnicmp(const char *, const char *, Py_ssize_t)
     * }
     */
    public static FunctionDescriptor PyOS_mystrnicmp$descriptor() {
        return PyOS_mystrnicmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyOS_mystrnicmp(const char *, const char *, Py_ssize_t)
     * }
     */
    public static MethodHandle PyOS_mystrnicmp$handle() {
        return PyOS_mystrnicmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyOS_mystrnicmp(const char *, const char *, Py_ssize_t)
     * }
     */
    public static MemorySegment PyOS_mystrnicmp$address() {
        return PyOS_mystrnicmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyOS_mystrnicmp(const char *, const char *, Py_ssize_t)
     * }
     */
    public static int PyOS_mystrnicmp(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = PyOS_mystrnicmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyOS_mystrnicmp", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyOS_mystricmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyOS_mystricmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyOS_mystricmp(const char *, const char *)
     * }
     */
    public static FunctionDescriptor PyOS_mystricmp$descriptor() {
        return PyOS_mystricmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyOS_mystricmp(const char *, const char *)
     * }
     */
    public static MethodHandle PyOS_mystricmp$handle() {
        return PyOS_mystricmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyOS_mystricmp(const char *, const char *)
     * }
     */
    public static MemorySegment PyOS_mystricmp$address() {
        return PyOS_mystricmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyOS_mystricmp(const char *, const char *)
     * }
     */
    public static int PyOS_mystricmp(MemorySegment x0, MemorySegment x1) {
        var mh$ = PyOS_mystricmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyOS_mystricmp", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class chmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_SHORT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("chmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int chmod(const char *, mode_t)
     * }
     */
    public static FunctionDescriptor chmod$descriptor() {
        return chmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int chmod(const char *, mode_t)
     * }
     */
    public static MethodHandle chmod$handle() {
        return chmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int chmod(const char *, mode_t)
     * }
     */
    public static MemorySegment chmod$address() {
        return chmod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int chmod(const char *, mode_t)
     * }
     */
    public static int chmod(MemorySegment x0, short x1) {
        var mh$ = chmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("chmod", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fchmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_SHORT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("fchmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fchmod(int, mode_t)
     * }
     */
    public static FunctionDescriptor fchmod$descriptor() {
        return fchmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fchmod(int, mode_t)
     * }
     */
    public static MethodHandle fchmod$handle() {
        return fchmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fchmod(int, mode_t)
     * }
     */
    public static MemorySegment fchmod$address() {
        return fchmod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fchmod(int, mode_t)
     * }
     */
    public static int fchmod(int x0, short x1) {
        var mh$ = fchmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fchmod", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fstat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("fstat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fstat(int, struct stat *)
     * }
     */
    public static FunctionDescriptor fstat$descriptor() {
        return fstat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fstat(int, struct stat *)
     * }
     */
    public static MethodHandle fstat$handle() {
        return fstat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fstat(int, struct stat *)
     * }
     */
    public static MemorySegment fstat$address() {
        return fstat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fstat(int, struct stat *)
     * }
     */
    public static int fstat(int x0, MemorySegment x1) {
        var mh$ = fstat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fstat", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lstat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("lstat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int lstat(const char *, struct stat *)
     * }
     */
    public static FunctionDescriptor lstat$descriptor() {
        return lstat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int lstat(const char *, struct stat *)
     * }
     */
    public static MethodHandle lstat$handle() {
        return lstat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int lstat(const char *, struct stat *)
     * }
     */
    public static MemorySegment lstat$address() {
        return lstat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int lstat(const char *, struct stat *)
     * }
     */
    public static int lstat(MemorySegment x0, MemorySegment x1) {
        var mh$ = lstat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lstat", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkdir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_SHORT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("mkdir");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mkdir(const char *, mode_t)
     * }
     */
    public static FunctionDescriptor mkdir$descriptor() {
        return mkdir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mkdir(const char *, mode_t)
     * }
     */
    public static MethodHandle mkdir$handle() {
        return mkdir.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mkdir(const char *, mode_t)
     * }
     */
    public static MemorySegment mkdir$address() {
        return mkdir.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mkdir(const char *, mode_t)
     * }
     */
    public static int mkdir(MemorySegment x0, short x1) {
        var mh$ = mkdir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkdir", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkfifo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_SHORT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("mkfifo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mkfifo(const char *, mode_t)
     * }
     */
    public static FunctionDescriptor mkfifo$descriptor() {
        return mkfifo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mkfifo(const char *, mode_t)
     * }
     */
    public static MethodHandle mkfifo$handle() {
        return mkfifo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mkfifo(const char *, mode_t)
     * }
     */
    public static MemorySegment mkfifo$address() {
        return mkfifo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mkfifo(const char *, mode_t)
     * }
     */
    public static int mkfifo(MemorySegment x0, short x1) {
        var mh$ = mkfifo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkfifo", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class stat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("stat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int stat(const char *, struct stat *)
     * }
     */
    public static FunctionDescriptor stat$descriptor() {
        return stat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int stat(const char *, struct stat *)
     * }
     */
    public static MethodHandle stat$handle() {
        return stat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int stat(const char *, struct stat *)
     * }
     */
    public static MemorySegment stat$address() {
        return stat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int stat(const char *, struct stat *)
     * }
     */
    public static int stat(MemorySegment x0, MemorySegment x1) {
        var mh$ = stat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("stat", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class umask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_SHORT,
            Python_h.C_SHORT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("umask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * mode_t umask(mode_t)
     * }
     */
    public static FunctionDescriptor umask$descriptor() {
        return umask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * mode_t umask(mode_t)
     * }
     */
    public static MethodHandle umask$handle() {
        return umask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * mode_t umask(mode_t)
     * }
     */
    public static MemorySegment umask$address() {
        return umask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * mode_t umask(mode_t)
     * }
     */
    public static short umask(short x0) {
        var mh$ = umask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("umask", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fchmodat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_SHORT,
            Python_h.C_INT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("fchmodat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fchmodat(int, const char *, mode_t, int)
     * }
     */
    public static FunctionDescriptor fchmodat$descriptor() {
        return fchmodat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fchmodat(int, const char *, mode_t, int)
     * }
     */
    public static MethodHandle fchmodat$handle() {
        return fchmodat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fchmodat(int, const char *, mode_t, int)
     * }
     */
    public static MemorySegment fchmodat$address() {
        return fchmodat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fchmodat(int, const char *, mode_t, int)
     * }
     */
    public static int fchmodat(int x0, MemorySegment x1, short x2, int x3) {
        var mh$ = fchmodat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fchmodat", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fstatat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_INT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("fstatat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fstatat(int, const char *, struct stat *, int)
     * }
     */
    public static FunctionDescriptor fstatat$descriptor() {
        return fstatat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fstatat(int, const char *, struct stat *, int)
     * }
     */
    public static MethodHandle fstatat$handle() {
        return fstatat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fstatat(int, const char *, struct stat *, int)
     * }
     */
    public static MemorySegment fstatat$address() {
        return fstatat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fstatat(int, const char *, struct stat *, int)
     * }
     */
    public static int fstatat(int x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = fstatat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fstatat", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkdirat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_SHORT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("mkdirat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mkdirat(int, const char *, mode_t)
     * }
     */
    public static FunctionDescriptor mkdirat$descriptor() {
        return mkdirat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mkdirat(int, const char *, mode_t)
     * }
     */
    public static MethodHandle mkdirat$handle() {
        return mkdirat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mkdirat(int, const char *, mode_t)
     * }
     */
    public static MemorySegment mkdirat$address() {
        return mkdirat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mkdirat(int, const char *, mode_t)
     * }
     */
    public static int mkdirat(int x0, MemorySegment x1, short x2) {
        var mh$ = mkdirat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkdirat", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkfifoat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_SHORT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("mkfifoat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mkfifoat(int, const char *, mode_t)
     * }
     */
    public static FunctionDescriptor mkfifoat$descriptor() {
        return mkfifoat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mkfifoat(int, const char *, mode_t)
     * }
     */
    public static MethodHandle mkfifoat$handle() {
        return mkfifoat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mkfifoat(int, const char *, mode_t)
     * }
     */
    public static MemorySegment mkfifoat$address() {
        return mkfifoat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mkfifoat(int, const char *, mode_t)
     * }
     */
    public static int mkfifoat(int x0, MemorySegment x1, short x2) {
        var mh$ = mkfifoat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkfifoat", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mknodat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_SHORT,
            Python_h.C_INT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("mknodat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mknodat(int, const char *, mode_t, dev_t)
     * }
     */
    public static FunctionDescriptor mknodat$descriptor() {
        return mknodat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mknodat(int, const char *, mode_t, dev_t)
     * }
     */
    public static MethodHandle mknodat$handle() {
        return mknodat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mknodat(int, const char *, mode_t, dev_t)
     * }
     */
    public static MemorySegment mknodat$address() {
        return mknodat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mknodat(int, const char *, mode_t, dev_t)
     * }
     */
    public static int mknodat(int x0, MemorySegment x1, short x2, int x3) {
        var mh$ = mknodat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mknodat", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class futimens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("futimens");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int futimens(int __fd, const struct timespec __times[2])
     * }
     */
    public static FunctionDescriptor futimens$descriptor() {
        return futimens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int futimens(int __fd, const struct timespec __times[2])
     * }
     */
    public static MethodHandle futimens$handle() {
        return futimens.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int futimens(int __fd, const struct timespec __times[2])
     * }
     */
    public static MemorySegment futimens$address() {
        return futimens.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int futimens(int __fd, const struct timespec __times[2])
     * }
     */
    public static int futimens(int __fd, MemorySegment __times) {
        var mh$ = futimens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("futimens", __fd, __times);
            }
            return (int)mh$.invokeExact(__fd, __times);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class utimensat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_INT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("utimensat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flag)
     * }
     */
    public static FunctionDescriptor utimensat$descriptor() {
        return utimensat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flag)
     * }
     */
    public static MethodHandle utimensat$handle() {
        return utimensat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flag)
     * }
     */
    public static MemorySegment utimensat$address() {
        return utimensat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int utimensat(int __fd, const char *__path, const struct timespec __times[2], int __flag)
     * }
     */
    public static int utimensat(int __fd, MemorySegment __path, MemorySegment __times, int __flag) {
        var mh$ = utimensat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("utimensat", __fd, __path, __times, __flag);
            }
            return (int)mh$.invokeExact(__fd, __path, __times, __flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _filesec *filesec_t
     * }
     */
    public static final AddressLayout filesec_t = Python_h.C_POINTER;

    private static class chflags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_INT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("chflags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int chflags(const char *, __uint32_t)
     * }
     */
    public static FunctionDescriptor chflags$descriptor() {
        return chflags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int chflags(const char *, __uint32_t)
     * }
     */
    public static MethodHandle chflags$handle() {
        return chflags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int chflags(const char *, __uint32_t)
     * }
     */
    public static MemorySegment chflags$address() {
        return chflags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int chflags(const char *, __uint32_t)
     * }
     */
    public static int chflags(MemorySegment x0, int x1) {
        var mh$ = chflags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("chflags", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class chmodx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("chmodx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int chmodx_np(const char *, filesec_t)
     * }
     */
    public static FunctionDescriptor chmodx_np$descriptor() {
        return chmodx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int chmodx_np(const char *, filesec_t)
     * }
     */
    public static MethodHandle chmodx_np$handle() {
        return chmodx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int chmodx_np(const char *, filesec_t)
     * }
     */
    public static MemorySegment chmodx_np$address() {
        return chmodx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int chmodx_np(const char *, filesec_t)
     * }
     */
    public static int chmodx_np(MemorySegment x0, MemorySegment x1) {
        var mh$ = chmodx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("chmodx_np", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fchflags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_INT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("fchflags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fchflags(int, __uint32_t)
     * }
     */
    public static FunctionDescriptor fchflags$descriptor() {
        return fchflags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fchflags(int, __uint32_t)
     * }
     */
    public static MethodHandle fchflags$handle() {
        return fchflags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fchflags(int, __uint32_t)
     * }
     */
    public static MemorySegment fchflags$address() {
        return fchflags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fchflags(int, __uint32_t)
     * }
     */
    public static int fchflags(int x0, int x1) {
        var mh$ = fchflags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fchflags", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fchmodx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("fchmodx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fchmodx_np(int, filesec_t)
     * }
     */
    public static FunctionDescriptor fchmodx_np$descriptor() {
        return fchmodx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fchmodx_np(int, filesec_t)
     * }
     */
    public static MethodHandle fchmodx_np$handle() {
        return fchmodx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fchmodx_np(int, filesec_t)
     * }
     */
    public static MemorySegment fchmodx_np$address() {
        return fchmodx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fchmodx_np(int, filesec_t)
     * }
     */
    public static int fchmodx_np(int x0, MemorySegment x1) {
        var mh$ = fchmodx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fchmodx_np", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fstatx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("fstatx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fstatx_np(int, struct stat *, filesec_t)
     * }
     */
    public static FunctionDescriptor fstatx_np$descriptor() {
        return fstatx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fstatx_np(int, struct stat *, filesec_t)
     * }
     */
    public static MethodHandle fstatx_np$handle() {
        return fstatx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fstatx_np(int, struct stat *, filesec_t)
     * }
     */
    public static MemorySegment fstatx_np$address() {
        return fstatx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fstatx_np(int, struct stat *, filesec_t)
     * }
     */
    public static int fstatx_np(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = fstatx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fstatx_np", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lchflags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_INT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("lchflags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int lchflags(const char *, __uint32_t)
     * }
     */
    public static FunctionDescriptor lchflags$descriptor() {
        return lchflags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int lchflags(const char *, __uint32_t)
     * }
     */
    public static MethodHandle lchflags$handle() {
        return lchflags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int lchflags(const char *, __uint32_t)
     * }
     */
    public static MemorySegment lchflags$address() {
        return lchflags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int lchflags(const char *, __uint32_t)
     * }
     */
    public static int lchflags(MemorySegment x0, int x1) {
        var mh$ = lchflags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lchflags", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lchmod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_SHORT
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("lchmod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int lchmod(const char *, mode_t)
     * }
     */
    public static FunctionDescriptor lchmod$descriptor() {
        return lchmod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int lchmod(const char *, mode_t)
     * }
     */
    public static MethodHandle lchmod$handle() {
        return lchmod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int lchmod(const char *, mode_t)
     * }
     */
    public static MemorySegment lchmod$address() {
        return lchmod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int lchmod(const char *, mode_t)
     * }
     */
    public static int lchmod(MemorySegment x0, short x1) {
        var mh$ = lchmod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lchmod", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lstatx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("lstatx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int lstatx_np(const char *, struct stat *, filesec_t)
     * }
     */
    public static FunctionDescriptor lstatx_np$descriptor() {
        return lstatx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int lstatx_np(const char *, struct stat *, filesec_t)
     * }
     */
    public static MethodHandle lstatx_np$handle() {
        return lstatx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int lstatx_np(const char *, struct stat *, filesec_t)
     * }
     */
    public static MemorySegment lstatx_np$address() {
        return lstatx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int lstatx_np(const char *, struct stat *, filesec_t)
     * }
     */
    public static int lstatx_np(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = lstatx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lstatx_np", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkdirx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("mkdirx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mkdirx_np(const char *, filesec_t)
     * }
     */
    public static FunctionDescriptor mkdirx_np$descriptor() {
        return mkdirx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mkdirx_np(const char *, filesec_t)
     * }
     */
    public static MethodHandle mkdirx_np$handle() {
        return mkdirx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mkdirx_np(const char *, filesec_t)
     * }
     */
    public static MemorySegment mkdirx_np$address() {
        return mkdirx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mkdirx_np(const char *, filesec_t)
     * }
     */
    public static int mkdirx_np(MemorySegment x0, MemorySegment x1) {
        var mh$ = mkdirx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkdirx_np", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkfifox_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("mkfifox_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mkfifox_np(const char *, filesec_t)
     * }
     */
    public static FunctionDescriptor mkfifox_np$descriptor() {
        return mkfifox_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mkfifox_np(const char *, filesec_t)
     * }
     */
    public static MethodHandle mkfifox_np$handle() {
        return mkfifox_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mkfifox_np(const char *, filesec_t)
     * }
     */
    public static MemorySegment mkfifox_np$address() {
        return mkfifox_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mkfifox_np(const char *, filesec_t)
     * }
     */
    public static int mkfifox_np(MemorySegment x0, MemorySegment x1) {
        var mh$ = mkfifox_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkfifox_np", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class statx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("statx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int statx_np(const char *, struct stat *, filesec_t)
     * }
     */
    public static FunctionDescriptor statx_np$descriptor() {
        return statx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int statx_np(const char *, struct stat *, filesec_t)
     * }
     */
    public static MethodHandle statx_np$handle() {
        return statx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int statx_np(const char *, struct stat *, filesec_t)
     * }
     */
    public static MemorySegment statx_np$address() {
        return statx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int statx_np(const char *, struct stat *, filesec_t)
     * }
     */
    public static int statx_np(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = statx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("statx_np", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class umaskx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("umaskx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int umaskx_np(filesec_t)
     * }
     */
    public static FunctionDescriptor umaskx_np$descriptor() {
        return umaskx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int umaskx_np(filesec_t)
     * }
     */
    public static MethodHandle umaskx_np$handle() {
        return umaskx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int umaskx_np(filesec_t)
     * }
     */
    public static MemorySegment umaskx_np$address() {
        return umaskx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int umaskx_np(filesec_t)
     * }
     */
    public static int umaskx_np(MemorySegment x0) {
        var mh$ = umaskx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("umaskx_np", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Py_DecodeLocale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("Py_DecodeLocale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *Py_DecodeLocale(const char *arg, size_t *size)
     * }
     */
    public static FunctionDescriptor Py_DecodeLocale$descriptor() {
        return Py_DecodeLocale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *Py_DecodeLocale(const char *arg, size_t *size)
     * }
     */
    public static MethodHandle Py_DecodeLocale$handle() {
        return Py_DecodeLocale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *Py_DecodeLocale(const char *arg, size_t *size)
     * }
     */
    public static MemorySegment Py_DecodeLocale$address() {
        return Py_DecodeLocale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *Py_DecodeLocale(const char *arg, size_t *size)
     * }
     */
    public static MemorySegment Py_DecodeLocale(MemorySegment arg, MemorySegment size) {
        var mh$ = Py_DecodeLocale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Py_DecodeLocale", arg, size);
            }
            return (MemorySegment)mh$.invokeExact(arg, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Py_EncodeLocale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("Py_EncodeLocale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *Py_EncodeLocale(const wchar_t *text, size_t *error_pos)
     * }
     */
    public static FunctionDescriptor Py_EncodeLocale$descriptor() {
        return Py_EncodeLocale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *Py_EncodeLocale(const wchar_t *text, size_t *error_pos)
     * }
     */
    public static MethodHandle Py_EncodeLocale$handle() {
        return Py_EncodeLocale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *Py_EncodeLocale(const wchar_t *text, size_t *error_pos)
     * }
     */
    public static MemorySegment Py_EncodeLocale$address() {
        return Py_EncodeLocale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *Py_EncodeLocale(const wchar_t *text, size_t *error_pos)
     * }
     */
    public static MemorySegment Py_EncodeLocale(MemorySegment text, MemorySegment error_pos) {
        var mh$ = Py_EncodeLocale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Py_EncodeLocale", text, error_pos);
            }
            return (MemorySegment)mh$.invokeExact(text, error_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Py_fopen_obj {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_POINTER,
            Python_h.C_POINTER,
            Python_h.C_POINTER
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("_Py_fopen_obj");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *_Py_fopen_obj(PyObject *path, const char *mode)
     * }
     */
    public static FunctionDescriptor _Py_fopen_obj$descriptor() {
        return _Py_fopen_obj.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *_Py_fopen_obj(PyObject *path, const char *mode)
     * }
     */
    public static MethodHandle _Py_fopen_obj$handle() {
        return _Py_fopen_obj.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *_Py_fopen_obj(PyObject *path, const char *mode)
     * }
     */
    public static MemorySegment _Py_fopen_obj$address() {
        return _Py_fopen_obj.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *_Py_fopen_obj(PyObject *path, const char *mode)
     * }
     */
    public static MemorySegment _Py_fopen_obj(MemorySegment path, MemorySegment mode) {
        var mh$ = _Py_fopen_obj.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Py_fopen_obj", path, mode);
            }
            return (MemorySegment)mh$.invokeExact(path, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyTraceMalloc_Track {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_LONG,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyTraceMalloc_Track");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyTraceMalloc_Track(unsigned int domain, uintptr_t ptr, size_t size)
     * }
     */
    public static FunctionDescriptor PyTraceMalloc_Track$descriptor() {
        return PyTraceMalloc_Track.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyTraceMalloc_Track(unsigned int domain, uintptr_t ptr, size_t size)
     * }
     */
    public static MethodHandle PyTraceMalloc_Track$handle() {
        return PyTraceMalloc_Track.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyTraceMalloc_Track(unsigned int domain, uintptr_t ptr, size_t size)
     * }
     */
    public static MemorySegment PyTraceMalloc_Track$address() {
        return PyTraceMalloc_Track.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyTraceMalloc_Track(unsigned int domain, uintptr_t ptr, size_t size)
     * }
     */
    public static int PyTraceMalloc_Track(int domain, long ptr, long size) {
        var mh$ = PyTraceMalloc_Track.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyTraceMalloc_Track", domain, ptr, size);
            }
            return (int)mh$.invokeExact(domain, ptr, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PyTraceMalloc_Untrack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Python_h.C_INT,
            Python_h.C_INT,
            Python_h.C_LONG
        );

        public static final MemorySegment ADDR = Python_h.findOrThrow("PyTraceMalloc_Untrack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PyTraceMalloc_Untrack(unsigned int domain, uintptr_t ptr)
     * }
     */
    public static FunctionDescriptor PyTraceMalloc_Untrack$descriptor() {
        return PyTraceMalloc_Untrack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PyTraceMalloc_Untrack(unsigned int domain, uintptr_t ptr)
     * }
     */
    public static MethodHandle PyTraceMalloc_Untrack$handle() {
        return PyTraceMalloc_Untrack.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PyTraceMalloc_Untrack(unsigned int domain, uintptr_t ptr)
     * }
     */
    public static MemorySegment PyTraceMalloc_Untrack$address() {
        return PyTraceMalloc_Untrack.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PyTraceMalloc_Untrack(unsigned int domain, uintptr_t ptr)
     * }
     */
    public static int PyTraceMalloc_Untrack(int domain, long ptr) {
        var mh$ = PyTraceMalloc_Untrack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PyTraceMalloc_Untrack", domain, ptr);
            }
            return (int)mh$.invokeExact(domain, ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PY_RELEASE_LEVEL = (int)15L;
    /**
     * {@snippet lang=c :
     * #define PY_RELEASE_LEVEL 15
     * }
     */
    public static int PY_RELEASE_LEVEL() {
        return PY_RELEASE_LEVEL;
    }
    /**
     * {@snippet lang=c :
     * #define PY_VERSION "3.13.1"
     * }
     */
    public static MemorySegment PY_VERSION() {
        class Holder {
            static final MemorySegment PY_VERSION
                = Python_h.LIBRARY_ARENA.allocateFrom("3.13.1");
        }
        return Holder.PY_VERSION;
    }
    private static final int PY_VERSION_HEX = (int)51184112L;
    /**
     * {@snippet lang=c :
     * #define PY_VERSION_HEX 51184112
     * }
     */
    public static int PY_VERSION_HEX() {
        return PY_VERSION_HEX;
    }
    /**
     * {@snippet lang=c :
     * #define PY_BUILTIN_HASHLIB_HASHES "md5,sha1,sha2,sha3,blake2"
     * }
     */
    public static MemorySegment PY_BUILTIN_HASHLIB_HASHES() {
        class Holder {
            static final MemorySegment PY_BUILTIN_HASHLIB_HASHES
                = Python_h.LIBRARY_ARENA.allocateFrom("md5,sha1,sha2,sha3,blake2");
        }
        return Holder.PY_BUILTIN_HASHLIB_HASHES;
    }
    /**
     * {@snippet lang=c :
     * #define _PYTHONFRAMEWORK "Python"
     * }
     */
    public static MemorySegment _PYTHONFRAMEWORK() {
        class Holder {
            static final MemorySegment _PYTHONFRAMEWORK
                = Python_h.LIBRARY_ARENA.allocateFrom("Python");
        }
        return Holder._PYTHONFRAMEWORK;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = Python_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    /**
     * {@snippet lang=c :
     * #define __ASSERT_FILE_NAME "jextract$macro.h"
     * }
     */
    public static MemorySegment __ASSERT_FILE_NAME() {
        class Holder {
            static final MemorySegment __ASSERT_FILE_NAME
                = Python_h.LIBRARY_ARENA.allocateFrom("jextract$macro.h");
        }
        return Holder.__ASSERT_FILE_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define __PRI_8_LENGTH_MODIFIER__ "hh"
     * }
     */
    public static MemorySegment __PRI_8_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __PRI_8_LENGTH_MODIFIER__
                = Python_h.LIBRARY_ARENA.allocateFrom("hh");
        }
        return Holder.__PRI_8_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define __PRI_64_LENGTH_MODIFIER__ "ll"
     * }
     */
    public static MemorySegment __PRI_64_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __PRI_64_LENGTH_MODIFIER__
                = Python_h.LIBRARY_ARENA.allocateFrom("ll");
        }
        return Holder.__PRI_64_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define __SCN_64_LENGTH_MODIFIER__ "ll"
     * }
     */
    public static MemorySegment __SCN_64_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __SCN_64_LENGTH_MODIFIER__
                = Python_h.LIBRARY_ARENA.allocateFrom("ll");
        }
        return Holder.__SCN_64_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define __PRI_MAX_LENGTH_MODIFIER__ "j"
     * }
     */
    public static MemorySegment __PRI_MAX_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __PRI_MAX_LENGTH_MODIFIER__
                = Python_h.LIBRARY_ARENA.allocateFrom("j");
        }
        return Holder.__PRI_MAX_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define __SCN_MAX_LENGTH_MODIFIER__ "j"
     * }
     */
    public static MemorySegment __SCN_MAX_LENGTH_MODIFIER__() {
        class Holder {
            static final MemorySegment __SCN_MAX_LENGTH_MODIFIER__
                = Python_h.LIBRARY_ARENA.allocateFrom("j");
        }
        return Holder.__SCN_MAX_LENGTH_MODIFIER__;
    }
    /**
     * {@snippet lang=c :
     * #define PRId8 "hhd"
     * }
     */
    public static MemorySegment PRId8() {
        class Holder {
            static final MemorySegment PRId8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.PRId8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi8 "hhi"
     * }
     */
    public static MemorySegment PRIi8() {
        class Holder {
            static final MemorySegment PRIi8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.PRIi8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo8 "hho"
     * }
     */
    public static MemorySegment PRIo8() {
        class Holder {
            static final MemorySegment PRIo8
                = Python_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.PRIo8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu8 "hhu"
     * }
     */
    public static MemorySegment PRIu8() {
        class Holder {
            static final MemorySegment PRIu8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.PRIu8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx8 "hhx"
     * }
     */
    public static MemorySegment PRIx8() {
        class Holder {
            static final MemorySegment PRIx8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.PRIx8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX8 "hhX"
     * }
     */
    public static MemorySegment PRIX8() {
        class Holder {
            static final MemorySegment PRIX8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhX");
        }
        return Holder.PRIX8;
    }
    /**
     * {@snippet lang=c :
     * #define PRId16 "hd"
     * }
     */
    public static MemorySegment PRId16() {
        class Holder {
            static final MemorySegment PRId16
                = Python_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.PRId16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi16 "hi"
     * }
     */
    public static MemorySegment PRIi16() {
        class Holder {
            static final MemorySegment PRIi16
                = Python_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.PRIi16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo16 "ho"
     * }
     */
    public static MemorySegment PRIo16() {
        class Holder {
            static final MemorySegment PRIo16
                = Python_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.PRIo16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu16 "hu"
     * }
     */
    public static MemorySegment PRIu16() {
        class Holder {
            static final MemorySegment PRIu16
                = Python_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.PRIu16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx16 "hx"
     * }
     */
    public static MemorySegment PRIx16() {
        class Holder {
            static final MemorySegment PRIx16
                = Python_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.PRIx16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX16 "hX"
     * }
     */
    public static MemorySegment PRIX16() {
        class Holder {
            static final MemorySegment PRIX16
                = Python_h.LIBRARY_ARENA.allocateFrom("hX");
        }
        return Holder.PRIX16;
    }
    /**
     * {@snippet lang=c :
     * #define PRId32 "d"
     * }
     */
    public static MemorySegment PRId32() {
        class Holder {
            static final MemorySegment PRId32
                = Python_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRId32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi32 "i"
     * }
     */
    public static MemorySegment PRIi32() {
        class Holder {
            static final MemorySegment PRIi32
                = Python_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIi32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo32 "o"
     * }
     */
    public static MemorySegment PRIo32() {
        class Holder {
            static final MemorySegment PRIo32
                = Python_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIo32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu32 "u"
     * }
     */
    public static MemorySegment PRIu32() {
        class Holder {
            static final MemorySegment PRIu32
                = Python_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIu32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx32 "x"
     * }
     */
    public static MemorySegment PRIx32() {
        class Holder {
            static final MemorySegment PRIx32
                = Python_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIx32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX32 "X"
     * }
     */
    public static MemorySegment PRIX32() {
        class Holder {
            static final MemorySegment PRIX32
                = Python_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIX32;
    }
    /**
     * {@snippet lang=c :
     * #define PRId64 "lld"
     * }
     */
    public static MemorySegment PRId64() {
        class Holder {
            static final MemorySegment PRId64
                = Python_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRId64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi64 "lli"
     * }
     */
    public static MemorySegment PRIi64() {
        class Holder {
            static final MemorySegment PRIi64
                = Python_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIi64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo64 "llo"
     * }
     */
    public static MemorySegment PRIo64() {
        class Holder {
            static final MemorySegment PRIo64
                = Python_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIo64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu64 "llu"
     * }
     */
    public static MemorySegment PRIu64() {
        class Holder {
            static final MemorySegment PRIu64
                = Python_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIu64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx64 "llx"
     * }
     */
    public static MemorySegment PRIx64() {
        class Holder {
            static final MemorySegment PRIx64
                = Python_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIx64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX64 "llX"
     * }
     */
    public static MemorySegment PRIX64() {
        class Holder {
            static final MemorySegment PRIX64
                = Python_h.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIX64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST8 "hhd"
     * }
     */
    public static MemorySegment PRIdLEAST8() {
        class Holder {
            static final MemorySegment PRIdLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.PRIdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST8 "hhi"
     * }
     */
    public static MemorySegment PRIiLEAST8() {
        class Holder {
            static final MemorySegment PRIiLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.PRIiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST8 "hho"
     * }
     */
    public static MemorySegment PRIoLEAST8() {
        class Holder {
            static final MemorySegment PRIoLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.PRIoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST8 "hhu"
     * }
     */
    public static MemorySegment PRIuLEAST8() {
        class Holder {
            static final MemorySegment PRIuLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.PRIuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST8 "hhx"
     * }
     */
    public static MemorySegment PRIxLEAST8() {
        class Holder {
            static final MemorySegment PRIxLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.PRIxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST8 "hhX"
     * }
     */
    public static MemorySegment PRIXLEAST8() {
        class Holder {
            static final MemorySegment PRIXLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhX");
        }
        return Holder.PRIXLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST16 "hd"
     * }
     */
    public static MemorySegment PRIdLEAST16() {
        class Holder {
            static final MemorySegment PRIdLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.PRIdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST16 "hi"
     * }
     */
    public static MemorySegment PRIiLEAST16() {
        class Holder {
            static final MemorySegment PRIiLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.PRIiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST16 "ho"
     * }
     */
    public static MemorySegment PRIoLEAST16() {
        class Holder {
            static final MemorySegment PRIoLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.PRIoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST16 "hu"
     * }
     */
    public static MemorySegment PRIuLEAST16() {
        class Holder {
            static final MemorySegment PRIuLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.PRIuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST16 "hx"
     * }
     */
    public static MemorySegment PRIxLEAST16() {
        class Holder {
            static final MemorySegment PRIxLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.PRIxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST16 "hX"
     * }
     */
    public static MemorySegment PRIXLEAST16() {
        class Holder {
            static final MemorySegment PRIXLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hX");
        }
        return Holder.PRIXLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST32 "d"
     * }
     */
    public static MemorySegment PRIdLEAST32() {
        class Holder {
            static final MemorySegment PRIdLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST32 "i"
     * }
     */
    public static MemorySegment PRIiLEAST32() {
        class Holder {
            static final MemorySegment PRIiLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST32 "o"
     * }
     */
    public static MemorySegment PRIoLEAST32() {
        class Holder {
            static final MemorySegment PRIoLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST32 "u"
     * }
     */
    public static MemorySegment PRIuLEAST32() {
        class Holder {
            static final MemorySegment PRIuLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST32 "x"
     * }
     */
    public static MemorySegment PRIxLEAST32() {
        class Holder {
            static final MemorySegment PRIxLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST32 "X"
     * }
     */
    public static MemorySegment PRIXLEAST32() {
        class Holder {
            static final MemorySegment PRIXLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST64 "lld"
     * }
     */
    public static MemorySegment PRIdLEAST64() {
        class Holder {
            static final MemorySegment PRIdLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRIdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST64 "lli"
     * }
     */
    public static MemorySegment PRIiLEAST64() {
        class Holder {
            static final MemorySegment PRIiLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST64 "llo"
     * }
     */
    public static MemorySegment PRIoLEAST64() {
        class Holder {
            static final MemorySegment PRIoLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST64 "llu"
     * }
     */
    public static MemorySegment PRIuLEAST64() {
        class Holder {
            static final MemorySegment PRIuLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST64 "llx"
     * }
     */
    public static MemorySegment PRIxLEAST64() {
        class Holder {
            static final MemorySegment PRIxLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST64 "llX"
     * }
     */
    public static MemorySegment PRIXLEAST64() {
        class Holder {
            static final MemorySegment PRIXLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIXLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST8 "hhd"
     * }
     */
    public static MemorySegment PRIdFAST8() {
        class Holder {
            static final MemorySegment PRIdFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.PRIdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST8 "hhi"
     * }
     */
    public static MemorySegment PRIiFAST8() {
        class Holder {
            static final MemorySegment PRIiFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.PRIiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST8 "hho"
     * }
     */
    public static MemorySegment PRIoFAST8() {
        class Holder {
            static final MemorySegment PRIoFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.PRIoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST8 "hhu"
     * }
     */
    public static MemorySegment PRIuFAST8() {
        class Holder {
            static final MemorySegment PRIuFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.PRIuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST8 "hhx"
     * }
     */
    public static MemorySegment PRIxFAST8() {
        class Holder {
            static final MemorySegment PRIxFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.PRIxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST8 "hhX"
     * }
     */
    public static MemorySegment PRIXFAST8() {
        class Holder {
            static final MemorySegment PRIXFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhX");
        }
        return Holder.PRIXFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST16 "hd"
     * }
     */
    public static MemorySegment PRIdFAST16() {
        class Holder {
            static final MemorySegment PRIdFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.PRIdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST16 "hi"
     * }
     */
    public static MemorySegment PRIiFAST16() {
        class Holder {
            static final MemorySegment PRIiFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.PRIiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST16 "ho"
     * }
     */
    public static MemorySegment PRIoFAST16() {
        class Holder {
            static final MemorySegment PRIoFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.PRIoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST16 "hu"
     * }
     */
    public static MemorySegment PRIuFAST16() {
        class Holder {
            static final MemorySegment PRIuFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.PRIuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST16 "hx"
     * }
     */
    public static MemorySegment PRIxFAST16() {
        class Holder {
            static final MemorySegment PRIxFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.PRIxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST16 "hX"
     * }
     */
    public static MemorySegment PRIXFAST16() {
        class Holder {
            static final MemorySegment PRIXFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hX");
        }
        return Holder.PRIXFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST32 "d"
     * }
     */
    public static MemorySegment PRIdFAST32() {
        class Holder {
            static final MemorySegment PRIdFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST32 "i"
     * }
     */
    public static MemorySegment PRIiFAST32() {
        class Holder {
            static final MemorySegment PRIiFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST32 "o"
     * }
     */
    public static MemorySegment PRIoFAST32() {
        class Holder {
            static final MemorySegment PRIoFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST32 "u"
     * }
     */
    public static MemorySegment PRIuFAST32() {
        class Holder {
            static final MemorySegment PRIuFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST32 "x"
     * }
     */
    public static MemorySegment PRIxFAST32() {
        class Holder {
            static final MemorySegment PRIxFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST32 "X"
     * }
     */
    public static MemorySegment PRIXFAST32() {
        class Holder {
            static final MemorySegment PRIXFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST64 "lld"
     * }
     */
    public static MemorySegment PRIdFAST64() {
        class Holder {
            static final MemorySegment PRIdFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.PRIdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST64 "lli"
     * }
     */
    public static MemorySegment PRIiFAST64() {
        class Holder {
            static final MemorySegment PRIiFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.PRIiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST64 "llo"
     * }
     */
    public static MemorySegment PRIoFAST64() {
        class Holder {
            static final MemorySegment PRIoFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.PRIoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST64 "llu"
     * }
     */
    public static MemorySegment PRIuFAST64() {
        class Holder {
            static final MemorySegment PRIuFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.PRIuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST64 "llx"
     * }
     */
    public static MemorySegment PRIxFAST64() {
        class Holder {
            static final MemorySegment PRIxFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.PRIxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST64 "llX"
     * }
     */
    public static MemorySegment PRIXFAST64() {
        class Holder {
            static final MemorySegment PRIXFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llX");
        }
        return Holder.PRIXFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdPTR "ld"
     * }
     */
    public static MemorySegment PRIdPTR() {
        class Holder {
            static final MemorySegment PRIdPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiPTR "li"
     * }
     */
    public static MemorySegment PRIiPTR() {
        class Holder {
            static final MemorySegment PRIiPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoPTR "lo"
     * }
     */
    public static MemorySegment PRIoPTR() {
        class Holder {
            static final MemorySegment PRIoPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuPTR "lu"
     * }
     */
    public static MemorySegment PRIuPTR() {
        class Holder {
            static final MemorySegment PRIuPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxPTR "lx"
     * }
     */
    public static MemorySegment PRIxPTR() {
        class Holder {
            static final MemorySegment PRIxPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXPTR "lX"
     * }
     */
    public static MemorySegment PRIXPTR() {
        class Holder {
            static final MemorySegment PRIXPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdMAX "jd"
     * }
     */
    public static MemorySegment PRIdMAX() {
        class Holder {
            static final MemorySegment PRIdMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("jd");
        }
        return Holder.PRIdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiMAX "ji"
     * }
     */
    public static MemorySegment PRIiMAX() {
        class Holder {
            static final MemorySegment PRIiMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("ji");
        }
        return Holder.PRIiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoMAX "jo"
     * }
     */
    public static MemorySegment PRIoMAX() {
        class Holder {
            static final MemorySegment PRIoMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("jo");
        }
        return Holder.PRIoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuMAX "ju"
     * }
     */
    public static MemorySegment PRIuMAX() {
        class Holder {
            static final MemorySegment PRIuMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("ju");
        }
        return Holder.PRIuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxMAX "jx"
     * }
     */
    public static MemorySegment PRIxMAX() {
        class Holder {
            static final MemorySegment PRIxMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("jx");
        }
        return Holder.PRIxMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXMAX "jX"
     * }
     */
    public static MemorySegment PRIXMAX() {
        class Holder {
            static final MemorySegment PRIXMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("jX");
        }
        return Holder.PRIXMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd8 "hhd"
     * }
     */
    public static MemorySegment SCNd8() {
        class Holder {
            static final MemorySegment SCNd8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNd8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi8 "hhi"
     * }
     */
    public static MemorySegment SCNi8() {
        class Holder {
            static final MemorySegment SCNi8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNi8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo8 "hho"
     * }
     */
    public static MemorySegment SCNo8() {
        class Holder {
            static final MemorySegment SCNo8
                = Python_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNo8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu8 "hhu"
     * }
     */
    public static MemorySegment SCNu8() {
        class Holder {
            static final MemorySegment SCNu8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNu8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx8 "hhx"
     * }
     */
    public static MemorySegment SCNx8() {
        class Holder {
            static final MemorySegment SCNx8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNx8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd16 "hd"
     * }
     */
    public static MemorySegment SCNd16() {
        class Holder {
            static final MemorySegment SCNd16
                = Python_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNd16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi16 "hi"
     * }
     */
    public static MemorySegment SCNi16() {
        class Holder {
            static final MemorySegment SCNi16
                = Python_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNi16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo16 "ho"
     * }
     */
    public static MemorySegment SCNo16() {
        class Holder {
            static final MemorySegment SCNo16
                = Python_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNo16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu16 "hu"
     * }
     */
    public static MemorySegment SCNu16() {
        class Holder {
            static final MemorySegment SCNu16
                = Python_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNu16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx16 "hx"
     * }
     */
    public static MemorySegment SCNx16() {
        class Holder {
            static final MemorySegment SCNx16
                = Python_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNx16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd32 "d"
     * }
     */
    public static MemorySegment SCNd32() {
        class Holder {
            static final MemorySegment SCNd32
                = Python_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNd32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi32 "i"
     * }
     */
    public static MemorySegment SCNi32() {
        class Holder {
            static final MemorySegment SCNi32
                = Python_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNi32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo32 "o"
     * }
     */
    public static MemorySegment SCNo32() {
        class Holder {
            static final MemorySegment SCNo32
                = Python_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNo32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu32 "u"
     * }
     */
    public static MemorySegment SCNu32() {
        class Holder {
            static final MemorySegment SCNu32
                = Python_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNu32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx32 "x"
     * }
     */
    public static MemorySegment SCNx32() {
        class Holder {
            static final MemorySegment SCNx32
                = Python_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNx32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd64 "lld"
     * }
     */
    public static MemorySegment SCNd64() {
        class Holder {
            static final MemorySegment SCNd64
                = Python_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNd64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi64 "lli"
     * }
     */
    public static MemorySegment SCNi64() {
        class Holder {
            static final MemorySegment SCNi64
                = Python_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNi64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo64 "llo"
     * }
     */
    public static MemorySegment SCNo64() {
        class Holder {
            static final MemorySegment SCNo64
                = Python_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNo64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu64 "llu"
     * }
     */
    public static MemorySegment SCNu64() {
        class Holder {
            static final MemorySegment SCNu64
                = Python_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNu64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx64 "llx"
     * }
     */
    public static MemorySegment SCNx64() {
        class Holder {
            static final MemorySegment SCNx64
                = Python_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNx64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdLEAST8() {
        class Holder {
            static final MemorySegment SCNdLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiLEAST8() {
        class Holder {
            static final MemorySegment SCNiLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST8 "hho"
     * }
     */
    public static MemorySegment SCNoLEAST8() {
        class Holder {
            static final MemorySegment SCNoLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuLEAST8() {
        class Holder {
            static final MemorySegment SCNuLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxLEAST8() {
        class Holder {
            static final MemorySegment SCNxLEAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST16 "hd"
     * }
     */
    public static MemorySegment SCNdLEAST16() {
        class Holder {
            static final MemorySegment SCNdLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST16 "hi"
     * }
     */
    public static MemorySegment SCNiLEAST16() {
        class Holder {
            static final MemorySegment SCNiLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST16 "ho"
     * }
     */
    public static MemorySegment SCNoLEAST16() {
        class Holder {
            static final MemorySegment SCNoLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST16 "hu"
     * }
     */
    public static MemorySegment SCNuLEAST16() {
        class Holder {
            static final MemorySegment SCNuLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST16 "hx"
     * }
     */
    public static MemorySegment SCNxLEAST16() {
        class Holder {
            static final MemorySegment SCNxLEAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST32 "d"
     * }
     */
    public static MemorySegment SCNdLEAST32() {
        class Holder {
            static final MemorySegment SCNdLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST32 "i"
     * }
     */
    public static MemorySegment SCNiLEAST32() {
        class Holder {
            static final MemorySegment SCNiLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST32 "o"
     * }
     */
    public static MemorySegment SCNoLEAST32() {
        class Holder {
            static final MemorySegment SCNoLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST32 "u"
     * }
     */
    public static MemorySegment SCNuLEAST32() {
        class Holder {
            static final MemorySegment SCNuLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST32 "x"
     * }
     */
    public static MemorySegment SCNxLEAST32() {
        class Holder {
            static final MemorySegment SCNxLEAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST64 "lld"
     * }
     */
    public static MemorySegment SCNdLEAST64() {
        class Holder {
            static final MemorySegment SCNdLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST64 "lli"
     * }
     */
    public static MemorySegment SCNiLEAST64() {
        class Holder {
            static final MemorySegment SCNiLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST64 "llo"
     * }
     */
    public static MemorySegment SCNoLEAST64() {
        class Holder {
            static final MemorySegment SCNoLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST64 "llu"
     * }
     */
    public static MemorySegment SCNuLEAST64() {
        class Holder {
            static final MemorySegment SCNuLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST64 "llx"
     * }
     */
    public static MemorySegment SCNxLEAST64() {
        class Holder {
            static final MemorySegment SCNxLEAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdFAST8() {
        class Holder {
            static final MemorySegment SCNdFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiFAST8() {
        class Holder {
            static final MemorySegment SCNiFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST8 "hho"
     * }
     */
    public static MemorySegment SCNoFAST8() {
        class Holder {
            static final MemorySegment SCNoFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuFAST8() {
        class Holder {
            static final MemorySegment SCNuFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxFAST8() {
        class Holder {
            static final MemorySegment SCNxFAST8
                = Python_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST16 "hd"
     * }
     */
    public static MemorySegment SCNdFAST16() {
        class Holder {
            static final MemorySegment SCNdFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST16 "hi"
     * }
     */
    public static MemorySegment SCNiFAST16() {
        class Holder {
            static final MemorySegment SCNiFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST16 "ho"
     * }
     */
    public static MemorySegment SCNoFAST16() {
        class Holder {
            static final MemorySegment SCNoFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST16 "hu"
     * }
     */
    public static MemorySegment SCNuFAST16() {
        class Holder {
            static final MemorySegment SCNuFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST16 "hx"
     * }
     */
    public static MemorySegment SCNxFAST16() {
        class Holder {
            static final MemorySegment SCNxFAST16
                = Python_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST32 "d"
     * }
     */
    public static MemorySegment SCNdFAST32() {
        class Holder {
            static final MemorySegment SCNdFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST32 "i"
     * }
     */
    public static MemorySegment SCNiFAST32() {
        class Holder {
            static final MemorySegment SCNiFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST32 "o"
     * }
     */
    public static MemorySegment SCNoFAST32() {
        class Holder {
            static final MemorySegment SCNoFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST32 "u"
     * }
     */
    public static MemorySegment SCNuFAST32() {
        class Holder {
            static final MemorySegment SCNuFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST32 "x"
     * }
     */
    public static MemorySegment SCNxFAST32() {
        class Holder {
            static final MemorySegment SCNxFAST32
                = Python_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST64 "lld"
     * }
     */
    public static MemorySegment SCNdFAST64() {
        class Holder {
            static final MemorySegment SCNdFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("lld");
        }
        return Holder.SCNdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST64 "lli"
     * }
     */
    public static MemorySegment SCNiFAST64() {
        class Holder {
            static final MemorySegment SCNiFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("lli");
        }
        return Holder.SCNiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST64 "llo"
     * }
     */
    public static MemorySegment SCNoFAST64() {
        class Holder {
            static final MemorySegment SCNoFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llo");
        }
        return Holder.SCNoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST64 "llu"
     * }
     */
    public static MemorySegment SCNuFAST64() {
        class Holder {
            static final MemorySegment SCNuFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llu");
        }
        return Holder.SCNuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST64 "llx"
     * }
     */
    public static MemorySegment SCNxFAST64() {
        class Holder {
            static final MemorySegment SCNxFAST64
                = Python_h.LIBRARY_ARENA.allocateFrom("llx");
        }
        return Holder.SCNxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdPTR "ld"
     * }
     */
    public static MemorySegment SCNdPTR() {
        class Holder {
            static final MemorySegment SCNdPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiPTR "li"
     * }
     */
    public static MemorySegment SCNiPTR() {
        class Holder {
            static final MemorySegment SCNiPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoPTR "lo"
     * }
     */
    public static MemorySegment SCNoPTR() {
        class Holder {
            static final MemorySegment SCNoPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuPTR "lu"
     * }
     */
    public static MemorySegment SCNuPTR() {
        class Holder {
            static final MemorySegment SCNuPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxPTR "lx"
     * }
     */
    public static MemorySegment SCNxPTR() {
        class Holder {
            static final MemorySegment SCNxPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdMAX "jd"
     * }
     */
    public static MemorySegment SCNdMAX() {
        class Holder {
            static final MemorySegment SCNdMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("jd");
        }
        return Holder.SCNdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiMAX "ji"
     * }
     */
    public static MemorySegment SCNiMAX() {
        class Holder {
            static final MemorySegment SCNiMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("ji");
        }
        return Holder.SCNiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoMAX "jo"
     * }
     */
    public static MemorySegment SCNoMAX() {
        class Holder {
            static final MemorySegment SCNoMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("jo");
        }
        return Holder.SCNoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuMAX "ju"
     * }
     */
    public static MemorySegment SCNuMAX() {
        class Holder {
            static final MemorySegment SCNuMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("ju");
        }
        return Holder.SCNuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxMAX "jx"
     * }
     */
    public static MemorySegment SCNxMAX() {
        class Holder {
            static final MemorySegment SCNxMAX
                = Python_h.LIBRARY_ARENA.allocateFrom("jx");
        }
        return Holder.SCNxMAX;
    }
    private static final int MAC_OS_X_VERSION_10_0 = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_0 1000
     * }
     */
    public static int MAC_OS_X_VERSION_10_0() {
        return MAC_OS_X_VERSION_10_0;
    }
    private static final int MAC_OS_X_VERSION_10_1 = (int)1010L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_1 1010
     * }
     */
    public static int MAC_OS_X_VERSION_10_1() {
        return MAC_OS_X_VERSION_10_1;
    }
    private static final int MAC_OS_X_VERSION_10_2 = (int)1020L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_2 1020
     * }
     */
    public static int MAC_OS_X_VERSION_10_2() {
        return MAC_OS_X_VERSION_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_3 = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_3 1030
     * }
     */
    public static int MAC_OS_X_VERSION_10_3() {
        return MAC_OS_X_VERSION_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_4 = (int)1040L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_4 1040
     * }
     */
    public static int MAC_OS_X_VERSION_10_4() {
        return MAC_OS_X_VERSION_10_4;
    }
    private static final int MAC_OS_X_VERSION_10_5 = (int)1050L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_5 1050
     * }
     */
    public static int MAC_OS_X_VERSION_10_5() {
        return MAC_OS_X_VERSION_10_5;
    }
    private static final int MAC_OS_X_VERSION_10_6 = (int)1060L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_6 1060
     * }
     */
    public static int MAC_OS_X_VERSION_10_6() {
        return MAC_OS_X_VERSION_10_6;
    }
    private static final int MAC_OS_X_VERSION_10_7 = (int)1070L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_7 1070
     * }
     */
    public static int MAC_OS_X_VERSION_10_7() {
        return MAC_OS_X_VERSION_10_7;
    }
    private static final int MAC_OS_X_VERSION_10_8 = (int)1080L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_8 1080
     * }
     */
    public static int MAC_OS_X_VERSION_10_8() {
        return MAC_OS_X_VERSION_10_8;
    }
    private static final int MAC_OS_X_VERSION_10_9 = (int)1090L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_9 1090
     * }
     */
    public static int MAC_OS_X_VERSION_10_9() {
        return MAC_OS_X_VERSION_10_9;
    }
    private static final int MAC_OS_X_VERSION_10_10 = (int)101000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10 101000
     * }
     */
    public static int MAC_OS_X_VERSION_10_10() {
        return MAC_OS_X_VERSION_10_10;
    }
    private static final int MAC_OS_X_VERSION_10_10_2 = (int)101002L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_2 101002
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_2() {
        return MAC_OS_X_VERSION_10_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_10_3 = (int)101003L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_3 101003
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_3() {
        return MAC_OS_X_VERSION_10_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_11 = (int)101100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11 101100
     * }
     */
    public static int MAC_OS_X_VERSION_10_11() {
        return MAC_OS_X_VERSION_10_11;
    }
    private static final int MAC_OS_X_VERSION_10_11_2 = (int)101102L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_2 101102
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_2() {
        return MAC_OS_X_VERSION_10_11_2;
    }
    private static final int MAC_OS_X_VERSION_10_11_3 = (int)101103L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_3 101103
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_3() {
        return MAC_OS_X_VERSION_10_11_3;
    }
    private static final int MAC_OS_X_VERSION_10_11_4 = (int)101104L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_4 101104
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_4() {
        return MAC_OS_X_VERSION_10_11_4;
    }
    private static final int MAC_OS_X_VERSION_10_12 = (int)101200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12 101200
     * }
     */
    public static int MAC_OS_X_VERSION_10_12() {
        return MAC_OS_X_VERSION_10_12;
    }
    private static final int MAC_OS_X_VERSION_10_12_1 = (int)101201L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_1 101201
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_1() {
        return MAC_OS_X_VERSION_10_12_1;
    }
    private static final int MAC_OS_X_VERSION_10_12_2 = (int)101202L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_2 101202
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_2() {
        return MAC_OS_X_VERSION_10_12_2;
    }
    private static final int MAC_OS_X_VERSION_10_12_4 = (int)101204L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_4 101204
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_4() {
        return MAC_OS_X_VERSION_10_12_4;
    }
    private static final int MAC_OS_X_VERSION_10_13 = (int)101300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13 101300
     * }
     */
    public static int MAC_OS_X_VERSION_10_13() {
        return MAC_OS_X_VERSION_10_13;
    }
    private static final int MAC_OS_X_VERSION_10_13_1 = (int)101301L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_1 101301
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_1() {
        return MAC_OS_X_VERSION_10_13_1;
    }
    private static final int MAC_OS_X_VERSION_10_13_2 = (int)101302L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_2 101302
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_2() {
        return MAC_OS_X_VERSION_10_13_2;
    }
    private static final int MAC_OS_X_VERSION_10_13_4 = (int)101304L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_4 101304
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_4() {
        return MAC_OS_X_VERSION_10_13_4;
    }
    private static final int MAC_OS_X_VERSION_10_14 = (int)101400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14 101400
     * }
     */
    public static int MAC_OS_X_VERSION_10_14() {
        return MAC_OS_X_VERSION_10_14;
    }
    private static final int MAC_OS_X_VERSION_10_14_1 = (int)101401L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_1 101401
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_1() {
        return MAC_OS_X_VERSION_10_14_1;
    }
    private static final int MAC_OS_X_VERSION_10_14_4 = (int)101404L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_4 101404
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_4() {
        return MAC_OS_X_VERSION_10_14_4;
    }
    private static final int MAC_OS_X_VERSION_10_14_5 = (int)101405L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_5 101405
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_5() {
        return MAC_OS_X_VERSION_10_14_5;
    }
    private static final int MAC_OS_X_VERSION_10_14_6 = (int)101406L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_6 101406
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_6() {
        return MAC_OS_X_VERSION_10_14_6;
    }
    private static final int MAC_OS_X_VERSION_10_15 = (int)101500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15 101500
     * }
     */
    public static int MAC_OS_X_VERSION_10_15() {
        return MAC_OS_X_VERSION_10_15;
    }
    private static final int MAC_OS_X_VERSION_10_15_1 = (int)101501L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_1 101501
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_1() {
        return MAC_OS_X_VERSION_10_15_1;
    }
    private static final int MAC_OS_X_VERSION_10_15_4 = (int)101504L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_4 101504
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_4() {
        return MAC_OS_X_VERSION_10_15_4;
    }
    private static final int MAC_OS_X_VERSION_10_16 = (int)101600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_16 101600
     * }
     */
    public static int MAC_OS_X_VERSION_10_16() {
        return MAC_OS_X_VERSION_10_16;
    }
    private static final int MAC_OS_VERSION_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_0 110000
     * }
     */
    public static int MAC_OS_VERSION_11_0() {
        return MAC_OS_VERSION_11_0;
    }
    private static final int MAC_OS_VERSION_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_1 110100
     * }
     */
    public static int MAC_OS_VERSION_11_1() {
        return MAC_OS_VERSION_11_1;
    }
    private static final int MAC_OS_VERSION_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_3 110300
     * }
     */
    public static int MAC_OS_VERSION_11_3() {
        return MAC_OS_VERSION_11_3;
    }
    private static final int MAC_OS_VERSION_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_4 110400
     * }
     */
    public static int MAC_OS_VERSION_11_4() {
        return MAC_OS_VERSION_11_4;
    }
    private static final int MAC_OS_VERSION_11_5 = (int)110500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_5 110500
     * }
     */
    public static int MAC_OS_VERSION_11_5() {
        return MAC_OS_VERSION_11_5;
    }
    private static final int MAC_OS_VERSION_11_6 = (int)110600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_6 110600
     * }
     */
    public static int MAC_OS_VERSION_11_6() {
        return MAC_OS_VERSION_11_6;
    }
    private static final int MAC_OS_VERSION_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_0 120000
     * }
     */
    public static int MAC_OS_VERSION_12_0() {
        return MAC_OS_VERSION_12_0;
    }
    private static final int MAC_OS_VERSION_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_1 120100
     * }
     */
    public static int MAC_OS_VERSION_12_1() {
        return MAC_OS_VERSION_12_1;
    }
    private static final int MAC_OS_VERSION_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_2 120200
     * }
     */
    public static int MAC_OS_VERSION_12_2() {
        return MAC_OS_VERSION_12_2;
    }
    private static final int MAC_OS_VERSION_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_3 120300
     * }
     */
    public static int MAC_OS_VERSION_12_3() {
        return MAC_OS_VERSION_12_3;
    }
    private static final int MAC_OS_VERSION_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_4 120400
     * }
     */
    public static int MAC_OS_VERSION_12_4() {
        return MAC_OS_VERSION_12_4;
    }
    private static final int MAC_OS_VERSION_12_5 = (int)120500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_5 120500
     * }
     */
    public static int MAC_OS_VERSION_12_5() {
        return MAC_OS_VERSION_12_5;
    }
    private static final int MAC_OS_VERSION_12_6 = (int)120600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_6 120600
     * }
     */
    public static int MAC_OS_VERSION_12_6() {
        return MAC_OS_VERSION_12_6;
    }
    private static final int MAC_OS_VERSION_12_7 = (int)120700L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_7 120700
     * }
     */
    public static int MAC_OS_VERSION_12_7() {
        return MAC_OS_VERSION_12_7;
    }
    private static final int MAC_OS_VERSION_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_0 130000
     * }
     */
    public static int MAC_OS_VERSION_13_0() {
        return MAC_OS_VERSION_13_0;
    }
    private static final int MAC_OS_VERSION_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_1 130100
     * }
     */
    public static int MAC_OS_VERSION_13_1() {
        return MAC_OS_VERSION_13_1;
    }
    private static final int MAC_OS_VERSION_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_2 130200
     * }
     */
    public static int MAC_OS_VERSION_13_2() {
        return MAC_OS_VERSION_13_2;
    }
    private static final int MAC_OS_VERSION_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_3 130300
     * }
     */
    public static int MAC_OS_VERSION_13_3() {
        return MAC_OS_VERSION_13_3;
    }
    private static final int MAC_OS_VERSION_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_4 130400
     * }
     */
    public static int MAC_OS_VERSION_13_4() {
        return MAC_OS_VERSION_13_4;
    }
    private static final int MAC_OS_VERSION_13_5 = (int)130500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_5 130500
     * }
     */
    public static int MAC_OS_VERSION_13_5() {
        return MAC_OS_VERSION_13_5;
    }
    private static final int MAC_OS_VERSION_13_6 = (int)130600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_6 130600
     * }
     */
    public static int MAC_OS_VERSION_13_6() {
        return MAC_OS_VERSION_13_6;
    }
    private static final int MAC_OS_VERSION_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_0 140000
     * }
     */
    public static int MAC_OS_VERSION_14_0() {
        return MAC_OS_VERSION_14_0;
    }
    private static final int MAC_OS_VERSION_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_1 140100
     * }
     */
    public static int MAC_OS_VERSION_14_1() {
        return MAC_OS_VERSION_14_1;
    }
    private static final int MAC_OS_VERSION_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_2 140200
     * }
     */
    public static int MAC_OS_VERSION_14_2() {
        return MAC_OS_VERSION_14_2;
    }
    private static final int MAC_OS_VERSION_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_3 140300
     * }
     */
    public static int MAC_OS_VERSION_14_3() {
        return MAC_OS_VERSION_14_3;
    }
    private static final int MAC_OS_VERSION_14_4 = (int)140400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_4 140400
     * }
     */
    public static int MAC_OS_VERSION_14_4() {
        return MAC_OS_VERSION_14_4;
    }
    private static final int MAC_OS_VERSION_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_5 140500
     * }
     */
    public static int MAC_OS_VERSION_14_5() {
        return MAC_OS_VERSION_14_5;
    }
    private static final int MAC_OS_VERSION_15_0 = (int)150000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_15_0 150000
     * }
     */
    public static int MAC_OS_VERSION_15_0() {
        return MAC_OS_VERSION_15_0;
    }
    private static final int MAC_OS_VERSION_15_1 = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_15_1 150100
     * }
     */
    public static int MAC_OS_VERSION_15_1() {
        return MAC_OS_VERSION_15_1;
    }
    private static final int MAC_OS_VERSION_15_2 = (int)150200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_15_2 150200
     * }
     */
    public static int MAC_OS_VERSION_15_2() {
        return MAC_OS_VERSION_15_2;
    }
    private static final int __MAC_OS_X_VERSION_MAX_ALLOWED = (int)150200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_OS_X_VERSION_MAX_ALLOWED 150200
     * }
     */
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return __MAC_OS_X_VERSION_MAX_ALLOWED;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final int __DARWIN_WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MAX 2147483647
     * }
     */
    public static int __DARWIN_WCHAR_MAX() {
        return __DARWIN_WCHAR_MAX;
    }
    private static final int __DARWIN_WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MIN -2147483648
     * }
     */
    public static int __DARWIN_WCHAR_MIN() {
        return __DARWIN_WCHAR_MIN;
    }
    private static final int __DARWIN_WEOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WEOF -1
     * }
     */
    public static int __DARWIN_WEOF() {
        return __DARWIN_WEOF;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final int CLK_TCK = (int)100L;
    /**
     * {@snippet lang=c :
     * #define CLK_TCK 100
     * }
     */
    public static int CLK_TCK() {
        return CLK_TCK;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final long ULONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final long LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return LONG_MAX;
    }
    private static final long LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return LONG_MIN;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long SSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return SSIZE_MAX;
    }
    private static final long SIZE_T_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_T_MAX -1
     * }
     */
    public static long SIZE_T_MAX() {
        return SIZE_T_MAX;
    }
    private static final long UQUAD_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UQUAD_MAX -1
     * }
     */
    public static long UQUAD_MAX() {
        return UQUAD_MAX;
    }
    private static final long QUAD_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define QUAD_MAX 9223372036854775807
     * }
     */
    public static long QUAD_MAX() {
        return QUAD_MAX;
    }
    private static final long QUAD_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define QUAD_MIN -9223372036854775808
     * }
     */
    public static long QUAD_MIN() {
        return QUAD_MIN;
    }
    private static final int ARG_MAX = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define ARG_MAX 1048576
     * }
     */
    public static int ARG_MAX() {
        return ARG_MAX;
    }
    private static final int GID_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define GID_MAX 2147483647
     * }
     */
    public static int GID_MAX() {
        return GID_MAX;
    }
    private static final int UID_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define UID_MAX 2147483647
     * }
     */
    public static int UID_MAX() {
        return UID_MAX;
    }
    private static final int _POSIX_RE_DUP_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX_RE_DUP_MAX() {
        return _POSIX_RE_DUP_MAX;
    }
    private static final long OFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define OFF_MIN -9223372036854775808
     * }
     */
    public static long OFF_MIN() {
        return OFF_MIN;
    }
    private static final long OFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define OFF_MAX 9223372036854775807
     * }
     */
    public static long OFF_MAX() {
        return OFF_MAX;
    }
    private static final long LONG_LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_LONG_MAX() {
        return LONG_LONG_MAX;
    }
    private static final long LONG_LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_LONG_MIN() {
        return LONG_LONG_MIN;
    }
    private static final long ULONG_LONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_LONG_MAX -1
     * }
     */
    public static long ULONG_LONG_MAX() {
        return ULONG_LONG_MAX;
    }
    private static final double HUGE_VAL = Double.valueOf("Infinity");
    /**
     * {@snippet lang=c :
     * #define HUGE_VAL Infinity
     * }
     */
    public static double HUGE_VAL() {
        return HUGE_VAL;
    }
    private static final float HUGE_VALF = Float.valueOf("Infinity");
    /**
     * {@snippet lang=c :
     * #define HUGE_VALF Infinity
     * }
     */
    public static float HUGE_VALF() {
        return HUGE_VALF;
    }
    private static final float NAN = Float.valueOf("NaN");
    /**
     * {@snippet lang=c :
     * #define NAN NaN
     * }
     */
    public static float NAN() {
        return NAN;
    }
    private static final float INFINITY = Float.valueOf("Infinity");
    /**
     * {@snippet lang=c :
     * #define INFINITY Infinity
     * }
     */
    public static float INFINITY() {
        return INFINITY;
    }
    private static final int FP_ILOGB0 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define FP_ILOGB0 -2147483648
     * }
     */
    public static int FP_ILOGB0() {
        return FP_ILOGB0;
    }
    private static final int FP_ILOGBNAN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define FP_ILOGBNAN -2147483648
     * }
     */
    public static int FP_ILOGBNAN() {
        return FP_ILOGBNAN;
    }
    private static final double M_E = 2.718281828459045d;
    /**
     * {@snippet lang=c :
     * #define M_E 2.718281828459045
     * }
     */
    public static double M_E() {
        return M_E;
    }
    private static final double M_LOG2E = 1.4426950408889634d;
    /**
     * {@snippet lang=c :
     * #define M_LOG2E 1.4426950408889634
     * }
     */
    public static double M_LOG2E() {
        return M_LOG2E;
    }
    private static final double M_LOG10E = 0.4342944819032518d;
    /**
     * {@snippet lang=c :
     * #define M_LOG10E 0.4342944819032518
     * }
     */
    public static double M_LOG10E() {
        return M_LOG10E;
    }
    private static final double M_LN2 = 0.6931471805599453d;
    /**
     * {@snippet lang=c :
     * #define M_LN2 0.6931471805599453
     * }
     */
    public static double M_LN2() {
        return M_LN2;
    }
    private static final double M_LN10 = 2.302585092994046d;
    /**
     * {@snippet lang=c :
     * #define M_LN10 2.302585092994046
     * }
     */
    public static double M_LN10() {
        return M_LN10;
    }
    private static final double M_PI = 3.141592653589793d;
    /**
     * {@snippet lang=c :
     * #define M_PI 3.141592653589793
     * }
     */
    public static double M_PI() {
        return M_PI;
    }
    private static final double M_PI_2 = 1.5707963267948966d;
    /**
     * {@snippet lang=c :
     * #define M_PI_2 1.5707963267948966
     * }
     */
    public static double M_PI_2() {
        return M_PI_2;
    }
    private static final double M_PI_4 = 0.7853981633974483d;
    /**
     * {@snippet lang=c :
     * #define M_PI_4 0.7853981633974483
     * }
     */
    public static double M_PI_4() {
        return M_PI_4;
    }
    private static final double M_1_PI = 0.3183098861837907d;
    /**
     * {@snippet lang=c :
     * #define M_1_PI 0.3183098861837907
     * }
     */
    public static double M_1_PI() {
        return M_1_PI;
    }
    private static final double M_2_PI = 0.6366197723675814d;
    /**
     * {@snippet lang=c :
     * #define M_2_PI 0.6366197723675814
     * }
     */
    public static double M_2_PI() {
        return M_2_PI;
    }
    private static final double M_2_SQRTPI = 1.1283791670955126d;
    /**
     * {@snippet lang=c :
     * #define M_2_SQRTPI 1.1283791670955126
     * }
     */
    public static double M_2_SQRTPI() {
        return M_2_SQRTPI;
    }
    private static final double M_SQRT2 = 1.4142135623730951d;
    /**
     * {@snippet lang=c :
     * #define M_SQRT2 1.4142135623730951
     * }
     */
    public static double M_SQRT2() {
        return M_SQRT2;
    }
    private static final double M_SQRT1_2 = 0.7071067811865476d;
    /**
     * {@snippet lang=c :
     * #define M_SQRT1_2 0.7071067811865476
     * }
     */
    public static double M_SQRT1_2() {
        return M_SQRT1_2;
    }
    private static final float MAXFLOAT = 3.4028234663852886E38f;
    /**
     * {@snippet lang=c :
     * #define MAXFLOAT 3.4028234663852886E38
     * }
     */
    public static float MAXFLOAT() {
        return MAXFLOAT;
    }
    private static final int FP_SNAN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FP_SNAN 1
     * }
     */
    public static int FP_SNAN() {
        return FP_SNAN;
    }
    private static final int FP_QNAN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FP_QNAN 1
     * }
     */
    public static int FP_QNAN() {
        return FP_QNAN;
    }
    private static final float HUGE = 3.4028234663852886E38f;
    /**
     * {@snippet lang=c :
     * #define HUGE 3.4028234663852886E38
     * }
     */
    public static float HUGE() {
        return HUGE;
    }
    private static final double X_TLOSS = 1.414847550405688E16d;
    /**
     * {@snippet lang=c :
     * #define X_TLOSS 1.414847550405688E16
     * }
     */
    public static double X_TLOSS() {
        return X_TLOSS;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final long USER_ADDR_NULL = 0L;
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return USER_ADDR_NULL;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/var/tmp/"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = Python_h.LIBRARY_ARENA.allocateFrom("/var/tmp/");
        }
        return Holder.P_tmpdir;
    }
    private static final long CLOCKS_PER_SEC = 1000000L;
    /**
     * {@snippet lang=c :
     * #define CLOCKS_PER_SEC 1000000
     * }
     */
    public static long CLOCKS_PER_SEC() {
        return CLOCKS_PER_SEC;
    }
    private static final int CLOCK_REALTIME = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_REALTIME 0
     * }
     */
    public static int CLOCK_REALTIME() {
        return CLOCK_REALTIME;
    }
    private static final int CLOCK_MONOTONIC = (int)6L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_MONOTONIC 6
     * }
     */
    public static int CLOCK_MONOTONIC() {
        return CLOCK_MONOTONIC;
    }
    private static final int CLOCK_MONOTONIC_RAW = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_MONOTONIC_RAW 4
     * }
     */
    public static int CLOCK_MONOTONIC_RAW() {
        return CLOCK_MONOTONIC_RAW;
    }
    private static final int CLOCK_MONOTONIC_RAW_APPROX = (int)5L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_MONOTONIC_RAW_APPROX 5
     * }
     */
    public static int CLOCK_MONOTONIC_RAW_APPROX() {
        return CLOCK_MONOTONIC_RAW_APPROX;
    }
    private static final int CLOCK_UPTIME_RAW = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_UPTIME_RAW 8
     * }
     */
    public static int CLOCK_UPTIME_RAW() {
        return CLOCK_UPTIME_RAW;
    }
    private static final int CLOCK_UPTIME_RAW_APPROX = (int)9L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_UPTIME_RAW_APPROX 9
     * }
     */
    public static int CLOCK_UPTIME_RAW_APPROX() {
        return CLOCK_UPTIME_RAW_APPROX;
    }
    private static final int CLOCK_PROCESS_CPUTIME_ID = (int)12L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_PROCESS_CPUTIME_ID 12
     * }
     */
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return CLOCK_PROCESS_CPUTIME_ID;
    }
    private static final int CLOCK_THREAD_CPUTIME_ID = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CLOCK_THREAD_CPUTIME_ID 16
     * }
     */
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return CLOCK_THREAD_CPUTIME_ID;
    }
    private static final int WEOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define WEOF -1
     * }
     */
    public static int WEOF() {
        return WEOF;
    }
    private static final int _CACHED_RUNES = (int)256L;
    /**
     * {@snippet lang=c :
     * #define _CACHED_RUNES 256
     * }
     */
    public static int _CACHED_RUNES() {
        return _CACHED_RUNES;
    }
    private static final int _CRMASK = (int)-256L;
    /**
     * {@snippet lang=c :
     * #define _CRMASK -256
     * }
     */
    public static int _CRMASK() {
        return _CRMASK;
    }
    /**
     * {@snippet lang=c :
     * #define _RUNE_MAGIC_A "RuneMagA"
     * }
     */
    public static MemorySegment _RUNE_MAGIC_A() {
        class Holder {
            static final MemorySegment _RUNE_MAGIC_A
                = Python_h.LIBRARY_ARENA.allocateFrom("RuneMagA");
        }
        return Holder._RUNE_MAGIC_A;
    }
    private static final long _CTYPE_A = 256L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_A 256
     * }
     */
    public static long _CTYPE_A() {
        return _CTYPE_A;
    }
    private static final long _CTYPE_C = 512L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_C 512
     * }
     */
    public static long _CTYPE_C() {
        return _CTYPE_C;
    }
    private static final long _CTYPE_D = 1024L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_D 1024
     * }
     */
    public static long _CTYPE_D() {
        return _CTYPE_D;
    }
    private static final long _CTYPE_G = 2048L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_G 2048
     * }
     */
    public static long _CTYPE_G() {
        return _CTYPE_G;
    }
    private static final long _CTYPE_L = 4096L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_L 4096
     * }
     */
    public static long _CTYPE_L() {
        return _CTYPE_L;
    }
    private static final long _CTYPE_P = 8192L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_P 8192
     * }
     */
    public static long _CTYPE_P() {
        return _CTYPE_P;
    }
    private static final long _CTYPE_S = 16384L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_S 16384
     * }
     */
    public static long _CTYPE_S() {
        return _CTYPE_S;
    }
    private static final long _CTYPE_U = 32768L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_U 32768
     * }
     */
    public static long _CTYPE_U() {
        return _CTYPE_U;
    }
    private static final long _CTYPE_X = 65536L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_X 65536
     * }
     */
    public static long _CTYPE_X() {
        return _CTYPE_X;
    }
    private static final long _CTYPE_B = 131072L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_B 131072
     * }
     */
    public static long _CTYPE_B() {
        return _CTYPE_B;
    }
    private static final long _CTYPE_R = 262144L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_R 262144
     * }
     */
    public static long _CTYPE_R() {
        return _CTYPE_R;
    }
    private static final long _CTYPE_I = 524288L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_I 524288
     * }
     */
    public static long _CTYPE_I() {
        return _CTYPE_I;
    }
    private static final long _CTYPE_T = 1048576L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_T 1048576
     * }
     */
    public static long _CTYPE_T() {
        return _CTYPE_T;
    }
    private static final long _CTYPE_Q = 2097152L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_Q 2097152
     * }
     */
    public static long _CTYPE_Q() {
        return _CTYPE_Q;
    }
    private static final long _CTYPE_SW0 = 536870912L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_SW0 536870912
     * }
     */
    public static long _CTYPE_SW0() {
        return _CTYPE_SW0;
    }
    private static final long _CTYPE_SW1 = 1073741824L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_SW1 1073741824
     * }
     */
    public static long _CTYPE_SW1() {
        return _CTYPE_SW1;
    }
    private static final long _CTYPE_SW2 = 2147483648L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_SW2 2147483648
     * }
     */
    public static long _CTYPE_SW2() {
        return _CTYPE_SW2;
    }
    private static final long _CTYPE_SW3 = 3221225472L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_SW3 3221225472
     * }
     */
    public static long _CTYPE_SW3() {
        return _CTYPE_SW3;
    }
    private static final long _CTYPE_SWM = 3758096384L;
    /**
     * {@snippet lang=c :
     * #define _CTYPE_SWM 3758096384
     * }
     */
    public static long _CTYPE_SWM() {
        return _CTYPE_SWM;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int __DARWIN_BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_BYTE_ORDER 1234
     * }
     */
    public static int __DARWIN_BYTE_ORDER() {
        return __DARWIN_BYTE_ORDER;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long __DARWIN_NFDBITS = 32L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NFDBITS 32
     * }
     */
    public static long __DARWIN_NFDBITS() {
        return __DARWIN_NFDBITS;
    }
    private static final int NBBY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define NBBY 8
     * }
     */
    public static int NBBY() {
        return NBBY;
    }
    private static final long NFDBITS = 32L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 32
     * }
     */
    public static long NFDBITS() {
        return NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int EWOULDBLOCK = (int)35L;
    /**
     * {@snippet lang=c :
     * #define EWOULDBLOCK 35
     * }
     */
    public static int EWOULDBLOCK() {
        return EWOULDBLOCK;
    }
    private static final int NSIG = (int)32L;
    /**
     * {@snippet lang=c :
     * #define NSIG 32
     * }
     */
    public static int NSIG() {
        return NSIG;
    }
    private static final int SIGIOT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SIGIOT 6
     * }
     */
    public static int SIGIOT() {
        return SIGIOT;
    }
    private static final MemorySegment SIG_DFL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define SIG_DFL (void*) 0
     * }
     */
    public static MemorySegment SIG_DFL() {
        return SIG_DFL;
    }
    private static final MemorySegment SIG_IGN = MemorySegment.ofAddress(1L);
    /**
     * {@snippet lang=c :
     * #define SIG_IGN (void*) 1
     * }
     */
    public static MemorySegment SIG_IGN() {
        return SIG_IGN;
    }
    private static final MemorySegment SIG_HOLD = MemorySegment.ofAddress(5L);
    /**
     * {@snippet lang=c :
     * #define SIG_HOLD (void*) 5
     * }
     */
    public static MemorySegment SIG_HOLD() {
        return SIG_HOLD;
    }
    private static final MemorySegment SIG_ERR = MemorySegment.ofAddress(-1L);
    /**
     * {@snippet lang=c :
     * #define SIG_ERR (void*) -1
     * }
     */
    public static MemorySegment SIG_ERR() {
        return SIG_ERR;
    }
    private static final int SA_USERSPACE_MASK = (int)127L;
    /**
     * {@snippet lang=c :
     * #define SA_USERSPACE_MASK 127
     * }
     */
    public static int SA_USERSPACE_MASK() {
        return SA_USERSPACE_MASK;
    }
    private static final int SV_ONSTACK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SV_ONSTACK 1
     * }
     */
    public static int SV_ONSTACK() {
        return SV_ONSTACK;
    }
    private static final int SV_INTERRUPT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SV_INTERRUPT 2
     * }
     */
    public static int SV_INTERRUPT() {
        return SV_INTERRUPT;
    }
    private static final int SV_RESETHAND = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SV_RESETHAND 4
     * }
     */
    public static int SV_RESETHAND() {
        return SV_RESETHAND;
    }
    private static final int SV_NODEFER = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SV_NODEFER 16
     * }
     */
    public static int SV_NODEFER() {
        return SV_NODEFER;
    }
    private static final int SV_NOCLDSTOP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SV_NOCLDSTOP 8
     * }
     */
    public static int SV_NOCLDSTOP() {
        return SV_NOCLDSTOP;
    }
    private static final int SV_SIGINFO = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SV_SIGINFO 64
     * }
     */
    public static int SV_SIGINFO() {
        return SV_SIGINFO;
    }
    private static final MemorySegment BADSIG = MemorySegment.ofAddress(-1L);
    /**
     * {@snippet lang=c :
     * #define BADSIG (void*) -1
     * }
     */
    public static MemorySegment BADSIG() {
        return BADSIG;
    }
    private static final int PRIO_MIN = (int)-20L;
    /**
     * {@snippet lang=c :
     * #define PRIO_MIN -20
     * }
     */
    public static int PRIO_MIN() {
        return PRIO_MIN;
    }
    private static final int RUSAGE_CHILDREN = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define RUSAGE_CHILDREN -1
     * }
     */
    public static int RUSAGE_CHILDREN() {
        return RUSAGE_CHILDREN;
    }
    private static final int RUSAGE_INFO_CURRENT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define RUSAGE_INFO_CURRENT 6
     * }
     */
    public static int RUSAGE_INFO_CURRENT() {
        return RUSAGE_INFO_CURRENT;
    }
    private static final long RLIM_INFINITY = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RLIM_INFINITY 9223372036854775807
     * }
     */
    public static long RLIM_INFINITY() {
        return RLIM_INFINITY;
    }
    private static final long RLIM_SAVED_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RLIM_SAVED_MAX 9223372036854775807
     * }
     */
    public static long RLIM_SAVED_MAX() {
        return RLIM_SAVED_MAX;
    }
    private static final long RLIM_SAVED_CUR = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RLIM_SAVED_CUR 9223372036854775807
     * }
     */
    public static long RLIM_SAVED_CUR() {
        return RLIM_SAVED_CUR;
    }
    private static final int RLIMIT_RSS = (int)5L;
    /**
     * {@snippet lang=c :
     * #define RLIMIT_RSS 5
     * }
     */
    public static int RLIMIT_RSS() {
        return RLIMIT_RSS;
    }
    private static final int IOPOL_APPLICATION = (int)5L;
    /**
     * {@snippet lang=c :
     * #define IOPOL_APPLICATION 5
     * }
     */
    public static int IOPOL_APPLICATION() {
        return IOPOL_APPLICATION;
    }
    private static final int IOPOL_NORMAL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define IOPOL_NORMAL 1
     * }
     */
    public static int IOPOL_NORMAL() {
        return IOPOL_NORMAL;
    }
    private static final int WAIT_ANY = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define WAIT_ANY -1
     * }
     */
    public static int WAIT_ANY() {
        return WAIT_ANY;
    }
    private static final long _POSIX_VERSION = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_VERSION 200112
     * }
     */
    public static long _POSIX_VERSION() {
        return _POSIX_VERSION;
    }
    private static final long _POSIX2_VERSION = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_VERSION 200112
     * }
     */
    public static long _POSIX2_VERSION() {
        return _POSIX2_VERSION;
    }
    private static final byte _POSIX_VDISABLE = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_VDISABLE 255
     * }
     */
    public static byte _POSIX_VDISABLE() {
        return _POSIX_VDISABLE;
    }
    private static final int X_OK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define X_OK 1
     * }
     */
    public static int X_OK() {
        return X_OK;
    }
    private static final int W_OK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define W_OK 2
     * }
     */
    public static int W_OK() {
        return W_OK;
    }
    private static final int R_OK = (int)4L;
    /**
     * {@snippet lang=c :
     * #define R_OK 4
     * }
     */
    public static int R_OK() {
        return R_OK;
    }
    private static final int _READ_OK = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _READ_OK 512
     * }
     */
    public static int _READ_OK() {
        return _READ_OK;
    }
    private static final int _WRITE_OK = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define _WRITE_OK 1024
     * }
     */
    public static int _WRITE_OK() {
        return _WRITE_OK;
    }
    private static final int _EXECUTE_OK = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define _EXECUTE_OK 2048
     * }
     */
    public static int _EXECUTE_OK() {
        return _EXECUTE_OK;
    }
    private static final int _DELETE_OK = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define _DELETE_OK 4096
     * }
     */
    public static int _DELETE_OK() {
        return _DELETE_OK;
    }
    private static final int _APPEND_OK = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define _APPEND_OK 8192
     * }
     */
    public static int _APPEND_OK() {
        return _APPEND_OK;
    }
    private static final int _RMFILE_OK = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define _RMFILE_OK 16384
     * }
     */
    public static int _RMFILE_OK() {
        return _RMFILE_OK;
    }
    private static final int _RATTR_OK = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define _RATTR_OK 32768
     * }
     */
    public static int _RATTR_OK() {
        return _RATTR_OK;
    }
    private static final int _WATTR_OK = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define _WATTR_OK 65536
     * }
     */
    public static int _WATTR_OK() {
        return _WATTR_OK;
    }
    private static final int _REXT_OK = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define _REXT_OK 131072
     * }
     */
    public static int _REXT_OK() {
        return _REXT_OK;
    }
    private static final int _WEXT_OK = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define _WEXT_OK 262144
     * }
     */
    public static int _WEXT_OK() {
        return _WEXT_OK;
    }
    private static final int _RPERM_OK = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define _RPERM_OK 524288
     * }
     */
    public static int _RPERM_OK() {
        return _RPERM_OK;
    }
    private static final int _WPERM_OK = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define _WPERM_OK 1048576
     * }
     */
    public static int _WPERM_OK() {
        return _WPERM_OK;
    }
    private static final int _CHOWN_OK = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define _CHOWN_OK 2097152
     * }
     */
    public static int _CHOWN_OK() {
        return _CHOWN_OK;
    }
    private static final int _ACCESS_EXTENDED_MASK = (int)4193792L;
    /**
     * {@snippet lang=c :
     * #define _ACCESS_EXTENDED_MASK 4193792
     * }
     */
    public static int _ACCESS_EXTENDED_MASK() {
        return _ACCESS_EXTENDED_MASK;
    }
    private static final int L_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define L_SET 0
     * }
     */
    public static int L_SET() {
        return L_SET;
    }
    private static final int L_INCR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define L_INCR 1
     * }
     */
    public static int L_INCR() {
        return L_INCR;
    }
    private static final int L_XTND = (int)2L;
    /**
     * {@snippet lang=c :
     * #define L_XTND 2
     * }
     */
    public static int L_XTND() {
        return L_XTND;
    }
    private static final int ACCESSX_MAX_TABLESIZE = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define ACCESSX_MAX_TABLESIZE 16384
     * }
     */
    public static int ACCESSX_MAX_TABLESIZE() {
        return ACCESSX_MAX_TABLESIZE;
    }
    private static final int _POSIX_ADVISORY_INFO = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_ADVISORY_INFO -1
     * }
     */
    public static int _POSIX_ADVISORY_INFO() {
        return _POSIX_ADVISORY_INFO;
    }
    private static final int _POSIX_ASYNCHRONOUS_IO = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_ASYNCHRONOUS_IO -1
     * }
     */
    public static int _POSIX_ASYNCHRONOUS_IO() {
        return _POSIX_ASYNCHRONOUS_IO;
    }
    private static final int _POSIX_BARRIERS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_BARRIERS -1
     * }
     */
    public static int _POSIX_BARRIERS() {
        return _POSIX_BARRIERS;
    }
    private static final long _POSIX_CHOWN_RESTRICTED = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_CHOWN_RESTRICTED 200112
     * }
     */
    public static long _POSIX_CHOWN_RESTRICTED() {
        return _POSIX_CHOWN_RESTRICTED;
    }
    private static final int _POSIX_CLOCK_SELECTION = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_CLOCK_SELECTION -1
     * }
     */
    public static int _POSIX_CLOCK_SELECTION() {
        return _POSIX_CLOCK_SELECTION;
    }
    private static final int _POSIX_CPUTIME = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_CPUTIME -1
     * }
     */
    public static int _POSIX_CPUTIME() {
        return _POSIX_CPUTIME;
    }
    private static final long _POSIX_FSYNC = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_FSYNC 200112
     * }
     */
    public static long _POSIX_FSYNC() {
        return _POSIX_FSYNC;
    }
    private static final long _POSIX_IPV6 = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_IPV6 200112
     * }
     */
    public static long _POSIX_IPV6() {
        return _POSIX_IPV6;
    }
    private static final long _POSIX_JOB_CONTROL = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_JOB_CONTROL 200112
     * }
     */
    public static long _POSIX_JOB_CONTROL() {
        return _POSIX_JOB_CONTROL;
    }
    private static final long _POSIX_MAPPED_FILES = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MAPPED_FILES 200112
     * }
     */
    public static long _POSIX_MAPPED_FILES() {
        return _POSIX_MAPPED_FILES;
    }
    private static final int _POSIX_MEMLOCK = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MEMLOCK -1
     * }
     */
    public static int _POSIX_MEMLOCK() {
        return _POSIX_MEMLOCK;
    }
    private static final int _POSIX_MEMLOCK_RANGE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MEMLOCK_RANGE -1
     * }
     */
    public static int _POSIX_MEMLOCK_RANGE() {
        return _POSIX_MEMLOCK_RANGE;
    }
    private static final long _POSIX_MEMORY_PROTECTION = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MEMORY_PROTECTION 200112
     * }
     */
    public static long _POSIX_MEMORY_PROTECTION() {
        return _POSIX_MEMORY_PROTECTION;
    }
    private static final int _POSIX_MESSAGE_PASSING = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MESSAGE_PASSING -1
     * }
     */
    public static int _POSIX_MESSAGE_PASSING() {
        return _POSIX_MESSAGE_PASSING;
    }
    private static final int _POSIX_MONOTONIC_CLOCK = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_MONOTONIC_CLOCK -1
     * }
     */
    public static int _POSIX_MONOTONIC_CLOCK() {
        return _POSIX_MONOTONIC_CLOCK;
    }
    private static final long _POSIX_NO_TRUNC = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_NO_TRUNC 200112
     * }
     */
    public static long _POSIX_NO_TRUNC() {
        return _POSIX_NO_TRUNC;
    }
    private static final int _POSIX_PRIORITIZED_IO = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_PRIORITIZED_IO -1
     * }
     */
    public static int _POSIX_PRIORITIZED_IO() {
        return _POSIX_PRIORITIZED_IO;
    }
    private static final int _POSIX_PRIORITY_SCHEDULING = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_PRIORITY_SCHEDULING -1
     * }
     */
    public static int _POSIX_PRIORITY_SCHEDULING() {
        return _POSIX_PRIORITY_SCHEDULING;
    }
    private static final int _POSIX_RAW_SOCKETS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_RAW_SOCKETS -1
     * }
     */
    public static int _POSIX_RAW_SOCKETS() {
        return _POSIX_RAW_SOCKETS;
    }
    private static final long _POSIX_READER_WRITER_LOCKS = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_READER_WRITER_LOCKS 200112
     * }
     */
    public static long _POSIX_READER_WRITER_LOCKS() {
        return _POSIX_READER_WRITER_LOCKS;
    }
    private static final int _POSIX_REALTIME_SIGNALS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_REALTIME_SIGNALS -1
     * }
     */
    public static int _POSIX_REALTIME_SIGNALS() {
        return _POSIX_REALTIME_SIGNALS;
    }
    private static final long _POSIX_REGEXP = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_REGEXP 200112
     * }
     */
    public static long _POSIX_REGEXP() {
        return _POSIX_REGEXP;
    }
    private static final long _POSIX_SAVED_IDS = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SAVED_IDS 200112
     * }
     */
    public static long _POSIX_SAVED_IDS() {
        return _POSIX_SAVED_IDS;
    }
    private static final int _POSIX_SEMAPHORES = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SEMAPHORES -1
     * }
     */
    public static int _POSIX_SEMAPHORES() {
        return _POSIX_SEMAPHORES;
    }
    private static final int _POSIX_SHARED_MEMORY_OBJECTS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SHARED_MEMORY_OBJECTS -1
     * }
     */
    public static int _POSIX_SHARED_MEMORY_OBJECTS() {
        return _POSIX_SHARED_MEMORY_OBJECTS;
    }
    private static final long _POSIX_SHELL = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SHELL 200112
     * }
     */
    public static long _POSIX_SHELL() {
        return _POSIX_SHELL;
    }
    private static final long _POSIX_SPAWN = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SPAWN 200112
     * }
     */
    public static long _POSIX_SPAWN() {
        return _POSIX_SPAWN;
    }
    private static final int _POSIX_SPIN_LOCKS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SPIN_LOCKS -1
     * }
     */
    public static int _POSIX_SPIN_LOCKS() {
        return _POSIX_SPIN_LOCKS;
    }
    private static final int _POSIX_SPORADIC_SERVER = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SPORADIC_SERVER -1
     * }
     */
    public static int _POSIX_SPORADIC_SERVER() {
        return _POSIX_SPORADIC_SERVER;
    }
    private static final int _POSIX_SYNCHRONIZED_IO = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SYNCHRONIZED_IO -1
     * }
     */
    public static int _POSIX_SYNCHRONIZED_IO() {
        return _POSIX_SYNCHRONIZED_IO;
    }
    private static final long _POSIX_THREAD_ATTR_STACKADDR = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_ATTR_STACKADDR 200112
     * }
     */
    public static long _POSIX_THREAD_ATTR_STACKADDR() {
        return _POSIX_THREAD_ATTR_STACKADDR;
    }
    private static final long _POSIX_THREAD_ATTR_STACKSIZE = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_ATTR_STACKSIZE 200112
     * }
     */
    public static long _POSIX_THREAD_ATTR_STACKSIZE() {
        return _POSIX_THREAD_ATTR_STACKSIZE;
    }
    private static final int _POSIX_THREAD_CPUTIME = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_CPUTIME -1
     * }
     */
    public static int _POSIX_THREAD_CPUTIME() {
        return _POSIX_THREAD_CPUTIME;
    }
    private static final int _POSIX_THREAD_PRIO_INHERIT = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_PRIO_INHERIT -1
     * }
     */
    public static int _POSIX_THREAD_PRIO_INHERIT() {
        return _POSIX_THREAD_PRIO_INHERIT;
    }
    private static final int _POSIX_THREAD_PRIO_PROTECT = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_PRIO_PROTECT -1
     * }
     */
    public static int _POSIX_THREAD_PRIO_PROTECT() {
        return _POSIX_THREAD_PRIO_PROTECT;
    }
    private static final int _POSIX_THREAD_PRIORITY_SCHEDULING = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_PRIORITY_SCHEDULING -1
     * }
     */
    public static int _POSIX_THREAD_PRIORITY_SCHEDULING() {
        return _POSIX_THREAD_PRIORITY_SCHEDULING;
    }
    private static final long _POSIX_THREAD_PROCESS_SHARED = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_PROCESS_SHARED 200112
     * }
     */
    public static long _POSIX_THREAD_PROCESS_SHARED() {
        return _POSIX_THREAD_PROCESS_SHARED;
    }
    private static final long _POSIX_THREAD_SAFE_FUNCTIONS = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_SAFE_FUNCTIONS 200112
     * }
     */
    public static long _POSIX_THREAD_SAFE_FUNCTIONS() {
        return _POSIX_THREAD_SAFE_FUNCTIONS;
    }
    private static final int _POSIX_THREAD_SPORADIC_SERVER = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREAD_SPORADIC_SERVER -1
     * }
     */
    public static int _POSIX_THREAD_SPORADIC_SERVER() {
        return _POSIX_THREAD_SPORADIC_SERVER;
    }
    private static final long _POSIX_THREADS = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_THREADS 200112
     * }
     */
    public static long _POSIX_THREADS() {
        return _POSIX_THREADS;
    }
    private static final int _POSIX_TIMEOUTS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TIMEOUTS -1
     * }
     */
    public static int _POSIX_TIMEOUTS() {
        return _POSIX_TIMEOUTS;
    }
    private static final int _POSIX_TIMERS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TIMERS -1
     * }
     */
    public static int _POSIX_TIMERS() {
        return _POSIX_TIMERS;
    }
    private static final int _POSIX_TRACE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TRACE -1
     * }
     */
    public static int _POSIX_TRACE() {
        return _POSIX_TRACE;
    }
    private static final int _POSIX_TRACE_EVENT_FILTER = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TRACE_EVENT_FILTER -1
     * }
     */
    public static int _POSIX_TRACE_EVENT_FILTER() {
        return _POSIX_TRACE_EVENT_FILTER;
    }
    private static final int _POSIX_TRACE_INHERIT = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TRACE_INHERIT -1
     * }
     */
    public static int _POSIX_TRACE_INHERIT() {
        return _POSIX_TRACE_INHERIT;
    }
    private static final int _POSIX_TRACE_LOG = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TRACE_LOG -1
     * }
     */
    public static int _POSIX_TRACE_LOG() {
        return _POSIX_TRACE_LOG;
    }
    private static final int _POSIX_TYPED_MEMORY_OBJECTS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_TYPED_MEMORY_OBJECTS -1
     * }
     */
    public static int _POSIX_TYPED_MEMORY_OBJECTS() {
        return _POSIX_TYPED_MEMORY_OBJECTS;
    }
    private static final long _POSIX2_C_BIND = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_C_BIND 200112
     * }
     */
    public static long _POSIX2_C_BIND() {
        return _POSIX2_C_BIND;
    }
    private static final long _POSIX2_C_DEV = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_C_DEV 200112
     * }
     */
    public static long _POSIX2_C_DEV() {
        return _POSIX2_C_DEV;
    }
    private static final long _POSIX2_CHAR_TERM = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_CHAR_TERM 200112
     * }
     */
    public static long _POSIX2_CHAR_TERM() {
        return _POSIX2_CHAR_TERM;
    }
    private static final int _POSIX2_FORT_DEV = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_FORT_DEV -1
     * }
     */
    public static int _POSIX2_FORT_DEV() {
        return _POSIX2_FORT_DEV;
    }
    private static final long _POSIX2_FORT_RUN = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_FORT_RUN 200112
     * }
     */
    public static long _POSIX2_FORT_RUN() {
        return _POSIX2_FORT_RUN;
    }
    private static final long _POSIX2_LOCALEDEF = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_LOCALEDEF 200112
     * }
     */
    public static long _POSIX2_LOCALEDEF() {
        return _POSIX2_LOCALEDEF;
    }
    private static final int _POSIX2_PBS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_PBS -1
     * }
     */
    public static int _POSIX2_PBS() {
        return _POSIX2_PBS;
    }
    private static final int _POSIX2_PBS_ACCOUNTING = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_PBS_ACCOUNTING -1
     * }
     */
    public static int _POSIX2_PBS_ACCOUNTING() {
        return _POSIX2_PBS_ACCOUNTING;
    }
    private static final int _POSIX2_PBS_CHECKPOINT = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_PBS_CHECKPOINT -1
     * }
     */
    public static int _POSIX2_PBS_CHECKPOINT() {
        return _POSIX2_PBS_CHECKPOINT;
    }
    private static final int _POSIX2_PBS_LOCATE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_PBS_LOCATE -1
     * }
     */
    public static int _POSIX2_PBS_LOCATE() {
        return _POSIX2_PBS_LOCATE;
    }
    private static final int _POSIX2_PBS_MESSAGE = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_PBS_MESSAGE -1
     * }
     */
    public static int _POSIX2_PBS_MESSAGE() {
        return _POSIX2_PBS_MESSAGE;
    }
    private static final int _POSIX2_PBS_TRACK = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_PBS_TRACK -1
     * }
     */
    public static int _POSIX2_PBS_TRACK() {
        return _POSIX2_PBS_TRACK;
    }
    private static final long _POSIX2_SW_DEV = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_SW_DEV 200112
     * }
     */
    public static long _POSIX2_SW_DEV() {
        return _POSIX2_SW_DEV;
    }
    private static final long _POSIX2_UPE = 200112L;
    /**
     * {@snippet lang=c :
     * #define _POSIX2_UPE 200112
     * }
     */
    public static long _POSIX2_UPE() {
        return _POSIX2_UPE;
    }
    private static final int __ILP32_OFF32 = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define __ILP32_OFF32 -1
     * }
     */
    public static int __ILP32_OFF32() {
        return __ILP32_OFF32;
    }
    private static final int __ILP32_OFFBIG = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define __ILP32_OFFBIG -1
     * }
     */
    public static int __ILP32_OFFBIG() {
        return __ILP32_OFFBIG;
    }
    private static final int __LP64_OFF64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __LP64_OFF64 1
     * }
     */
    public static int __LP64_OFF64() {
        return __LP64_OFF64;
    }
    private static final int __LPBIG_OFFBIG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __LPBIG_OFFBIG 1
     * }
     */
    public static int __LPBIG_OFFBIG() {
        return __LPBIG_OFFBIG;
    }
    private static final int _POSIX_V6_ILP32_OFF32 = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_V6_ILP32_OFF32 -1
     * }
     */
    public static int _POSIX_V6_ILP32_OFF32() {
        return _POSIX_V6_ILP32_OFF32;
    }
    private static final int _POSIX_V6_ILP32_OFFBIG = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_V6_ILP32_OFFBIG -1
     * }
     */
    public static int _POSIX_V6_ILP32_OFFBIG() {
        return _POSIX_V6_ILP32_OFFBIG;
    }
    private static final int _POSIX_V6_LP64_OFF64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_V6_LP64_OFF64 1
     * }
     */
    public static int _POSIX_V6_LP64_OFF64() {
        return _POSIX_V6_LP64_OFF64;
    }
    private static final int _POSIX_V6_LPBIG_OFFBIG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_V6_LPBIG_OFFBIG 1
     * }
     */
    public static int _POSIX_V6_LPBIG_OFFBIG() {
        return _POSIX_V6_LPBIG_OFFBIG;
    }
    private static final int _POSIX_V7_ILP32_OFF32 = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_V7_ILP32_OFF32 -1
     * }
     */
    public static int _POSIX_V7_ILP32_OFF32() {
        return _POSIX_V7_ILP32_OFF32;
    }
    private static final int _POSIX_V7_ILP32_OFFBIG = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_V7_ILP32_OFFBIG -1
     * }
     */
    public static int _POSIX_V7_ILP32_OFFBIG() {
        return _POSIX_V7_ILP32_OFFBIG;
    }
    private static final int _POSIX_V7_LP64_OFF64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_V7_LP64_OFF64 1
     * }
     */
    public static int _POSIX_V7_LP64_OFF64() {
        return _POSIX_V7_LP64_OFF64;
    }
    private static final int _POSIX_V7_LPBIG_OFFBIG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_V7_LPBIG_OFFBIG 1
     * }
     */
    public static int _POSIX_V7_LPBIG_OFFBIG() {
        return _POSIX_V7_LPBIG_OFFBIG;
    }
    private static final int _V6_ILP32_OFF32 = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _V6_ILP32_OFF32 -1
     * }
     */
    public static int _V6_ILP32_OFF32() {
        return _V6_ILP32_OFF32;
    }
    private static final int _V6_ILP32_OFFBIG = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _V6_ILP32_OFFBIG -1
     * }
     */
    public static int _V6_ILP32_OFFBIG() {
        return _V6_ILP32_OFFBIG;
    }
    private static final int _V6_LP64_OFF64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _V6_LP64_OFF64 1
     * }
     */
    public static int _V6_LP64_OFF64() {
        return _V6_LP64_OFF64;
    }
    private static final int _V6_LPBIG_OFFBIG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _V6_LPBIG_OFFBIG 1
     * }
     */
    public static int _V6_LPBIG_OFFBIG() {
        return _V6_LPBIG_OFFBIG;
    }
    private static final int _XBS5_ILP32_OFF32 = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _XBS5_ILP32_OFF32 -1
     * }
     */
    public static int _XBS5_ILP32_OFF32() {
        return _XBS5_ILP32_OFF32;
    }
    private static final int _XBS5_ILP32_OFFBIG = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _XBS5_ILP32_OFFBIG -1
     * }
     */
    public static int _XBS5_ILP32_OFFBIG() {
        return _XBS5_ILP32_OFFBIG;
    }
    private static final int _XBS5_LP64_OFF64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _XBS5_LP64_OFF64 1
     * }
     */
    public static int _XBS5_LP64_OFF64() {
        return _XBS5_LP64_OFF64;
    }
    private static final int _XBS5_LPBIG_OFFBIG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _XBS5_LPBIG_OFFBIG 1
     * }
     */
    public static int _XBS5_LPBIG_OFFBIG() {
        return _XBS5_LPBIG_OFFBIG;
    }
    private static final int _XOPEN_CRYPT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _XOPEN_CRYPT 1
     * }
     */
    public static int _XOPEN_CRYPT() {
        return _XOPEN_CRYPT;
    }
    private static final int _XOPEN_ENH_I18N = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _XOPEN_ENH_I18N 1
     * }
     */
    public static int _XOPEN_ENH_I18N() {
        return _XOPEN_ENH_I18N;
    }
    private static final int _XOPEN_LEGACY = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _XOPEN_LEGACY -1
     * }
     */
    public static int _XOPEN_LEGACY() {
        return _XOPEN_LEGACY;
    }
    private static final int _XOPEN_REALTIME = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _XOPEN_REALTIME -1
     * }
     */
    public static int _XOPEN_REALTIME() {
        return _XOPEN_REALTIME;
    }
    private static final int _XOPEN_REALTIME_THREADS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _XOPEN_REALTIME_THREADS -1
     * }
     */
    public static int _XOPEN_REALTIME_THREADS() {
        return _XOPEN_REALTIME_THREADS;
    }
    private static final int _XOPEN_SHM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _XOPEN_SHM 1
     * }
     */
    public static int _XOPEN_SHM() {
        return _XOPEN_SHM;
    }
    private static final int _XOPEN_STREAMS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define _XOPEN_STREAMS -1
     * }
     */
    public static int _XOPEN_STREAMS() {
        return _XOPEN_STREAMS;
    }
    private static final int _XOPEN_UNIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _XOPEN_UNIX 1
     * }
     */
    public static int _XOPEN_UNIX() {
        return _XOPEN_UNIX;
    }
    private static final int _SC_PAGE_SIZE = (int)29L;
    /**
     * {@snippet lang=c :
     * #define _SC_PAGE_SIZE 29
     * }
     */
    public static int _SC_PAGE_SIZE() {
        return _SC_PAGE_SIZE;
    }
    private static final MemorySegment _Py_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define _Py_NULL (void*) 0
     * }
     */
    public static MemorySegment _Py_NULL() {
        return _Py_NULL;
    }
    private static final long PY_LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PY_LLONG_MIN -9223372036854775808
     * }
     */
    public static long PY_LLONG_MIN() {
        return PY_LLONG_MIN;
    }
    private static final long PY_LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PY_LLONG_MAX 9223372036854775807
     * }
     */
    public static long PY_LLONG_MAX() {
        return PY_LLONG_MAX;
    }
    private static final long PY_ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define PY_ULLONG_MAX -1
     * }
     */
    public static long PY_ULLONG_MAX() {
        return PY_ULLONG_MAX;
    }
    private static final long PY_SSIZE_T_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PY_SSIZE_T_MAX 9223372036854775807
     * }
     */
    public static long PY_SSIZE_T_MAX() {
        return PY_SSIZE_T_MAX;
    }
    private static final long PY_SSIZE_T_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PY_SSIZE_T_MIN -9223372036854775808
     * }
     */
    public static long PY_SSIZE_T_MIN() {
        return PY_SSIZE_T_MIN;
    }
    private static final int SIZEOF_PY_HASH_T = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SIZEOF_PY_HASH_T 8
     * }
     */
    public static int SIZEOF_PY_HASH_T() {
        return SIZEOF_PY_HASH_T;
    }
    private static final int SIZEOF_PY_UHASH_T = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SIZEOF_PY_UHASH_T 8
     * }
     */
    public static int SIZEOF_PY_UHASH_T() {
        return SIZEOF_PY_UHASH_T;
    }
    private static final long PY_SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define PY_SIZE_MAX -1
     * }
     */
    public static long PY_SIZE_MAX() {
        return PY_SIZE_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define PY_FORMAT_SIZE_T "z"
     * }
     */
    public static MemorySegment PY_FORMAT_SIZE_T() {
        class Holder {
            static final MemorySegment PY_FORMAT_SIZE_T
                = Python_h.LIBRARY_ARENA.allocateFrom("z");
        }
        return Holder.PY_FORMAT_SIZE_T;
    }
    private static final int PY_DWORD_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define PY_DWORD_MAX 4294967295
     * }
     */
    public static int PY_DWORD_MAX() {
        return PY_DWORD_MAX;
    }
    private static final double Py_MATH_PI = 3.141592653589793d;
    /**
     * {@snippet lang=c :
     * #define Py_MATH_PI 3.141592653589793
     * }
     */
    public static double Py_MATH_PI() {
        return Py_MATH_PI;
    }
    private static final double Py_MATH_E = 2.718281828459045d;
    /**
     * {@snippet lang=c :
     * #define Py_MATH_E 2.718281828459045
     * }
     */
    public static double Py_MATH_E() {
        return Py_MATH_E;
    }
    private static final double Py_INFINITY = Double.valueOf("Infinity");
    /**
     * {@snippet lang=c :
     * #define Py_INFINITY Infinity
     * }
     */
    public static double Py_INFINITY() {
        return Py_INFINITY;
    }
    private static final double Py_HUGE_VAL = Double.valueOf("Infinity");
    /**
     * {@snippet lang=c :
     * #define Py_HUGE_VAL Infinity
     * }
     */
    public static double Py_HUGE_VAL() {
        return Py_HUGE_VAL;
    }
    private static final double Py_NAN = Double.valueOf("NaN");
    /**
     * {@snippet lang=c :
     * #define Py_NAN NaN
     * }
     */
    public static double Py_NAN() {
        return Py_NAN;
    }
    private static final int PyBUF_WRITEABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_WRITEABLE 1
     * }
     */
    public static int PyBUF_WRITEABLE() {
        return PyBUF_WRITEABLE;
    }
    private static final int PyBUF_STRIDES = (int)24L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_STRIDES 24
     * }
     */
    public static int PyBUF_STRIDES() {
        return PyBUF_STRIDES;
    }
    private static final int PyBUF_C_CONTIGUOUS = (int)56L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_C_CONTIGUOUS 56
     * }
     */
    public static int PyBUF_C_CONTIGUOUS() {
        return PyBUF_C_CONTIGUOUS;
    }
    private static final int PyBUF_F_CONTIGUOUS = (int)88L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_F_CONTIGUOUS 88
     * }
     */
    public static int PyBUF_F_CONTIGUOUS() {
        return PyBUF_F_CONTIGUOUS;
    }
    private static final int PyBUF_ANY_CONTIGUOUS = (int)152L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_ANY_CONTIGUOUS 152
     * }
     */
    public static int PyBUF_ANY_CONTIGUOUS() {
        return PyBUF_ANY_CONTIGUOUS;
    }
    private static final int PyBUF_INDIRECT = (int)280L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_INDIRECT 280
     * }
     */
    public static int PyBUF_INDIRECT() {
        return PyBUF_INDIRECT;
    }
    private static final int PyBUF_CONTIG = (int)9L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_CONTIG 9
     * }
     */
    public static int PyBUF_CONTIG() {
        return PyBUF_CONTIG;
    }
    private static final int PyBUF_CONTIG_RO = (int)8L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_CONTIG_RO 8
     * }
     */
    public static int PyBUF_CONTIG_RO() {
        return PyBUF_CONTIG_RO;
    }
    private static final int PyBUF_STRIDED = (int)25L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_STRIDED 25
     * }
     */
    public static int PyBUF_STRIDED() {
        return PyBUF_STRIDED;
    }
    private static final int PyBUF_STRIDED_RO = (int)24L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_STRIDED_RO 24
     * }
     */
    public static int PyBUF_STRIDED_RO() {
        return PyBUF_STRIDED_RO;
    }
    private static final int PyBUF_RECORDS = (int)29L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_RECORDS 29
     * }
     */
    public static int PyBUF_RECORDS() {
        return PyBUF_RECORDS;
    }
    private static final int PyBUF_RECORDS_RO = (int)28L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_RECORDS_RO 28
     * }
     */
    public static int PyBUF_RECORDS_RO() {
        return PyBUF_RECORDS_RO;
    }
    private static final int PyBUF_FULL = (int)285L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_FULL 285
     * }
     */
    public static int PyBUF_FULL() {
        return PyBUF_FULL;
    }
    private static final int PyBUF_FULL_RO = (int)284L;
    /**
     * {@snippet lang=c :
     * #define PyBUF_FULL_RO 284
     * }
     */
    public static int PyBUF_FULL_RO() {
        return PyBUF_FULL_RO;
    }
    private static final long _Py_IMMORTAL_REFCNT = 4294967295L;
    /**
     * {@snippet lang=c :
     * #define _Py_IMMORTAL_REFCNT 4294967295
     * }
     */
    public static long _Py_IMMORTAL_REFCNT() {
        return _Py_IMMORTAL_REFCNT;
    }
    private static final long Py_INVALID_SIZE = -1L;
    /**
     * {@snippet lang=c :
     * #define Py_INVALID_SIZE -1
     * }
     */
    public static long Py_INVALID_SIZE() {
        return Py_INVALID_SIZE;
    }
    private static final int _Py_TPFLAGS_STATIC_BUILTIN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _Py_TPFLAGS_STATIC_BUILTIN 2
     * }
     */
    public static int _Py_TPFLAGS_STATIC_BUILTIN() {
        return _Py_TPFLAGS_STATIC_BUILTIN;
    }
    private static final int Py_TPFLAGS_INLINE_VALUES = (int)4L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_INLINE_VALUES 4
     * }
     */
    public static int Py_TPFLAGS_INLINE_VALUES() {
        return Py_TPFLAGS_INLINE_VALUES;
    }
    private static final int Py_TPFLAGS_MANAGED_WEAKREF = (int)8L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_MANAGED_WEAKREF 8
     * }
     */
    public static int Py_TPFLAGS_MANAGED_WEAKREF() {
        return Py_TPFLAGS_MANAGED_WEAKREF;
    }
    private static final int Py_TPFLAGS_MANAGED_DICT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_MANAGED_DICT 16
     * }
     */
    public static int Py_TPFLAGS_MANAGED_DICT() {
        return Py_TPFLAGS_MANAGED_DICT;
    }
    private static final int Py_TPFLAGS_PREHEADER = (int)24L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_PREHEADER 24
     * }
     */
    public static int Py_TPFLAGS_PREHEADER() {
        return Py_TPFLAGS_PREHEADER;
    }
    private static final int Py_TPFLAGS_SEQUENCE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_SEQUENCE 32
     * }
     */
    public static int Py_TPFLAGS_SEQUENCE() {
        return Py_TPFLAGS_SEQUENCE;
    }
    private static final int Py_TPFLAGS_MAPPING = (int)64L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_MAPPING 64
     * }
     */
    public static int Py_TPFLAGS_MAPPING() {
        return Py_TPFLAGS_MAPPING;
    }
    private static final long Py_TPFLAGS_DISALLOW_INSTANTIATION = 128L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_DISALLOW_INSTANTIATION 128
     * }
     */
    public static long Py_TPFLAGS_DISALLOW_INSTANTIATION() {
        return Py_TPFLAGS_DISALLOW_INSTANTIATION;
    }
    private static final long Py_TPFLAGS_IMMUTABLETYPE = 256L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_IMMUTABLETYPE 256
     * }
     */
    public static long Py_TPFLAGS_IMMUTABLETYPE() {
        return Py_TPFLAGS_IMMUTABLETYPE;
    }
    private static final long Py_TPFLAGS_HEAPTYPE = 512L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_HEAPTYPE 512
     * }
     */
    public static long Py_TPFLAGS_HEAPTYPE() {
        return Py_TPFLAGS_HEAPTYPE;
    }
    private static final long Py_TPFLAGS_BASETYPE = 1024L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_BASETYPE 1024
     * }
     */
    public static long Py_TPFLAGS_BASETYPE() {
        return Py_TPFLAGS_BASETYPE;
    }
    private static final long Py_TPFLAGS_HAVE_VECTORCALL = 2048L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_HAVE_VECTORCALL 2048
     * }
     */
    public static long Py_TPFLAGS_HAVE_VECTORCALL() {
        return Py_TPFLAGS_HAVE_VECTORCALL;
    }
    private static final long _Py_TPFLAGS_HAVE_VECTORCALL = 2048L;
    /**
     * {@snippet lang=c :
     * #define _Py_TPFLAGS_HAVE_VECTORCALL 2048
     * }
     */
    public static long _Py_TPFLAGS_HAVE_VECTORCALL() {
        return _Py_TPFLAGS_HAVE_VECTORCALL;
    }
    private static final long Py_TPFLAGS_READY = 4096L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_READY 4096
     * }
     */
    public static long Py_TPFLAGS_READY() {
        return Py_TPFLAGS_READY;
    }
    private static final long Py_TPFLAGS_READYING = 8192L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_READYING 8192
     * }
     */
    public static long Py_TPFLAGS_READYING() {
        return Py_TPFLAGS_READYING;
    }
    private static final long Py_TPFLAGS_HAVE_GC = 16384L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_HAVE_GC 16384
     * }
     */
    public static long Py_TPFLAGS_HAVE_GC() {
        return Py_TPFLAGS_HAVE_GC;
    }
    private static final long Py_TPFLAGS_METHOD_DESCRIPTOR = 131072L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_METHOD_DESCRIPTOR 131072
     * }
     */
    public static long Py_TPFLAGS_METHOD_DESCRIPTOR() {
        return Py_TPFLAGS_METHOD_DESCRIPTOR;
    }
    private static final long Py_TPFLAGS_VALID_VERSION_TAG = 524288L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_VALID_VERSION_TAG 524288
     * }
     */
    public static long Py_TPFLAGS_VALID_VERSION_TAG() {
        return Py_TPFLAGS_VALID_VERSION_TAG;
    }
    private static final long Py_TPFLAGS_IS_ABSTRACT = 1048576L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_IS_ABSTRACT 1048576
     * }
     */
    public static long Py_TPFLAGS_IS_ABSTRACT() {
        return Py_TPFLAGS_IS_ABSTRACT;
    }
    private static final long _Py_TPFLAGS_MATCH_SELF = 4194304L;
    /**
     * {@snippet lang=c :
     * #define _Py_TPFLAGS_MATCH_SELF 4194304
     * }
     */
    public static long _Py_TPFLAGS_MATCH_SELF() {
        return _Py_TPFLAGS_MATCH_SELF;
    }
    private static final long Py_TPFLAGS_ITEMS_AT_END = 8388608L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_ITEMS_AT_END 8388608
     * }
     */
    public static long Py_TPFLAGS_ITEMS_AT_END() {
        return Py_TPFLAGS_ITEMS_AT_END;
    }
    private static final long Py_TPFLAGS_LONG_SUBCLASS = 16777216L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_LONG_SUBCLASS 16777216
     * }
     */
    public static long Py_TPFLAGS_LONG_SUBCLASS() {
        return Py_TPFLAGS_LONG_SUBCLASS;
    }
    private static final long Py_TPFLAGS_LIST_SUBCLASS = 33554432L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_LIST_SUBCLASS 33554432
     * }
     */
    public static long Py_TPFLAGS_LIST_SUBCLASS() {
        return Py_TPFLAGS_LIST_SUBCLASS;
    }
    private static final long Py_TPFLAGS_TUPLE_SUBCLASS = 67108864L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_TUPLE_SUBCLASS 67108864
     * }
     */
    public static long Py_TPFLAGS_TUPLE_SUBCLASS() {
        return Py_TPFLAGS_TUPLE_SUBCLASS;
    }
    private static final long Py_TPFLAGS_BYTES_SUBCLASS = 134217728L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_BYTES_SUBCLASS 134217728
     * }
     */
    public static long Py_TPFLAGS_BYTES_SUBCLASS() {
        return Py_TPFLAGS_BYTES_SUBCLASS;
    }
    private static final long Py_TPFLAGS_UNICODE_SUBCLASS = 268435456L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_UNICODE_SUBCLASS 268435456
     * }
     */
    public static long Py_TPFLAGS_UNICODE_SUBCLASS() {
        return Py_TPFLAGS_UNICODE_SUBCLASS;
    }
    private static final long Py_TPFLAGS_DICT_SUBCLASS = 536870912L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_DICT_SUBCLASS 536870912
     * }
     */
    public static long Py_TPFLAGS_DICT_SUBCLASS() {
        return Py_TPFLAGS_DICT_SUBCLASS;
    }
    private static final long Py_TPFLAGS_BASE_EXC_SUBCLASS = 1073741824L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_BASE_EXC_SUBCLASS 1073741824
     * }
     */
    public static long Py_TPFLAGS_BASE_EXC_SUBCLASS() {
        return Py_TPFLAGS_BASE_EXC_SUBCLASS;
    }
    private static final long Py_TPFLAGS_TYPE_SUBCLASS = 2147483648L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_TYPE_SUBCLASS 2147483648
     * }
     */
    public static long Py_TPFLAGS_TYPE_SUBCLASS() {
        return Py_TPFLAGS_TYPE_SUBCLASS;
    }
    private static final int Py_TPFLAGS_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_DEFAULT 0
     * }
     */
    public static int Py_TPFLAGS_DEFAULT() {
        return Py_TPFLAGS_DEFAULT;
    }
    private static final long Py_TPFLAGS_HAVE_FINALIZE = 1L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_HAVE_FINALIZE 1
     * }
     */
    public static long Py_TPFLAGS_HAVE_FINALIZE() {
        return Py_TPFLAGS_HAVE_FINALIZE;
    }
    private static final long Py_TPFLAGS_HAVE_VERSION_TAG = 262144L;
    /**
     * {@snippet lang=c :
     * #define Py_TPFLAGS_HAVE_VERSION_TAG 262144
     * }
     */
    public static long Py_TPFLAGS_HAVE_VERSION_TAG() {
        return Py_TPFLAGS_HAVE_VERSION_TAG;
    }
    private static final int Py_HASH_ALGORITHM = (int)3L;
    /**
     * {@snippet lang=c :
     * #define Py_HASH_ALGORITHM 3
     * }
     */
    public static int Py_HASH_ALGORITHM() {
        return Py_HASH_ALGORITHM;
    }
    private static final long PyHASH_MULTIPLIER = 1000003L;
    /**
     * {@snippet lang=c :
     * #define PyHASH_MULTIPLIER 1000003
     * }
     */
    public static long PyHASH_MULTIPLIER() {
        return PyHASH_MULTIPLIER;
    }
    private static final long PyHASH_MODULUS = 2305843009213693951L;
    /**
     * {@snippet lang=c :
     * #define PyHASH_MODULUS 2305843009213693951
     * }
     */
    public static long PyHASH_MODULUS() {
        return PyHASH_MODULUS;
    }
    private static final long PyHASH_IMAG = 1000003L;
    /**
     * {@snippet lang=c :
     * #define PyHASH_IMAG 1000003
     * }
     */
    public static long PyHASH_IMAG() {
        return PyHASH_IMAG;
    }
    private static final long _PyHASH_MULTIPLIER = 1000003L;
    /**
     * {@snippet lang=c :
     * #define _PyHASH_MULTIPLIER 1000003
     * }
     */
    public static long _PyHASH_MULTIPLIER() {
        return _PyHASH_MULTIPLIER;
    }
    private static final int _PyHASH_BITS = (int)61L;
    /**
     * {@snippet lang=c :
     * #define _PyHASH_BITS 61
     * }
     */
    public static int _PyHASH_BITS() {
        return _PyHASH_BITS;
    }
    private static final long _PyHASH_MODULUS = 2305843009213693951L;
    /**
     * {@snippet lang=c :
     * #define _PyHASH_MODULUS 2305843009213693951
     * }
     */
    public static long _PyHASH_MODULUS() {
        return _PyHASH_MODULUS;
    }
    private static final int _PyHASH_INF = (int)314159L;
    /**
     * {@snippet lang=c :
     * #define _PyHASH_INF 314159
     * }
     */
    public static int _PyHASH_INF() {
        return _PyHASH_INF;
    }
    private static final long _PyHASH_IMAG = 1000003L;
    /**
     * {@snippet lang=c :
     * #define _PyHASH_IMAG 1000003
     * }
     */
    public static long _PyHASH_IMAG() {
        return _PyHASH_IMAG;
    }
    private static final int Py_UNICODE_SIZE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define Py_UNICODE_SIZE 4
     * }
     */
    public static int Py_UNICODE_SIZE() {
        return Py_UNICODE_SIZE;
    }
    private static final int Py_UNICODE_REPLACEMENT_CHARACTER = (int)65533L;
    /**
     * {@snippet lang=c :
     * #define Py_UNICODE_REPLACEMENT_CHARACTER 65533
     * }
     */
    public static int Py_UNICODE_REPLACEMENT_CHARACTER() {
        return Py_UNICODE_REPLACEMENT_CHARACTER;
    }
    /**
     * {@snippet lang=c :
     * #define _Py_PARSE_PID "i"
     * }
     */
    public static MemorySegment _Py_PARSE_PID() {
        class Holder {
            static final MemorySegment _Py_PARSE_PID
                = Python_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder._Py_PARSE_PID;
    }
    /**
     * {@snippet lang=c :
     * #define _Py_PARSE_INTPTR "l"
     * }
     */
    public static MemorySegment _Py_PARSE_INTPTR() {
        class Holder {
            static final MemorySegment _Py_PARSE_INTPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("l");
        }
        return Holder._Py_PARSE_INTPTR;
    }
    /**
     * {@snippet lang=c :
     * #define _Py_PARSE_UINTPTR "k"
     * }
     */
    public static MemorySegment _Py_PARSE_UINTPTR() {
        class Holder {
            static final MemorySegment _Py_PARSE_UINTPTR
                = Python_h.LIBRARY_ARENA.allocateFrom("k");
        }
        return Holder._Py_PARSE_UINTPTR;
    }
    private static final int Py_ASNATIVEBYTES_DEFAULTS = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define Py_ASNATIVEBYTES_DEFAULTS -1
     * }
     */
    public static int Py_ASNATIVEBYTES_DEFAULTS() {
        return Py_ASNATIVEBYTES_DEFAULTS;
    }
    private static final int _PyLong_DECIMAL_BASE = (int)1000000000L;
    /**
     * {@snippet lang=c :
     * #define _PyLong_DECIMAL_BASE 1000000000
     * }
     */
    public static int _PyLong_DECIMAL_BASE() {
        return _PyLong_DECIMAL_BASE;
    }
    private static final int PyLong_BASE = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define PyLong_BASE 1073741824
     * }
     */
    public static int PyLong_BASE() {
        return PyLong_BASE;
    }
    private static final int PyLong_MASK = (int)1073741823L;
    /**
     * {@snippet lang=c :
     * #define PyLong_MASK 1073741823
     * }
     */
    public static int PyLong_MASK() {
        return PyLong_MASK;
    }
    private static final MemorySegment Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED (void*) 0
     * }
     */
    public static MemorySegment Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED() {
        return Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED;
    }
    private static final MemorySegment Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED = MemorySegment.ofAddress(1L);
    /**
     * {@snippet lang=c :
     * #define Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED (void*) 1
     * }
     */
    public static MemorySegment Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED() {
        return Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED;
    }
    private static final MemorySegment Py_MOD_PER_INTERPRETER_GIL_SUPPORTED = MemorySegment.ofAddress(2L);
    /**
     * {@snippet lang=c :
     * #define Py_MOD_PER_INTERPRETER_GIL_SUPPORTED (void*) 2
     * }
     */
    public static MemorySegment Py_MOD_PER_INTERPRETER_GIL_SUPPORTED() {
        return Py_MOD_PER_INTERPRETER_GIL_SUPPORTED;
    }
    private static final MemorySegment Py_MOD_GIL_USED = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define Py_MOD_GIL_USED (void*) 0
     * }
     */
    public static MemorySegment Py_MOD_GIL_USED() {
        return Py_MOD_GIL_USED;
    }
    private static final MemorySegment Py_MOD_GIL_NOT_USED = MemorySegment.ofAddress(1L);
    /**
     * {@snippet lang=c :
     * #define Py_MOD_GIL_NOT_USED (void*) 1
     * }
     */
    public static MemorySegment Py_MOD_GIL_NOT_USED() {
        return Py_MOD_GIL_NOT_USED;
    }
    /**
     * {@snippet lang=c :
     * #define PY_STDIOTEXTMODE "b"
     * }
     */
    public static MemorySegment PY_STDIOTEXTMODE() {
        class Holder {
            static final MemorySegment PY_STDIOTEXTMODE
                = Python_h.LIBRARY_ARENA.allocateFrom("b");
        }
        return Holder.PY_STDIOTEXTMODE;
    }
    private static final long PyTime_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PyTime_MIN -9223372036854775808
     * }
     */
    public static long PyTime_MIN() {
        return PyTime_MIN;
    }
    private static final long PyTime_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PyTime_MAX 9223372036854775807
     * }
     */
    public static long PyTime_MAX() {
        return PyTime_MAX;
    }
    private static final long PYTHREAD_INVALID_THREAD_ID = -1L;
    /**
     * {@snippet lang=c :
     * #define PYTHREAD_INVALID_THREAD_ID -1
     * }
     */
    public static long PYTHREAD_INVALID_THREAD_ID() {
        return PYTHREAD_INVALID_THREAD_ID;
    }
    private static final int QOS_MIN_RELATIVE_PRIORITY = (int)-15L;
    /**
     * {@snippet lang=c :
     * #define QOS_MIN_RELATIVE_PRIORITY -15
     * }
     */
    public static int QOS_MIN_RELATIVE_PRIORITY() {
        return QOS_MIN_RELATIVE_PRIORITY;
    }
    private static final MemorySegment PTHREAD_CANCELED = MemorySegment.ofAddress(1L);
    /**
     * {@snippet lang=c :
     * #define PTHREAD_CANCELED (void*) 1
     * }
     */
    public static MemorySegment PTHREAD_CANCELED() {
        return PTHREAD_CANCELED;
    }
    private static final int PTHREAD_MUTEX_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_MUTEX_DEFAULT 0
     * }
     */
    public static int PTHREAD_MUTEX_DEFAULT() {
        return PTHREAD_MUTEX_DEFAULT;
    }
    /**
     * {@snippet lang=c :
     * #define PYTHON_API_STRING "1013"
     * }
     */
    public static MemorySegment PYTHON_API_STRING() {
        class Holder {
            static final MemorySegment PYTHON_API_STRING
                = Python_h.LIBRARY_ARENA.allocateFrom("1013");
        }
        return Holder.PYTHON_API_STRING;
    }
    /**
     * {@snippet lang=c :
     * #define PYTHON_ABI_STRING "3"
     * }
     */
    public static MemorySegment PYTHON_ABI_STRING() {
        class Holder {
            static final MemorySegment PYTHON_ABI_STRING
                = Python_h.LIBRARY_ARENA.allocateFrom("3");
        }
        return Holder.PYTHON_ABI_STRING;
    }
    private static final int PyCF_MASK = (int)33423360L;
    /**
     * {@snippet lang=c :
     * #define PyCF_MASK 33423360
     * }
     */
    public static int PyCF_MASK() {
        return PyCF_MASK;
    }
    private static final int PyCF_MASK_OBSOLETE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define PyCF_MASK_OBSOLETE 16
     * }
     */
    public static int PyCF_MASK_OBSOLETE() {
        return PyCF_MASK_OBSOLETE;
    }
    private static final int PyCF_OPTIMIZED_AST = (int)33792L;
    /**
     * {@snippet lang=c :
     * #define PyCF_OPTIMIZED_AST 33792
     * }
     */
    public static int PyCF_OPTIMIZED_AST() {
        return PyCF_OPTIMIZED_AST;
    }
    private static final int PyCF_COMPILE_MASK = (int)62976L;
    /**
     * {@snippet lang=c :
     * #define PyCF_COMPILE_MASK 62976
     * }
     */
    public static int PyCF_COMPILE_MASK() {
        return PyCF_COMPILE_MASK;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_NESTED_SCOPES "nested_scopes"
     * }
     */
    public static MemorySegment FUTURE_NESTED_SCOPES() {
        class Holder {
            static final MemorySegment FUTURE_NESTED_SCOPES
                = Python_h.LIBRARY_ARENA.allocateFrom("nested_scopes");
        }
        return Holder.FUTURE_NESTED_SCOPES;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_GENERATORS "generators"
     * }
     */
    public static MemorySegment FUTURE_GENERATORS() {
        class Holder {
            static final MemorySegment FUTURE_GENERATORS
                = Python_h.LIBRARY_ARENA.allocateFrom("generators");
        }
        return Holder.FUTURE_GENERATORS;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_DIVISION "division"
     * }
     */
    public static MemorySegment FUTURE_DIVISION() {
        class Holder {
            static final MemorySegment FUTURE_DIVISION
                = Python_h.LIBRARY_ARENA.allocateFrom("division");
        }
        return Holder.FUTURE_DIVISION;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_ABSOLUTE_IMPORT "absolute_import"
     * }
     */
    public static MemorySegment FUTURE_ABSOLUTE_IMPORT() {
        class Holder {
            static final MemorySegment FUTURE_ABSOLUTE_IMPORT
                = Python_h.LIBRARY_ARENA.allocateFrom("absolute_import");
        }
        return Holder.FUTURE_ABSOLUTE_IMPORT;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_WITH_STATEMENT "with_statement"
     * }
     */
    public static MemorySegment FUTURE_WITH_STATEMENT() {
        class Holder {
            static final MemorySegment FUTURE_WITH_STATEMENT
                = Python_h.LIBRARY_ARENA.allocateFrom("with_statement");
        }
        return Holder.FUTURE_WITH_STATEMENT;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_PRINT_FUNCTION "print_function"
     * }
     */
    public static MemorySegment FUTURE_PRINT_FUNCTION() {
        class Holder {
            static final MemorySegment FUTURE_PRINT_FUNCTION
                = Python_h.LIBRARY_ARENA.allocateFrom("print_function");
        }
        return Holder.FUTURE_PRINT_FUNCTION;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_UNICODE_LITERALS "unicode_literals"
     * }
     */
    public static MemorySegment FUTURE_UNICODE_LITERALS() {
        class Holder {
            static final MemorySegment FUTURE_UNICODE_LITERALS
                = Python_h.LIBRARY_ARENA.allocateFrom("unicode_literals");
        }
        return Holder.FUTURE_UNICODE_LITERALS;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_BARRY_AS_BDFL "barry_as_FLUFL"
     * }
     */
    public static MemorySegment FUTURE_BARRY_AS_BDFL() {
        class Holder {
            static final MemorySegment FUTURE_BARRY_AS_BDFL
                = Python_h.LIBRARY_ARENA.allocateFrom("barry_as_FLUFL");
        }
        return Holder.FUTURE_BARRY_AS_BDFL;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_GENERATOR_STOP "generator_stop"
     * }
     */
    public static MemorySegment FUTURE_GENERATOR_STOP() {
        class Holder {
            static final MemorySegment FUTURE_GENERATOR_STOP
                = Python_h.LIBRARY_ARENA.allocateFrom("generator_stop");
        }
        return Holder.FUTURE_GENERATOR_STOP;
    }
    /**
     * {@snippet lang=c :
     * #define FUTURE_ANNOTATIONS "annotations"
     * }
     */
    public static MemorySegment FUTURE_ANNOTATIONS() {
        class Holder {
            static final MemorySegment FUTURE_ANNOTATIONS
                = Python_h.LIBRARY_ARENA.allocateFrom("annotations");
        }
        return Holder.FUTURE_ANNOTATIONS;
    }
    private static final int PY_INVALID_STACK_EFFECT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define PY_INVALID_STACK_EFFECT 2147483647
     * }
     */
    public static int PY_INVALID_STACK_EFFECT() {
        return PY_INVALID_STACK_EFFECT;
    }
    private static final int PyInterpreterConfig_DEFAULT_GIL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PyInterpreterConfig_DEFAULT_GIL 0
     * }
     */
    public static int PyInterpreterConfig_DEFAULT_GIL() {
        return PyInterpreterConfig_DEFAULT_GIL;
    }
    private static final int PyInterpreterConfig_SHARED_GIL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PyInterpreterConfig_SHARED_GIL 1
     * }
     */
    public static int PyInterpreterConfig_SHARED_GIL() {
        return PyInterpreterConfig_SHARED_GIL;
    }
    private static final int PyInterpreterConfig_OWN_GIL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PyInterpreterConfig_OWN_GIL 2
     * }
     */
    public static int PyInterpreterConfig_OWN_GIL() {
        return PyInterpreterConfig_OWN_GIL;
    }
    private static final long PY_VECTORCALL_ARGUMENTS_OFFSET = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PY_VECTORCALL_ARGUMENTS_OFFSET -9223372036854775808
     * }
     */
    public static long PY_VECTORCALL_ARGUMENTS_OFFSET() {
        return PY_VECTORCALL_ARGUMENTS_OFFSET;
    }
    private static final int PY_CTF_ALPHA = (int)3L;
    /**
     * {@snippet lang=c :
     * #define PY_CTF_ALPHA 3
     * }
     */
    public static int PY_CTF_ALPHA() {
        return PY_CTF_ALPHA;
    }
    private static final int PY_CTF_ALNUM = (int)7L;
    /**
     * {@snippet lang=c :
     * #define PY_CTF_ALNUM 7
     * }
     */
    public static int PY_CTF_ALNUM() {
        return PY_CTF_ALNUM;
    }
    private static final int S_ISTXT = (int)512L;
    /**
     * {@snippet lang=c :
     * #define S_ISTXT 512
     * }
     */
    public static int S_ISTXT() {
        return S_ISTXT;
    }
    private static final int S_IREAD = (int)256L;
    /**
     * {@snippet lang=c :
     * #define S_IREAD 256
     * }
     */
    public static int S_IREAD() {
        return S_IREAD;
    }
    private static final int S_IWRITE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define S_IWRITE 128
     * }
     */
    public static int S_IWRITE() {
        return S_IWRITE;
    }
    private static final int S_IEXEC = (int)64L;
    /**
     * {@snippet lang=c :
     * #define S_IEXEC 64
     * }
     */
    public static int S_IEXEC() {
        return S_IEXEC;
    }
    private static final int ACCESSPERMS = (int)511L;
    /**
     * {@snippet lang=c :
     * #define ACCESSPERMS 511
     * }
     */
    public static int ACCESSPERMS() {
        return ACCESSPERMS;
    }
    private static final int ALLPERMS = (int)4095L;
    /**
     * {@snippet lang=c :
     * #define ALLPERMS 4095
     * }
     */
    public static int ALLPERMS() {
        return ALLPERMS;
    }
    private static final int DEFFILEMODE = (int)438L;
    /**
     * {@snippet lang=c :
     * #define DEFFILEMODE 438
     * }
     */
    public static int DEFFILEMODE() {
        return DEFFILEMODE;
    }
    private static final int SF_SYNTHETIC = (int)3221225472L;
    /**
     * {@snippet lang=c :
     * #define SF_SYNTHETIC 3221225472
     * }
     */
    public static int SF_SYNTHETIC() {
        return SF_SYNTHETIC;
    }
    private static final int UTIME_NOW = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define UTIME_NOW -1
     * }
     */
    public static int UTIME_NOW() {
        return UTIME_NOW;
    }
    private static final int UTIME_OMIT = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define UTIME_OMIT -2
     * }
     */
    public static int UTIME_OMIT() {
        return UTIME_OMIT;
    }
}

