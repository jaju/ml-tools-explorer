// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     enum {
 *         _PyStatus_TYPE_OK = 0,
 *         _PyStatus_TYPE_ERROR = 1,
 *         _PyStatus_TYPE_EXIT = 2
 *     } _type;
 *     const char *func;
 *     const char *err_msg;
 *     int exitcode;
 * }
 * }
 */
public class PyStatus {

    PyStatus() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_INT.withName("_type"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("func"),
        Python_h.C_POINTER.withName("err_msg"),
        Python_h.C_INT.withName("exitcode"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$10:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt _type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum {
     *     _PyStatus_TYPE_OK = 0,
     *     _PyStatus_TYPE_ERROR = 1,
     *     _PyStatus_TYPE_EXIT = 2
     * } _type
     * }
     */
    public static final OfInt _type$layout() {
        return _type$LAYOUT;
    }

    private static final long _type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum {
     *     _PyStatus_TYPE_OK = 0,
     *     _PyStatus_TYPE_ERROR = 1,
     *     _PyStatus_TYPE_EXIT = 2
     * } _type
     * }
     */
    public static final long _type$offset() {
        return _type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum {
     *     _PyStatus_TYPE_OK = 0,
     *     _PyStatus_TYPE_ERROR = 1,
     *     _PyStatus_TYPE_EXIT = 2
     * } _type
     * }
     */
    public static int _type(MemorySegment struct) {
        return struct.get(_type$LAYOUT, _type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum {
     *     _PyStatus_TYPE_OK = 0,
     *     _PyStatus_TYPE_ERROR = 1,
     *     _PyStatus_TYPE_EXIT = 2
     * } _type
     * }
     */
    public static void _type(MemorySegment struct, int fieldValue) {
        struct.set(_type$LAYOUT, _type$OFFSET, fieldValue);
    }

    private static final AddressLayout func$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *func
     * }
     */
    public static final AddressLayout func$layout() {
        return func$LAYOUT;
    }

    private static final long func$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *func
     * }
     */
    public static final long func$offset() {
        return func$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *func
     * }
     */
    public static MemorySegment func(MemorySegment struct) {
        return struct.get(func$LAYOUT, func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *func
     * }
     */
    public static void func(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func$LAYOUT, func$OFFSET, fieldValue);
    }

    private static final AddressLayout err_msg$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("err_msg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *err_msg
     * }
     */
    public static final AddressLayout err_msg$layout() {
        return err_msg$LAYOUT;
    }

    private static final long err_msg$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *err_msg
     * }
     */
    public static final long err_msg$offset() {
        return err_msg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *err_msg
     * }
     */
    public static MemorySegment err_msg(MemorySegment struct) {
        return struct.get(err_msg$LAYOUT, err_msg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *err_msg
     * }
     */
    public static void err_msg(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(err_msg$LAYOUT, err_msg$OFFSET, fieldValue);
    }

    private static final OfInt exitcode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("exitcode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int exitcode
     * }
     */
    public static final OfInt exitcode$layout() {
        return exitcode$LAYOUT;
    }

    private static final long exitcode$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int exitcode
     * }
     */
    public static final long exitcode$offset() {
        return exitcode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int exitcode
     * }
     */
    public static int exitcode(MemorySegment struct) {
        return struct.get(exitcode$LAYOUT, exitcode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int exitcode
     * }
     */
    public static void exitcode(MemorySegment struct, int fieldValue) {
        struct.set(exitcode$LAYOUT, exitcode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

