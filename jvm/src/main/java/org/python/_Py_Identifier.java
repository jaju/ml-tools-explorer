// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _Py_Identifier {
 *     const char *string;
 *     Py_ssize_t index;
 *     struct {
 *         uint8_t v;
 *     } mutex;
 * }
 * }
 */
public class _Py_Identifier {

    _Py_Identifier() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("string"),
        Python_h.C_LONG.withName("index"),
        _Py_Identifier.mutex.layout().withName("mutex"),
        MemoryLayout.paddingLayout(7)
    ).withName("_Py_Identifier");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout string$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("string"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *string
     * }
     */
    public static final AddressLayout string$layout() {
        return string$LAYOUT;
    }

    private static final long string$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *string
     * }
     */
    public static final long string$offset() {
        return string$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *string
     * }
     */
    public static MemorySegment string(MemorySegment struct) {
        return struct.get(string$LAYOUT, string$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *string
     * }
     */
    public static void string(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(string$LAYOUT, string$OFFSET, fieldValue);
    }

    private static final OfLong index$LAYOUT = (OfLong)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t index
     * }
     */
    public static final OfLong index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t index
     * }
     */
    public static long index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t index
     * }
     */
    public static void index(MemorySegment struct, long fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     uint8_t v;
     * }
     * }
     */
    public static class mutex {

        mutex() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            Python_h.C_CHAR.withName("v")
        ).withName("$anon$44:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfByte v$LAYOUT = (OfByte)$LAYOUT.select(groupElement("v"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t v
         * }
         */
        public static final OfByte v$layout() {
            return v$LAYOUT;
        }

        private static final long v$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t v
         * }
         */
        public static final long v$offset() {
            return v$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t v
         * }
         */
        public static byte v(MemorySegment struct) {
            return struct.get(v$LAYOUT, v$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t v
         * }
         */
        public static void v(MemorySegment struct, byte fieldValue) {
            struct.set(v$LAYOUT, v$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout mutex$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mutex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     uint8_t v;
     * } mutex
     * }
     */
    public static final GroupLayout mutex$layout() {
        return mutex$LAYOUT;
    }

    private static final long mutex$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     uint8_t v;
     * } mutex
     * }
     */
    public static final long mutex$offset() {
        return mutex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     uint8_t v;
     * } mutex
     * }
     */
    public static MemorySegment mutex(MemorySegment struct) {
        return struct.asSlice(mutex$OFFSET, mutex$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     uint8_t v;
     * } mutex
     * }
     */
    public static void mutex(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mutex$OFFSET, mutex$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

