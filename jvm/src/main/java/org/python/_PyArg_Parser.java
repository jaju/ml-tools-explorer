// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PyArg_Parser {
 *     const char *format;
 *     const char *const *keywords;
 *     const char *fname;
 *     const char *custom_msg;
 *     _PyOnceFlag once;
 *     int is_kwtuple_owned;
 *     int pos;
 *     int min;
 *     int max;
 *     PyObject *kwtuple;
 *     struct _PyArg_Parser *next;
 * }
 * }
 */
public class _PyArg_Parser {

    _PyArg_Parser() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("format"),
        Python_h.C_POINTER.withName("keywords"),
        Python_h.C_POINTER.withName("fname"),
        Python_h.C_POINTER.withName("custom_msg"),
        _PyOnceFlag.layout().withName("once"),
        MemoryLayout.paddingLayout(3),
        Python_h.C_INT.withName("is_kwtuple_owned"),
        Python_h.C_INT.withName("pos"),
        Python_h.C_INT.withName("min"),
        Python_h.C_INT.withName("max"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("kwtuple"),
        Python_h.C_POINTER.withName("next")
    ).withName("_PyArg_Parser");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout format$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *format
     * }
     */
    public static final AddressLayout format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *format
     * }
     */
    public static MemorySegment format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *format
     * }
     */
    public static void format(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final AddressLayout keywords$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("keywords"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *const *keywords
     * }
     */
    public static final AddressLayout keywords$layout() {
        return keywords$LAYOUT;
    }

    private static final long keywords$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *const *keywords
     * }
     */
    public static final long keywords$offset() {
        return keywords$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *const *keywords
     * }
     */
    public static MemorySegment keywords(MemorySegment struct) {
        return struct.get(keywords$LAYOUT, keywords$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *const *keywords
     * }
     */
    public static void keywords(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(keywords$LAYOUT, keywords$OFFSET, fieldValue);
    }

    private static final AddressLayout fname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *fname
     * }
     */
    public static final AddressLayout fname$layout() {
        return fname$LAYOUT;
    }

    private static final long fname$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *fname
     * }
     */
    public static final long fname$offset() {
        return fname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *fname
     * }
     */
    public static MemorySegment fname(MemorySegment struct) {
        return struct.get(fname$LAYOUT, fname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *fname
     * }
     */
    public static void fname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fname$LAYOUT, fname$OFFSET, fieldValue);
    }

    private static final AddressLayout custom_msg$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("custom_msg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *custom_msg
     * }
     */
    public static final AddressLayout custom_msg$layout() {
        return custom_msg$LAYOUT;
    }

    private static final long custom_msg$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *custom_msg
     * }
     */
    public static final long custom_msg$offset() {
        return custom_msg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *custom_msg
     * }
     */
    public static MemorySegment custom_msg(MemorySegment struct) {
        return struct.get(custom_msg$LAYOUT, custom_msg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *custom_msg
     * }
     */
    public static void custom_msg(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(custom_msg$LAYOUT, custom_msg$OFFSET, fieldValue);
    }

    private static final GroupLayout once$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("once"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyOnceFlag once
     * }
     */
    public static final GroupLayout once$layout() {
        return once$LAYOUT;
    }

    private static final long once$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyOnceFlag once
     * }
     */
    public static final long once$offset() {
        return once$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyOnceFlag once
     * }
     */
    public static MemorySegment once(MemorySegment struct) {
        return struct.asSlice(once$OFFSET, once$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyOnceFlag once
     * }
     */
    public static void once(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, once$OFFSET, once$LAYOUT.byteSize());
    }

    private static final OfInt is_kwtuple_owned$LAYOUT = (OfInt)$LAYOUT.select(groupElement("is_kwtuple_owned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int is_kwtuple_owned
     * }
     */
    public static final OfInt is_kwtuple_owned$layout() {
        return is_kwtuple_owned$LAYOUT;
    }

    private static final long is_kwtuple_owned$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int is_kwtuple_owned
     * }
     */
    public static final long is_kwtuple_owned$offset() {
        return is_kwtuple_owned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int is_kwtuple_owned
     * }
     */
    public static int is_kwtuple_owned(MemorySegment struct) {
        return struct.get(is_kwtuple_owned$LAYOUT, is_kwtuple_owned$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int is_kwtuple_owned
     * }
     */
    public static void is_kwtuple_owned(MemorySegment struct, int fieldValue) {
        struct.set(is_kwtuple_owned$LAYOUT, is_kwtuple_owned$OFFSET, fieldValue);
    }

    private static final OfInt pos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pos
     * }
     */
    public static final OfInt pos$layout() {
        return pos$LAYOUT;
    }

    private static final long pos$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pos
     * }
     */
    public static final long pos$offset() {
        return pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pos
     * }
     */
    public static int pos(MemorySegment struct) {
        return struct.get(pos$LAYOUT, pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pos
     * }
     */
    public static void pos(MemorySegment struct, int fieldValue) {
        struct.set(pos$LAYOUT, pos$OFFSET, fieldValue);
    }

    private static final OfInt min$LAYOUT = (OfInt)$LAYOUT.select(groupElement("min"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int min
     * }
     */
    public static final OfInt min$layout() {
        return min$LAYOUT;
    }

    private static final long min$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int min
     * }
     */
    public static final long min$offset() {
        return min$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int min
     * }
     */
    public static int min(MemorySegment struct) {
        return struct.get(min$LAYOUT, min$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int min
     * }
     */
    public static void min(MemorySegment struct, int fieldValue) {
        struct.set(min$LAYOUT, min$OFFSET, fieldValue);
    }

    private static final OfInt max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max
     * }
     */
    public static final OfInt max$layout() {
        return max$LAYOUT;
    }

    private static final long max$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max
     * }
     */
    public static final long max$offset() {
        return max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max
     * }
     */
    public static int max(MemorySegment struct) {
        return struct.get(max$LAYOUT, max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max
     * }
     */
    public static void max(MemorySegment struct, int fieldValue) {
        struct.set(max$LAYOUT, max$OFFSET, fieldValue);
    }

    private static final AddressLayout kwtuple$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("kwtuple"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *kwtuple
     * }
     */
    public static final AddressLayout kwtuple$layout() {
        return kwtuple$LAYOUT;
    }

    private static final long kwtuple$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *kwtuple
     * }
     */
    public static final long kwtuple$offset() {
        return kwtuple$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *kwtuple
     * }
     */
    public static MemorySegment kwtuple(MemorySegment struct) {
        return struct.get(kwtuple$LAYOUT, kwtuple$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *kwtuple
     * }
     */
    public static void kwtuple(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(kwtuple$LAYOUT, kwtuple$OFFSET, fieldValue);
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _PyArg_Parser *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _PyArg_Parser *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _PyArg_Parser *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _PyArg_Parser *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

