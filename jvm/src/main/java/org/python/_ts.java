// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ts {
 *     PyThreadState *prev;
 *     PyThreadState *next;
 *     PyInterpreterState *interp;
 *     uintptr_t eval_breaker;
 *     struct {
 *         unsigned int initialized : 1;
 *         unsigned int bound : 1;
 *         unsigned int unbound : 1;
 *         unsigned int bound_gilstate : 1;
 *         unsigned int active : 1;
 *         unsigned int holds_gil : 1;
 *         unsigned int finalizing : 1;
 *         unsigned int cleared : 1;
 *         unsigned int finalized : 1;
 *         unsigned int : 23;
 *     } _status;
 *     int _whence;
 *     int state;
 *     int py_recursion_remaining;
 *     int py_recursion_limit;
 *     int c_recursion_remaining;
 *     int recursion_headroom;
 *     int tracing;
 *     int what_event;
 *     struct _PyInterpreterFrame *current_frame;
 *     Py_tracefunc c_profilefunc;
 *     Py_tracefunc c_tracefunc;
 *     PyObject *c_profileobj;
 *     PyObject *c_traceobj;
 *     PyObject *current_exception;
 *     _PyErr_StackItem *exc_info;
 *     PyObject *dict;
 *     int gilstate_counter;
 *     PyObject *async_exc;
 *     unsigned long thread_id;
 *     unsigned long native_thread_id;
 *     PyObject *delete_later;
 *     uintptr_t critical_section;
 *     int coroutine_origin_tracking_depth;
 *     PyObject *async_gen_firstiter;
 *     PyObject *async_gen_finalizer;
 *     PyObject *context;
 *     uint64_t context_ver;
 *     uint64_t id;
 *     _PyStackChunk *datastack_chunk;
 *     PyObject **datastack_top;
 *     PyObject **datastack_limit;
 *     _PyErr_StackItem exc_state;
 *     PyObject *previous_executor;
 *     uint64_t dict_global_version;
 *     PyObject *threading_local_key;
 *     PyObject *threading_local_sentinel;
 * }
 * }
 */
public class _ts {

    _ts() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_POINTER.withName("prev"),
        Python_h.C_POINTER.withName("next"),
        Python_h.C_POINTER.withName("interp"),
        Python_h.C_LONG.withName("eval_breaker"),
        _ts._status.layout().withName("_status"),
        Python_h.C_INT.withName("_whence"),
        Python_h.C_INT.withName("state"),
        Python_h.C_INT.withName("py_recursion_remaining"),
        Python_h.C_INT.withName("py_recursion_limit"),
        Python_h.C_INT.withName("c_recursion_remaining"),
        Python_h.C_INT.withName("recursion_headroom"),
        Python_h.C_INT.withName("tracing"),
        Python_h.C_INT.withName("what_event"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("current_frame"),
        Python_h.C_POINTER.withName("c_profilefunc"),
        Python_h.C_POINTER.withName("c_tracefunc"),
        Python_h.C_POINTER.withName("c_profileobj"),
        Python_h.C_POINTER.withName("c_traceobj"),
        Python_h.C_POINTER.withName("current_exception"),
        Python_h.C_POINTER.withName("exc_info"),
        Python_h.C_POINTER.withName("dict"),
        Python_h.C_INT.withName("gilstate_counter"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("async_exc"),
        Python_h.C_LONG.withName("thread_id"),
        Python_h.C_LONG.withName("native_thread_id"),
        Python_h.C_POINTER.withName("delete_later"),
        Python_h.C_LONG.withName("critical_section"),
        Python_h.C_INT.withName("coroutine_origin_tracking_depth"),
        MemoryLayout.paddingLayout(4),
        Python_h.C_POINTER.withName("async_gen_firstiter"),
        Python_h.C_POINTER.withName("async_gen_finalizer"),
        Python_h.C_POINTER.withName("context"),
        Python_h.C_LONG_LONG.withName("context_ver"),
        Python_h.C_LONG_LONG.withName("id"),
        Python_h.C_POINTER.withName("datastack_chunk"),
        Python_h.C_POINTER.withName("datastack_top"),
        Python_h.C_POINTER.withName("datastack_limit"),
        _err_stackitem.layout().withName("exc_state"),
        Python_h.C_POINTER.withName("previous_executor"),
        Python_h.C_LONG_LONG.withName("dict_global_version"),
        Python_h.C_POINTER.withName("threading_local_key"),
        Python_h.C_POINTER.withName("threading_local_sentinel")
    ).withName("_ts");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout prev$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("prev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyThreadState *prev
     * }
     */
    public static final AddressLayout prev$layout() {
        return prev$LAYOUT;
    }

    private static final long prev$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyThreadState *prev
     * }
     */
    public static final long prev$offset() {
        return prev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyThreadState *prev
     * }
     */
    public static MemorySegment prev(MemorySegment struct) {
        return struct.get(prev$LAYOUT, prev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyThreadState *prev
     * }
     */
    public static void prev(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(prev$LAYOUT, prev$OFFSET, fieldValue);
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyThreadState *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyThreadState *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyThreadState *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyThreadState *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    private static final AddressLayout interp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("interp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyInterpreterState *interp
     * }
     */
    public static final AddressLayout interp$layout() {
        return interp$LAYOUT;
    }

    private static final long interp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyInterpreterState *interp
     * }
     */
    public static final long interp$offset() {
        return interp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyInterpreterState *interp
     * }
     */
    public static MemorySegment interp(MemorySegment struct) {
        return struct.get(interp$LAYOUT, interp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyInterpreterState *interp
     * }
     */
    public static void interp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(interp$LAYOUT, interp$OFFSET, fieldValue);
    }

    private static final OfLong eval_breaker$LAYOUT = (OfLong)$LAYOUT.select(groupElement("eval_breaker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uintptr_t eval_breaker
     * }
     */
    public static final OfLong eval_breaker$layout() {
        return eval_breaker$LAYOUT;
    }

    private static final long eval_breaker$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uintptr_t eval_breaker
     * }
     */
    public static final long eval_breaker$offset() {
        return eval_breaker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uintptr_t eval_breaker
     * }
     */
    public static long eval_breaker(MemorySegment struct) {
        return struct.get(eval_breaker$LAYOUT, eval_breaker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uintptr_t eval_breaker
     * }
     */
    public static void eval_breaker(MemorySegment struct, long fieldValue) {
        struct.set(eval_breaker$LAYOUT, eval_breaker$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     unsigned int initialized : 1;
     *     unsigned int bound : 1;
     *     unsigned int unbound : 1;
     *     unsigned int bound_gilstate : 1;
     *     unsigned int active : 1;
     *     unsigned int holds_gil : 1;
     *     unsigned int finalizing : 1;
     *     unsigned int cleared : 1;
     *     unsigned int finalized : 1;
     *     unsigned int : 23;
     * }
     * }
     */
    public static class _status {

        _status() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(4)
        ).withName("$anon$71:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout _status$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int initialized : 1;
     *     unsigned int bound : 1;
     *     unsigned int unbound : 1;
     *     unsigned int bound_gilstate : 1;
     *     unsigned int active : 1;
     *     unsigned int holds_gil : 1;
     *     unsigned int finalizing : 1;
     *     unsigned int cleared : 1;
     *     unsigned int finalized : 1;
     *     unsigned int : 23;
     * } _status
     * }
     */
    public static final GroupLayout _status$layout() {
        return _status$LAYOUT;
    }

    private static final long _status$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int initialized : 1;
     *     unsigned int bound : 1;
     *     unsigned int unbound : 1;
     *     unsigned int bound_gilstate : 1;
     *     unsigned int active : 1;
     *     unsigned int holds_gil : 1;
     *     unsigned int finalizing : 1;
     *     unsigned int cleared : 1;
     *     unsigned int finalized : 1;
     *     unsigned int : 23;
     * } _status
     * }
     */
    public static final long _status$offset() {
        return _status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int initialized : 1;
     *     unsigned int bound : 1;
     *     unsigned int unbound : 1;
     *     unsigned int bound_gilstate : 1;
     *     unsigned int active : 1;
     *     unsigned int holds_gil : 1;
     *     unsigned int finalizing : 1;
     *     unsigned int cleared : 1;
     *     unsigned int finalized : 1;
     *     unsigned int : 23;
     * } _status
     * }
     */
    public static MemorySegment _status(MemorySegment struct) {
        return struct.asSlice(_status$OFFSET, _status$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int initialized : 1;
     *     unsigned int bound : 1;
     *     unsigned int unbound : 1;
     *     unsigned int bound_gilstate : 1;
     *     unsigned int active : 1;
     *     unsigned int holds_gil : 1;
     *     unsigned int finalizing : 1;
     *     unsigned int cleared : 1;
     *     unsigned int finalized : 1;
     *     unsigned int : 23;
     * } _status
     * }
     */
    public static void _status(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _status$OFFSET, _status$LAYOUT.byteSize());
    }

    private static final OfInt _whence$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_whence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int _whence
     * }
     */
    public static final OfInt _whence$layout() {
        return _whence$LAYOUT;
    }

    private static final long _whence$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int _whence
     * }
     */
    public static final long _whence$offset() {
        return _whence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _whence
     * }
     */
    public static int _whence(MemorySegment struct) {
        return struct.get(_whence$LAYOUT, _whence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _whence
     * }
     */
    public static void _whence(MemorySegment struct, int fieldValue) {
        struct.set(_whence$LAYOUT, _whence$OFFSET, fieldValue);
    }

    private static final OfInt state$LAYOUT = (OfInt)$LAYOUT.select(groupElement("state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int state
     * }
     */
    public static final OfInt state$layout() {
        return state$LAYOUT;
    }

    private static final long state$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int state
     * }
     */
    public static final long state$offset() {
        return state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int state
     * }
     */
    public static int state(MemorySegment struct) {
        return struct.get(state$LAYOUT, state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int state
     * }
     */
    public static void state(MemorySegment struct, int fieldValue) {
        struct.set(state$LAYOUT, state$OFFSET, fieldValue);
    }

    private static final OfInt py_recursion_remaining$LAYOUT = (OfInt)$LAYOUT.select(groupElement("py_recursion_remaining"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int py_recursion_remaining
     * }
     */
    public static final OfInt py_recursion_remaining$layout() {
        return py_recursion_remaining$LAYOUT;
    }

    private static final long py_recursion_remaining$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int py_recursion_remaining
     * }
     */
    public static final long py_recursion_remaining$offset() {
        return py_recursion_remaining$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int py_recursion_remaining
     * }
     */
    public static int py_recursion_remaining(MemorySegment struct) {
        return struct.get(py_recursion_remaining$LAYOUT, py_recursion_remaining$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int py_recursion_remaining
     * }
     */
    public static void py_recursion_remaining(MemorySegment struct, int fieldValue) {
        struct.set(py_recursion_remaining$LAYOUT, py_recursion_remaining$OFFSET, fieldValue);
    }

    private static final OfInt py_recursion_limit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("py_recursion_limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int py_recursion_limit
     * }
     */
    public static final OfInt py_recursion_limit$layout() {
        return py_recursion_limit$LAYOUT;
    }

    private static final long py_recursion_limit$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int py_recursion_limit
     * }
     */
    public static final long py_recursion_limit$offset() {
        return py_recursion_limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int py_recursion_limit
     * }
     */
    public static int py_recursion_limit(MemorySegment struct) {
        return struct.get(py_recursion_limit$LAYOUT, py_recursion_limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int py_recursion_limit
     * }
     */
    public static void py_recursion_limit(MemorySegment struct, int fieldValue) {
        struct.set(py_recursion_limit$LAYOUT, py_recursion_limit$OFFSET, fieldValue);
    }

    private static final OfInt c_recursion_remaining$LAYOUT = (OfInt)$LAYOUT.select(groupElement("c_recursion_remaining"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int c_recursion_remaining
     * }
     */
    public static final OfInt c_recursion_remaining$layout() {
        return c_recursion_remaining$LAYOUT;
    }

    private static final long c_recursion_remaining$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int c_recursion_remaining
     * }
     */
    public static final long c_recursion_remaining$offset() {
        return c_recursion_remaining$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int c_recursion_remaining
     * }
     */
    public static int c_recursion_remaining(MemorySegment struct) {
        return struct.get(c_recursion_remaining$LAYOUT, c_recursion_remaining$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int c_recursion_remaining
     * }
     */
    public static void c_recursion_remaining(MemorySegment struct, int fieldValue) {
        struct.set(c_recursion_remaining$LAYOUT, c_recursion_remaining$OFFSET, fieldValue);
    }

    private static final OfInt recursion_headroom$LAYOUT = (OfInt)$LAYOUT.select(groupElement("recursion_headroom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int recursion_headroom
     * }
     */
    public static final OfInt recursion_headroom$layout() {
        return recursion_headroom$LAYOUT;
    }

    private static final long recursion_headroom$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int recursion_headroom
     * }
     */
    public static final long recursion_headroom$offset() {
        return recursion_headroom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int recursion_headroom
     * }
     */
    public static int recursion_headroom(MemorySegment struct) {
        return struct.get(recursion_headroom$LAYOUT, recursion_headroom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int recursion_headroom
     * }
     */
    public static void recursion_headroom(MemorySegment struct, int fieldValue) {
        struct.set(recursion_headroom$LAYOUT, recursion_headroom$OFFSET, fieldValue);
    }

    private static final OfInt tracing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tracing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int tracing
     * }
     */
    public static final OfInt tracing$layout() {
        return tracing$LAYOUT;
    }

    private static final long tracing$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int tracing
     * }
     */
    public static final long tracing$offset() {
        return tracing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int tracing
     * }
     */
    public static int tracing(MemorySegment struct) {
        return struct.get(tracing$LAYOUT, tracing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int tracing
     * }
     */
    public static void tracing(MemorySegment struct, int fieldValue) {
        struct.set(tracing$LAYOUT, tracing$OFFSET, fieldValue);
    }

    private static final OfInt what_event$LAYOUT = (OfInt)$LAYOUT.select(groupElement("what_event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int what_event
     * }
     */
    public static final OfInt what_event$layout() {
        return what_event$LAYOUT;
    }

    private static final long what_event$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int what_event
     * }
     */
    public static final long what_event$offset() {
        return what_event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int what_event
     * }
     */
    public static int what_event(MemorySegment struct) {
        return struct.get(what_event$LAYOUT, what_event$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int what_event
     * }
     */
    public static void what_event(MemorySegment struct, int fieldValue) {
        struct.set(what_event$LAYOUT, what_event$OFFSET, fieldValue);
    }

    private static final AddressLayout current_frame$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("current_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _PyInterpreterFrame *current_frame
     * }
     */
    public static final AddressLayout current_frame$layout() {
        return current_frame$LAYOUT;
    }

    private static final long current_frame$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _PyInterpreterFrame *current_frame
     * }
     */
    public static final long current_frame$offset() {
        return current_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _PyInterpreterFrame *current_frame
     * }
     */
    public static MemorySegment current_frame(MemorySegment struct) {
        return struct.get(current_frame$LAYOUT, current_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _PyInterpreterFrame *current_frame
     * }
     */
    public static void current_frame(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(current_frame$LAYOUT, current_frame$OFFSET, fieldValue);
    }

    private static final AddressLayout c_profilefunc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c_profilefunc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_tracefunc c_profilefunc
     * }
     */
    public static final AddressLayout c_profilefunc$layout() {
        return c_profilefunc$LAYOUT;
    }

    private static final long c_profilefunc$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_tracefunc c_profilefunc
     * }
     */
    public static final long c_profilefunc$offset() {
        return c_profilefunc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_tracefunc c_profilefunc
     * }
     */
    public static MemorySegment c_profilefunc(MemorySegment struct) {
        return struct.get(c_profilefunc$LAYOUT, c_profilefunc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_tracefunc c_profilefunc
     * }
     */
    public static void c_profilefunc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c_profilefunc$LAYOUT, c_profilefunc$OFFSET, fieldValue);
    }

    private static final AddressLayout c_tracefunc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c_tracefunc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_tracefunc c_tracefunc
     * }
     */
    public static final AddressLayout c_tracefunc$layout() {
        return c_tracefunc$LAYOUT;
    }

    private static final long c_tracefunc$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_tracefunc c_tracefunc
     * }
     */
    public static final long c_tracefunc$offset() {
        return c_tracefunc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_tracefunc c_tracefunc
     * }
     */
    public static MemorySegment c_tracefunc(MemorySegment struct) {
        return struct.get(c_tracefunc$LAYOUT, c_tracefunc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_tracefunc c_tracefunc
     * }
     */
    public static void c_tracefunc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c_tracefunc$LAYOUT, c_tracefunc$OFFSET, fieldValue);
    }

    private static final AddressLayout c_profileobj$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c_profileobj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *c_profileobj
     * }
     */
    public static final AddressLayout c_profileobj$layout() {
        return c_profileobj$LAYOUT;
    }

    private static final long c_profileobj$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *c_profileobj
     * }
     */
    public static final long c_profileobj$offset() {
        return c_profileobj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *c_profileobj
     * }
     */
    public static MemorySegment c_profileobj(MemorySegment struct) {
        return struct.get(c_profileobj$LAYOUT, c_profileobj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *c_profileobj
     * }
     */
    public static void c_profileobj(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c_profileobj$LAYOUT, c_profileobj$OFFSET, fieldValue);
    }

    private static final AddressLayout c_traceobj$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("c_traceobj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *c_traceobj
     * }
     */
    public static final AddressLayout c_traceobj$layout() {
        return c_traceobj$LAYOUT;
    }

    private static final long c_traceobj$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *c_traceobj
     * }
     */
    public static final long c_traceobj$offset() {
        return c_traceobj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *c_traceobj
     * }
     */
    public static MemorySegment c_traceobj(MemorySegment struct) {
        return struct.get(c_traceobj$LAYOUT, c_traceobj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *c_traceobj
     * }
     */
    public static void c_traceobj(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(c_traceobj$LAYOUT, c_traceobj$OFFSET, fieldValue);
    }

    private static final AddressLayout current_exception$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("current_exception"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *current_exception
     * }
     */
    public static final AddressLayout current_exception$layout() {
        return current_exception$LAYOUT;
    }

    private static final long current_exception$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *current_exception
     * }
     */
    public static final long current_exception$offset() {
        return current_exception$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *current_exception
     * }
     */
    public static MemorySegment current_exception(MemorySegment struct) {
        return struct.get(current_exception$LAYOUT, current_exception$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *current_exception
     * }
     */
    public static void current_exception(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(current_exception$LAYOUT, current_exception$OFFSET, fieldValue);
    }

    private static final AddressLayout exc_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("exc_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyErr_StackItem *exc_info
     * }
     */
    public static final AddressLayout exc_info$layout() {
        return exc_info$LAYOUT;
    }

    private static final long exc_info$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyErr_StackItem *exc_info
     * }
     */
    public static final long exc_info$offset() {
        return exc_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem *exc_info
     * }
     */
    public static MemorySegment exc_info(MemorySegment struct) {
        return struct.get(exc_info$LAYOUT, exc_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem *exc_info
     * }
     */
    public static void exc_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(exc_info$LAYOUT, exc_info$OFFSET, fieldValue);
    }

    private static final AddressLayout dict$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dict"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *dict
     * }
     */
    public static final AddressLayout dict$layout() {
        return dict$LAYOUT;
    }

    private static final long dict$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *dict
     * }
     */
    public static final long dict$offset() {
        return dict$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *dict
     * }
     */
    public static MemorySegment dict(MemorySegment struct) {
        return struct.get(dict$LAYOUT, dict$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *dict
     * }
     */
    public static void dict(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dict$LAYOUT, dict$OFFSET, fieldValue);
    }

    private static final OfInt gilstate_counter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gilstate_counter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int gilstate_counter
     * }
     */
    public static final OfInt gilstate_counter$layout() {
        return gilstate_counter$LAYOUT;
    }

    private static final long gilstate_counter$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int gilstate_counter
     * }
     */
    public static final long gilstate_counter$offset() {
        return gilstate_counter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int gilstate_counter
     * }
     */
    public static int gilstate_counter(MemorySegment struct) {
        return struct.get(gilstate_counter$LAYOUT, gilstate_counter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int gilstate_counter
     * }
     */
    public static void gilstate_counter(MemorySegment struct, int fieldValue) {
        struct.set(gilstate_counter$LAYOUT, gilstate_counter$OFFSET, fieldValue);
    }

    private static final AddressLayout async_exc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("async_exc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *async_exc
     * }
     */
    public static final AddressLayout async_exc$layout() {
        return async_exc$LAYOUT;
    }

    private static final long async_exc$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *async_exc
     * }
     */
    public static final long async_exc$offset() {
        return async_exc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *async_exc
     * }
     */
    public static MemorySegment async_exc(MemorySegment struct) {
        return struct.get(async_exc$LAYOUT, async_exc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *async_exc
     * }
     */
    public static void async_exc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(async_exc$LAYOUT, async_exc$OFFSET, fieldValue);
    }

    private static final OfLong thread_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("thread_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long thread_id
     * }
     */
    public static final OfLong thread_id$layout() {
        return thread_id$LAYOUT;
    }

    private static final long thread_id$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long thread_id
     * }
     */
    public static final long thread_id$offset() {
        return thread_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long thread_id
     * }
     */
    public static long thread_id(MemorySegment struct) {
        return struct.get(thread_id$LAYOUT, thread_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long thread_id
     * }
     */
    public static void thread_id(MemorySegment struct, long fieldValue) {
        struct.set(thread_id$LAYOUT, thread_id$OFFSET, fieldValue);
    }

    private static final OfLong native_thread_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("native_thread_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long native_thread_id
     * }
     */
    public static final OfLong native_thread_id$layout() {
        return native_thread_id$LAYOUT;
    }

    private static final long native_thread_id$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long native_thread_id
     * }
     */
    public static final long native_thread_id$offset() {
        return native_thread_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long native_thread_id
     * }
     */
    public static long native_thread_id(MemorySegment struct) {
        return struct.get(native_thread_id$LAYOUT, native_thread_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long native_thread_id
     * }
     */
    public static void native_thread_id(MemorySegment struct, long fieldValue) {
        struct.set(native_thread_id$LAYOUT, native_thread_id$OFFSET, fieldValue);
    }

    private static final AddressLayout delete_later$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("delete_later"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *delete_later
     * }
     */
    public static final AddressLayout delete_later$layout() {
        return delete_later$LAYOUT;
    }

    private static final long delete_later$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *delete_later
     * }
     */
    public static final long delete_later$offset() {
        return delete_later$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *delete_later
     * }
     */
    public static MemorySegment delete_later(MemorySegment struct) {
        return struct.get(delete_later$LAYOUT, delete_later$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *delete_later
     * }
     */
    public static void delete_later(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(delete_later$LAYOUT, delete_later$OFFSET, fieldValue);
    }

    private static final OfLong critical_section$LAYOUT = (OfLong)$LAYOUT.select(groupElement("critical_section"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uintptr_t critical_section
     * }
     */
    public static final OfLong critical_section$layout() {
        return critical_section$LAYOUT;
    }

    private static final long critical_section$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uintptr_t critical_section
     * }
     */
    public static final long critical_section$offset() {
        return critical_section$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uintptr_t critical_section
     * }
     */
    public static long critical_section(MemorySegment struct) {
        return struct.get(critical_section$LAYOUT, critical_section$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uintptr_t critical_section
     * }
     */
    public static void critical_section(MemorySegment struct, long fieldValue) {
        struct.set(critical_section$LAYOUT, critical_section$OFFSET, fieldValue);
    }

    private static final OfInt coroutine_origin_tracking_depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("coroutine_origin_tracking_depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int coroutine_origin_tracking_depth
     * }
     */
    public static final OfInt coroutine_origin_tracking_depth$layout() {
        return coroutine_origin_tracking_depth$LAYOUT;
    }

    private static final long coroutine_origin_tracking_depth$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int coroutine_origin_tracking_depth
     * }
     */
    public static final long coroutine_origin_tracking_depth$offset() {
        return coroutine_origin_tracking_depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int coroutine_origin_tracking_depth
     * }
     */
    public static int coroutine_origin_tracking_depth(MemorySegment struct) {
        return struct.get(coroutine_origin_tracking_depth$LAYOUT, coroutine_origin_tracking_depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int coroutine_origin_tracking_depth
     * }
     */
    public static void coroutine_origin_tracking_depth(MemorySegment struct, int fieldValue) {
        struct.set(coroutine_origin_tracking_depth$LAYOUT, coroutine_origin_tracking_depth$OFFSET, fieldValue);
    }

    private static final AddressLayout async_gen_firstiter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("async_gen_firstiter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *async_gen_firstiter
     * }
     */
    public static final AddressLayout async_gen_firstiter$layout() {
        return async_gen_firstiter$LAYOUT;
    }

    private static final long async_gen_firstiter$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *async_gen_firstiter
     * }
     */
    public static final long async_gen_firstiter$offset() {
        return async_gen_firstiter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *async_gen_firstiter
     * }
     */
    public static MemorySegment async_gen_firstiter(MemorySegment struct) {
        return struct.get(async_gen_firstiter$LAYOUT, async_gen_firstiter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *async_gen_firstiter
     * }
     */
    public static void async_gen_firstiter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(async_gen_firstiter$LAYOUT, async_gen_firstiter$OFFSET, fieldValue);
    }

    private static final AddressLayout async_gen_finalizer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("async_gen_finalizer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *async_gen_finalizer
     * }
     */
    public static final AddressLayout async_gen_finalizer$layout() {
        return async_gen_finalizer$LAYOUT;
    }

    private static final long async_gen_finalizer$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *async_gen_finalizer
     * }
     */
    public static final long async_gen_finalizer$offset() {
        return async_gen_finalizer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *async_gen_finalizer
     * }
     */
    public static MemorySegment async_gen_finalizer(MemorySegment struct) {
        return struct.get(async_gen_finalizer$LAYOUT, async_gen_finalizer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *async_gen_finalizer
     * }
     */
    public static void async_gen_finalizer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(async_gen_finalizer$LAYOUT, async_gen_finalizer$OFFSET, fieldValue);
    }

    private static final AddressLayout context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *context
     * }
     */
    public static final AddressLayout context$layout() {
        return context$LAYOUT;
    }

    private static final long context$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *context
     * }
     */
    public static final long context$offset() {
        return context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *context
     * }
     */
    public static MemorySegment context(MemorySegment struct) {
        return struct.get(context$LAYOUT, context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *context
     * }
     */
    public static void context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(context$LAYOUT, context$OFFSET, fieldValue);
    }

    private static final OfLong context_ver$LAYOUT = (OfLong)$LAYOUT.select(groupElement("context_ver"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t context_ver
     * }
     */
    public static final OfLong context_ver$layout() {
        return context_ver$LAYOUT;
    }

    private static final long context_ver$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t context_ver
     * }
     */
    public static final long context_ver$offset() {
        return context_ver$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t context_ver
     * }
     */
    public static long context_ver(MemorySegment struct) {
        return struct.get(context_ver$LAYOUT, context_ver$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t context_ver
     * }
     */
    public static void context_ver(MemorySegment struct, long fieldValue) {
        struct.set(context_ver$LAYOUT, context_ver$OFFSET, fieldValue);
    }

    private static final OfLong id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t id
     * }
     */
    public static final OfLong id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t id
     * }
     */
    public static long id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t id
     * }
     */
    public static void id(MemorySegment struct, long fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final AddressLayout datastack_chunk$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("datastack_chunk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyStackChunk *datastack_chunk
     * }
     */
    public static final AddressLayout datastack_chunk$layout() {
        return datastack_chunk$LAYOUT;
    }

    private static final long datastack_chunk$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyStackChunk *datastack_chunk
     * }
     */
    public static final long datastack_chunk$offset() {
        return datastack_chunk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyStackChunk *datastack_chunk
     * }
     */
    public static MemorySegment datastack_chunk(MemorySegment struct) {
        return struct.get(datastack_chunk$LAYOUT, datastack_chunk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyStackChunk *datastack_chunk
     * }
     */
    public static void datastack_chunk(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(datastack_chunk$LAYOUT, datastack_chunk$OFFSET, fieldValue);
    }

    private static final AddressLayout datastack_top$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("datastack_top"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject **datastack_top
     * }
     */
    public static final AddressLayout datastack_top$layout() {
        return datastack_top$LAYOUT;
    }

    private static final long datastack_top$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject **datastack_top
     * }
     */
    public static final long datastack_top$offset() {
        return datastack_top$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject **datastack_top
     * }
     */
    public static MemorySegment datastack_top(MemorySegment struct) {
        return struct.get(datastack_top$LAYOUT, datastack_top$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject **datastack_top
     * }
     */
    public static void datastack_top(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(datastack_top$LAYOUT, datastack_top$OFFSET, fieldValue);
    }

    private static final AddressLayout datastack_limit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("datastack_limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject **datastack_limit
     * }
     */
    public static final AddressLayout datastack_limit$layout() {
        return datastack_limit$LAYOUT;
    }

    private static final long datastack_limit$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject **datastack_limit
     * }
     */
    public static final long datastack_limit$offset() {
        return datastack_limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject **datastack_limit
     * }
     */
    public static MemorySegment datastack_limit(MemorySegment struct) {
        return struct.get(datastack_limit$LAYOUT, datastack_limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject **datastack_limit
     * }
     */
    public static void datastack_limit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(datastack_limit$LAYOUT, datastack_limit$OFFSET, fieldValue);
    }

    private static final GroupLayout exc_state$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("exc_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _PyErr_StackItem exc_state
     * }
     */
    public static final GroupLayout exc_state$layout() {
        return exc_state$LAYOUT;
    }

    private static final long exc_state$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _PyErr_StackItem exc_state
     * }
     */
    public static final long exc_state$offset() {
        return exc_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem exc_state
     * }
     */
    public static MemorySegment exc_state(MemorySegment struct) {
        return struct.asSlice(exc_state$OFFSET, exc_state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _PyErr_StackItem exc_state
     * }
     */
    public static void exc_state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, exc_state$OFFSET, exc_state$LAYOUT.byteSize());
    }

    private static final AddressLayout previous_executor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("previous_executor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *previous_executor
     * }
     */
    public static final AddressLayout previous_executor$layout() {
        return previous_executor$LAYOUT;
    }

    private static final long previous_executor$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *previous_executor
     * }
     */
    public static final long previous_executor$offset() {
        return previous_executor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *previous_executor
     * }
     */
    public static MemorySegment previous_executor(MemorySegment struct) {
        return struct.get(previous_executor$LAYOUT, previous_executor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *previous_executor
     * }
     */
    public static void previous_executor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(previous_executor$LAYOUT, previous_executor$OFFSET, fieldValue);
    }

    private static final OfLong dict_global_version$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dict_global_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t dict_global_version
     * }
     */
    public static final OfLong dict_global_version$layout() {
        return dict_global_version$LAYOUT;
    }

    private static final long dict_global_version$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t dict_global_version
     * }
     */
    public static final long dict_global_version$offset() {
        return dict_global_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t dict_global_version
     * }
     */
    public static long dict_global_version(MemorySegment struct) {
        return struct.get(dict_global_version$LAYOUT, dict_global_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t dict_global_version
     * }
     */
    public static void dict_global_version(MemorySegment struct, long fieldValue) {
        struct.set(dict_global_version$LAYOUT, dict_global_version$OFFSET, fieldValue);
    }

    private static final AddressLayout threading_local_key$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("threading_local_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *threading_local_key
     * }
     */
    public static final AddressLayout threading_local_key$layout() {
        return threading_local_key$LAYOUT;
    }

    private static final long threading_local_key$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *threading_local_key
     * }
     */
    public static final long threading_local_key$offset() {
        return threading_local_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *threading_local_key
     * }
     */
    public static MemorySegment threading_local_key(MemorySegment struct) {
        return struct.get(threading_local_key$LAYOUT, threading_local_key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *threading_local_key
     * }
     */
    public static void threading_local_key(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(threading_local_key$LAYOUT, threading_local_key$OFFSET, fieldValue);
    }

    private static final AddressLayout threading_local_sentinel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("threading_local_sentinel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *threading_local_sentinel
     * }
     */
    public static final AddressLayout threading_local_sentinel$layout() {
        return threading_local_sentinel$LAYOUT;
    }

    private static final long threading_local_sentinel$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *threading_local_sentinel
     * }
     */
    public static final long threading_local_sentinel$offset() {
        return threading_local_sentinel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *threading_local_sentinel
     * }
     */
    public static MemorySegment threading_local_sentinel(MemorySegment struct) {
        return struct.get(threading_local_sentinel$LAYOUT, threading_local_sentinel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *threading_local_sentinel
     * }
     */
    public static void threading_local_sentinel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(threading_local_sentinel$LAYOUT, threading_local_sentinel$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

