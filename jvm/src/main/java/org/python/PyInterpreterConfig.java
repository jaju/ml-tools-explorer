// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int use_main_obmalloc;
 *     int allow_fork;
 *     int allow_exec;
 *     int allow_threads;
 *     int allow_daemon_threads;
 *     int check_multi_interp_extensions;
 *     int gil;
 * }
 * }
 */
public class PyInterpreterConfig {

    PyInterpreterConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_INT.withName("use_main_obmalloc"),
        Python_h.C_INT.withName("allow_fork"),
        Python_h.C_INT.withName("allow_exec"),
        Python_h.C_INT.withName("allow_threads"),
        Python_h.C_INT.withName("allow_daemon_threads"),
        Python_h.C_INT.withName("check_multi_interp_extensions"),
        Python_h.C_INT.withName("gil")
    ).withName("$anon$44:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt use_main_obmalloc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_main_obmalloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_main_obmalloc
     * }
     */
    public static final OfInt use_main_obmalloc$layout() {
        return use_main_obmalloc$LAYOUT;
    }

    private static final long use_main_obmalloc$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_main_obmalloc
     * }
     */
    public static final long use_main_obmalloc$offset() {
        return use_main_obmalloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_main_obmalloc
     * }
     */
    public static int use_main_obmalloc(MemorySegment struct) {
        return struct.get(use_main_obmalloc$LAYOUT, use_main_obmalloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_main_obmalloc
     * }
     */
    public static void use_main_obmalloc(MemorySegment struct, int fieldValue) {
        struct.set(use_main_obmalloc$LAYOUT, use_main_obmalloc$OFFSET, fieldValue);
    }

    private static final OfInt allow_fork$LAYOUT = (OfInt)$LAYOUT.select(groupElement("allow_fork"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int allow_fork
     * }
     */
    public static final OfInt allow_fork$layout() {
        return allow_fork$LAYOUT;
    }

    private static final long allow_fork$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int allow_fork
     * }
     */
    public static final long allow_fork$offset() {
        return allow_fork$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int allow_fork
     * }
     */
    public static int allow_fork(MemorySegment struct) {
        return struct.get(allow_fork$LAYOUT, allow_fork$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int allow_fork
     * }
     */
    public static void allow_fork(MemorySegment struct, int fieldValue) {
        struct.set(allow_fork$LAYOUT, allow_fork$OFFSET, fieldValue);
    }

    private static final OfInt allow_exec$LAYOUT = (OfInt)$LAYOUT.select(groupElement("allow_exec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int allow_exec
     * }
     */
    public static final OfInt allow_exec$layout() {
        return allow_exec$LAYOUT;
    }

    private static final long allow_exec$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int allow_exec
     * }
     */
    public static final long allow_exec$offset() {
        return allow_exec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int allow_exec
     * }
     */
    public static int allow_exec(MemorySegment struct) {
        return struct.get(allow_exec$LAYOUT, allow_exec$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int allow_exec
     * }
     */
    public static void allow_exec(MemorySegment struct, int fieldValue) {
        struct.set(allow_exec$LAYOUT, allow_exec$OFFSET, fieldValue);
    }

    private static final OfInt allow_threads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("allow_threads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int allow_threads
     * }
     */
    public static final OfInt allow_threads$layout() {
        return allow_threads$LAYOUT;
    }

    private static final long allow_threads$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int allow_threads
     * }
     */
    public static final long allow_threads$offset() {
        return allow_threads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int allow_threads
     * }
     */
    public static int allow_threads(MemorySegment struct) {
        return struct.get(allow_threads$LAYOUT, allow_threads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int allow_threads
     * }
     */
    public static void allow_threads(MemorySegment struct, int fieldValue) {
        struct.set(allow_threads$LAYOUT, allow_threads$OFFSET, fieldValue);
    }

    private static final OfInt allow_daemon_threads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("allow_daemon_threads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int allow_daemon_threads
     * }
     */
    public static final OfInt allow_daemon_threads$layout() {
        return allow_daemon_threads$LAYOUT;
    }

    private static final long allow_daemon_threads$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int allow_daemon_threads
     * }
     */
    public static final long allow_daemon_threads$offset() {
        return allow_daemon_threads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int allow_daemon_threads
     * }
     */
    public static int allow_daemon_threads(MemorySegment struct) {
        return struct.get(allow_daemon_threads$LAYOUT, allow_daemon_threads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int allow_daemon_threads
     * }
     */
    public static void allow_daemon_threads(MemorySegment struct, int fieldValue) {
        struct.set(allow_daemon_threads$LAYOUT, allow_daemon_threads$OFFSET, fieldValue);
    }

    private static final OfInt check_multi_interp_extensions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("check_multi_interp_extensions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int check_multi_interp_extensions
     * }
     */
    public static final OfInt check_multi_interp_extensions$layout() {
        return check_multi_interp_extensions$LAYOUT;
    }

    private static final long check_multi_interp_extensions$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int check_multi_interp_extensions
     * }
     */
    public static final long check_multi_interp_extensions$offset() {
        return check_multi_interp_extensions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int check_multi_interp_extensions
     * }
     */
    public static int check_multi_interp_extensions(MemorySegment struct) {
        return struct.get(check_multi_interp_extensions$LAYOUT, check_multi_interp_extensions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int check_multi_interp_extensions
     * }
     */
    public static void check_multi_interp_extensions(MemorySegment struct, int fieldValue) {
        struct.set(check_multi_interp_extensions$LAYOUT, check_multi_interp_extensions$OFFSET, fieldValue);
    }

    private static final OfInt gil$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gil"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int gil
     * }
     */
    public static final OfInt gil$layout() {
        return gil$LAYOUT;
    }

    private static final long gil$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int gil
     * }
     */
    public static final long gil$offset() {
        return gil$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int gil
     * }
     */
    public static int gil(MemorySegment struct) {
        return struct.get(gil$LAYOUT, gil$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int gil
     * }
     */
    public static void gil(MemorySegment struct, int fieldValue) {
        struct.set(gil$LAYOUT, gil$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

