// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _line_offsets {
 *     int ar_start;
 *     int ar_end;
 *     int ar_line;
 *     struct _opaque opaque;
 * }
 * }
 */
public class _line_offsets {

    _line_offsets() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Python_h.C_INT.withName("ar_start"),
        Python_h.C_INT.withName("ar_end"),
        Python_h.C_INT.withName("ar_line"),
        MemoryLayout.paddingLayout(4),
        _opaque.layout().withName("opaque")
    ).withName("_line_offsets");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ar_start$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ar_start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ar_start
     * }
     */
    public static final OfInt ar_start$layout() {
        return ar_start$LAYOUT;
    }

    private static final long ar_start$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ar_start
     * }
     */
    public static final long ar_start$offset() {
        return ar_start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ar_start
     * }
     */
    public static int ar_start(MemorySegment struct) {
        return struct.get(ar_start$LAYOUT, ar_start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ar_start
     * }
     */
    public static void ar_start(MemorySegment struct, int fieldValue) {
        struct.set(ar_start$LAYOUT, ar_start$OFFSET, fieldValue);
    }

    private static final OfInt ar_end$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ar_end"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ar_end
     * }
     */
    public static final OfInt ar_end$layout() {
        return ar_end$LAYOUT;
    }

    private static final long ar_end$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ar_end
     * }
     */
    public static final long ar_end$offset() {
        return ar_end$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ar_end
     * }
     */
    public static int ar_end(MemorySegment struct) {
        return struct.get(ar_end$LAYOUT, ar_end$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ar_end
     * }
     */
    public static void ar_end(MemorySegment struct, int fieldValue) {
        struct.set(ar_end$LAYOUT, ar_end$OFFSET, fieldValue);
    }

    private static final OfInt ar_line$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ar_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ar_line
     * }
     */
    public static final OfInt ar_line$layout() {
        return ar_line$LAYOUT;
    }

    private static final long ar_line$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ar_line
     * }
     */
    public static final long ar_line$offset() {
        return ar_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ar_line
     * }
     */
    public static int ar_line(MemorySegment struct) {
        return struct.get(ar_line$LAYOUT, ar_line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ar_line
     * }
     */
    public static void ar_line(MemorySegment struct, int fieldValue) {
        struct.set(ar_line$LAYOUT, ar_line$OFFSET, fieldValue);
    }

    private static final GroupLayout opaque$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("opaque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _opaque opaque
     * }
     */
    public static final GroupLayout opaque$layout() {
        return opaque$LAYOUT;
    }

    private static final long opaque$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _opaque opaque
     * }
     */
    public static final long opaque$offset() {
        return opaque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _opaque opaque
     * }
     */
    public static MemorySegment opaque(MemorySegment struct) {
        return struct.asSlice(opaque$OFFSET, opaque$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _opaque opaque
     * }
     */
    public static void opaque(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, opaque$OFFSET, opaque$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

