// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     PyObject ob_base;
 *     PyObject *func_globals;
 *     PyObject *func_builtins;
 *     PyObject *func_name;
 *     PyObject *func_qualname;
 *     PyObject *func_code;
 *     PyObject *func_defaults;
 *     PyObject *func_kwdefaults;
 *     PyObject *func_closure;
 *     PyObject *func_doc;
 *     PyObject *func_dict;
 *     PyObject *func_weakreflist;
 *     PyObject *func_module;
 *     PyObject *func_annotations;
 *     PyObject *func_typeparams;
 *     vectorcallfunc vectorcall;
 *     uint32_t func_version;
 * }
 * }
 */
public class PyFunctionObject {

    PyFunctionObject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _object.layout().withName("ob_base"),
        Python_h.C_POINTER.withName("func_globals"),
        Python_h.C_POINTER.withName("func_builtins"),
        Python_h.C_POINTER.withName("func_name"),
        Python_h.C_POINTER.withName("func_qualname"),
        Python_h.C_POINTER.withName("func_code"),
        Python_h.C_POINTER.withName("func_defaults"),
        Python_h.C_POINTER.withName("func_kwdefaults"),
        Python_h.C_POINTER.withName("func_closure"),
        Python_h.C_POINTER.withName("func_doc"),
        Python_h.C_POINTER.withName("func_dict"),
        Python_h.C_POINTER.withName("func_weakreflist"),
        Python_h.C_POINTER.withName("func_module"),
        Python_h.C_POINTER.withName("func_annotations"),
        Python_h.C_POINTER.withName("func_typeparams"),
        Python_h.C_POINTER.withName("vectorcall"),
        Python_h.C_INT.withName("func_version"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$36:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ob_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ob_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final GroupLayout ob_base$layout() {
        return ob_base$LAYOUT;
    }

    private static final long ob_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final long ob_base$offset() {
        return ob_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static MemorySegment ob_base(MemorySegment struct) {
        return struct.asSlice(ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static void ob_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    private static final AddressLayout func_globals$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_globals"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_globals
     * }
     */
    public static final AddressLayout func_globals$layout() {
        return func_globals$LAYOUT;
    }

    private static final long func_globals$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_globals
     * }
     */
    public static final long func_globals$offset() {
        return func_globals$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_globals
     * }
     */
    public static MemorySegment func_globals(MemorySegment struct) {
        return struct.get(func_globals$LAYOUT, func_globals$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_globals
     * }
     */
    public static void func_globals(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_globals$LAYOUT, func_globals$OFFSET, fieldValue);
    }

    private static final AddressLayout func_builtins$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_builtins"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_builtins
     * }
     */
    public static final AddressLayout func_builtins$layout() {
        return func_builtins$LAYOUT;
    }

    private static final long func_builtins$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_builtins
     * }
     */
    public static final long func_builtins$offset() {
        return func_builtins$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_builtins
     * }
     */
    public static MemorySegment func_builtins(MemorySegment struct) {
        return struct.get(func_builtins$LAYOUT, func_builtins$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_builtins
     * }
     */
    public static void func_builtins(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_builtins$LAYOUT, func_builtins$OFFSET, fieldValue);
    }

    private static final AddressLayout func_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_name
     * }
     */
    public static final AddressLayout func_name$layout() {
        return func_name$LAYOUT;
    }

    private static final long func_name$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_name
     * }
     */
    public static final long func_name$offset() {
        return func_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_name
     * }
     */
    public static MemorySegment func_name(MemorySegment struct) {
        return struct.get(func_name$LAYOUT, func_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_name
     * }
     */
    public static void func_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_name$LAYOUT, func_name$OFFSET, fieldValue);
    }

    private static final AddressLayout func_qualname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_qualname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_qualname
     * }
     */
    public static final AddressLayout func_qualname$layout() {
        return func_qualname$LAYOUT;
    }

    private static final long func_qualname$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_qualname
     * }
     */
    public static final long func_qualname$offset() {
        return func_qualname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_qualname
     * }
     */
    public static MemorySegment func_qualname(MemorySegment struct) {
        return struct.get(func_qualname$LAYOUT, func_qualname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_qualname
     * }
     */
    public static void func_qualname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_qualname$LAYOUT, func_qualname$OFFSET, fieldValue);
    }

    private static final AddressLayout func_code$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_code"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_code
     * }
     */
    public static final AddressLayout func_code$layout() {
        return func_code$LAYOUT;
    }

    private static final long func_code$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_code
     * }
     */
    public static final long func_code$offset() {
        return func_code$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_code
     * }
     */
    public static MemorySegment func_code(MemorySegment struct) {
        return struct.get(func_code$LAYOUT, func_code$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_code
     * }
     */
    public static void func_code(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_code$LAYOUT, func_code$OFFSET, fieldValue);
    }

    private static final AddressLayout func_defaults$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_defaults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_defaults
     * }
     */
    public static final AddressLayout func_defaults$layout() {
        return func_defaults$LAYOUT;
    }

    private static final long func_defaults$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_defaults
     * }
     */
    public static final long func_defaults$offset() {
        return func_defaults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_defaults
     * }
     */
    public static MemorySegment func_defaults(MemorySegment struct) {
        return struct.get(func_defaults$LAYOUT, func_defaults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_defaults
     * }
     */
    public static void func_defaults(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_defaults$LAYOUT, func_defaults$OFFSET, fieldValue);
    }

    private static final AddressLayout func_kwdefaults$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_kwdefaults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_kwdefaults
     * }
     */
    public static final AddressLayout func_kwdefaults$layout() {
        return func_kwdefaults$LAYOUT;
    }

    private static final long func_kwdefaults$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_kwdefaults
     * }
     */
    public static final long func_kwdefaults$offset() {
        return func_kwdefaults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_kwdefaults
     * }
     */
    public static MemorySegment func_kwdefaults(MemorySegment struct) {
        return struct.get(func_kwdefaults$LAYOUT, func_kwdefaults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_kwdefaults
     * }
     */
    public static void func_kwdefaults(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_kwdefaults$LAYOUT, func_kwdefaults$OFFSET, fieldValue);
    }

    private static final AddressLayout func_closure$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_closure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_closure
     * }
     */
    public static final AddressLayout func_closure$layout() {
        return func_closure$LAYOUT;
    }

    private static final long func_closure$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_closure
     * }
     */
    public static final long func_closure$offset() {
        return func_closure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_closure
     * }
     */
    public static MemorySegment func_closure(MemorySegment struct) {
        return struct.get(func_closure$LAYOUT, func_closure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_closure
     * }
     */
    public static void func_closure(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_closure$LAYOUT, func_closure$OFFSET, fieldValue);
    }

    private static final AddressLayout func_doc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_doc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_doc
     * }
     */
    public static final AddressLayout func_doc$layout() {
        return func_doc$LAYOUT;
    }

    private static final long func_doc$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_doc
     * }
     */
    public static final long func_doc$offset() {
        return func_doc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_doc
     * }
     */
    public static MemorySegment func_doc(MemorySegment struct) {
        return struct.get(func_doc$LAYOUT, func_doc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_doc
     * }
     */
    public static void func_doc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_doc$LAYOUT, func_doc$OFFSET, fieldValue);
    }

    private static final AddressLayout func_dict$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_dict"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_dict
     * }
     */
    public static final AddressLayout func_dict$layout() {
        return func_dict$LAYOUT;
    }

    private static final long func_dict$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_dict
     * }
     */
    public static final long func_dict$offset() {
        return func_dict$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_dict
     * }
     */
    public static MemorySegment func_dict(MemorySegment struct) {
        return struct.get(func_dict$LAYOUT, func_dict$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_dict
     * }
     */
    public static void func_dict(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_dict$LAYOUT, func_dict$OFFSET, fieldValue);
    }

    private static final AddressLayout func_weakreflist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_weakreflist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_weakreflist
     * }
     */
    public static final AddressLayout func_weakreflist$layout() {
        return func_weakreflist$LAYOUT;
    }

    private static final long func_weakreflist$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_weakreflist
     * }
     */
    public static final long func_weakreflist$offset() {
        return func_weakreflist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_weakreflist
     * }
     */
    public static MemorySegment func_weakreflist(MemorySegment struct) {
        return struct.get(func_weakreflist$LAYOUT, func_weakreflist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_weakreflist
     * }
     */
    public static void func_weakreflist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_weakreflist$LAYOUT, func_weakreflist$OFFSET, fieldValue);
    }

    private static final AddressLayout func_module$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_module"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_module
     * }
     */
    public static final AddressLayout func_module$layout() {
        return func_module$LAYOUT;
    }

    private static final long func_module$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_module
     * }
     */
    public static final long func_module$offset() {
        return func_module$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_module
     * }
     */
    public static MemorySegment func_module(MemorySegment struct) {
        return struct.get(func_module$LAYOUT, func_module$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_module
     * }
     */
    public static void func_module(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_module$LAYOUT, func_module$OFFSET, fieldValue);
    }

    private static final AddressLayout func_annotations$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_annotations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_annotations
     * }
     */
    public static final AddressLayout func_annotations$layout() {
        return func_annotations$LAYOUT;
    }

    private static final long func_annotations$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_annotations
     * }
     */
    public static final long func_annotations$offset() {
        return func_annotations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_annotations
     * }
     */
    public static MemorySegment func_annotations(MemorySegment struct) {
        return struct.get(func_annotations$LAYOUT, func_annotations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_annotations
     * }
     */
    public static void func_annotations(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_annotations$LAYOUT, func_annotations$OFFSET, fieldValue);
    }

    private static final AddressLayout func_typeparams$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("func_typeparams"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *func_typeparams
     * }
     */
    public static final AddressLayout func_typeparams$layout() {
        return func_typeparams$LAYOUT;
    }

    private static final long func_typeparams$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *func_typeparams
     * }
     */
    public static final long func_typeparams$offset() {
        return func_typeparams$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *func_typeparams
     * }
     */
    public static MemorySegment func_typeparams(MemorySegment struct) {
        return struct.get(func_typeparams$LAYOUT, func_typeparams$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *func_typeparams
     * }
     */
    public static void func_typeparams(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(func_typeparams$LAYOUT, func_typeparams$OFFSET, fieldValue);
    }

    private static final AddressLayout vectorcall$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vectorcall"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static final AddressLayout vectorcall$layout() {
        return vectorcall$LAYOUT;
    }

    private static final long vectorcall$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static final long vectorcall$offset() {
        return vectorcall$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static MemorySegment vectorcall(MemorySegment struct) {
        return struct.get(vectorcall$LAYOUT, vectorcall$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vectorcallfunc vectorcall
     * }
     */
    public static void vectorcall(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vectorcall$LAYOUT, vectorcall$OFFSET, fieldValue);
    }

    private static final OfInt func_version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("func_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t func_version
     * }
     */
    public static final OfInt func_version$layout() {
        return func_version$LAYOUT;
    }

    private static final long func_version$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t func_version
     * }
     */
    public static final long func_version$offset() {
        return func_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t func_version
     * }
     */
    public static int func_version(MemorySegment struct) {
        return struct.get(func_version$LAYOUT, func_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t func_version
     * }
     */
    public static void func_version(MemorySegment struct, int fieldValue) {
        struct.set(func_version$LAYOUT, func_version$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

