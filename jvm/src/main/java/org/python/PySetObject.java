// Generated by jextract

package org.python;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     PyObject ob_base;
 *     Py_ssize_t fill;
 *     Py_ssize_t used;
 *     Py_ssize_t mask;
 *     setentry *table;
 *     Py_hash_t hash;
 *     Py_ssize_t finger;
 *     setentry smalltable[8];
 *     PyObject *weakreflist;
 * }
 * }
 */
public class PySetObject {

    PySetObject() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _object.layout().withName("ob_base"),
        Python_h.C_LONG.withName("fill"),
        Python_h.C_LONG.withName("used"),
        Python_h.C_LONG.withName("mask"),
        Python_h.C_POINTER.withName("table"),
        Python_h.C_LONG.withName("hash"),
        Python_h.C_LONG.withName("finger"),
        MemoryLayout.sequenceLayout(8, setentry.layout()).withName("smalltable"),
        Python_h.C_POINTER.withName("weakreflist")
    ).withName("$anon$36:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ob_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ob_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final GroupLayout ob_base$layout() {
        return ob_base$LAYOUT;
    }

    private static final long ob_base$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static final long ob_base$offset() {
        return ob_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static MemorySegment ob_base(MemorySegment struct) {
        return struct.asSlice(ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject ob_base
     * }
     */
    public static void ob_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ob_base$OFFSET, ob_base$LAYOUT.byteSize());
    }

    private static final OfLong fill$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fill"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t fill
     * }
     */
    public static final OfLong fill$layout() {
        return fill$LAYOUT;
    }

    private static final long fill$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t fill
     * }
     */
    public static final long fill$offset() {
        return fill$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t fill
     * }
     */
    public static long fill(MemorySegment struct) {
        return struct.get(fill$LAYOUT, fill$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t fill
     * }
     */
    public static void fill(MemorySegment struct, long fieldValue) {
        struct.set(fill$LAYOUT, fill$OFFSET, fieldValue);
    }

    private static final OfLong used$LAYOUT = (OfLong)$LAYOUT.select(groupElement("used"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t used
     * }
     */
    public static final OfLong used$layout() {
        return used$LAYOUT;
    }

    private static final long used$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t used
     * }
     */
    public static final long used$offset() {
        return used$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t used
     * }
     */
    public static long used(MemorySegment struct) {
        return struct.get(used$LAYOUT, used$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t used
     * }
     */
    public static void used(MemorySegment struct, long fieldValue) {
        struct.set(used$LAYOUT, used$OFFSET, fieldValue);
    }

    private static final OfLong mask$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t mask
     * }
     */
    public static final OfLong mask$layout() {
        return mask$LAYOUT;
    }

    private static final long mask$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t mask
     * }
     */
    public static final long mask$offset() {
        return mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t mask
     * }
     */
    public static long mask(MemorySegment struct) {
        return struct.get(mask$LAYOUT, mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t mask
     * }
     */
    public static void mask(MemorySegment struct, long fieldValue) {
        struct.set(mask$LAYOUT, mask$OFFSET, fieldValue);
    }

    private static final AddressLayout table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * setentry *table
     * }
     */
    public static final AddressLayout table$layout() {
        return table$LAYOUT;
    }

    private static final long table$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * setentry *table
     * }
     */
    public static final long table$offset() {
        return table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * setentry *table
     * }
     */
    public static MemorySegment table(MemorySegment struct) {
        return struct.get(table$LAYOUT, table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * setentry *table
     * }
     */
    public static void table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(table$LAYOUT, table$OFFSET, fieldValue);
    }

    private static final OfLong hash$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static final OfLong hash$layout() {
        return hash$LAYOUT;
    }

    private static final long hash$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static final long hash$offset() {
        return hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static long hash(MemorySegment struct) {
        return struct.get(hash$LAYOUT, hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_hash_t hash
     * }
     */
    public static void hash(MemorySegment struct, long fieldValue) {
        struct.set(hash$LAYOUT, hash$OFFSET, fieldValue);
    }

    private static final OfLong finger$LAYOUT = (OfLong)$LAYOUT.select(groupElement("finger"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Py_ssize_t finger
     * }
     */
    public static final OfLong finger$layout() {
        return finger$LAYOUT;
    }

    private static final long finger$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Py_ssize_t finger
     * }
     */
    public static final long finger$offset() {
        return finger$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Py_ssize_t finger
     * }
     */
    public static long finger(MemorySegment struct) {
        return struct.get(finger$LAYOUT, finger$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Py_ssize_t finger
     * }
     */
    public static void finger(MemorySegment struct, long fieldValue) {
        struct.set(finger$LAYOUT, finger$OFFSET, fieldValue);
    }

    private static final SequenceLayout smalltable$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("smalltable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * setentry smalltable[8]
     * }
     */
    public static final SequenceLayout smalltable$layout() {
        return smalltable$LAYOUT;
    }

    private static final long smalltable$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * setentry smalltable[8]
     * }
     */
    public static final long smalltable$offset() {
        return smalltable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * setentry smalltable[8]
     * }
     */
    public static MemorySegment smalltable(MemorySegment struct) {
        return struct.asSlice(smalltable$OFFSET, smalltable$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * setentry smalltable[8]
     * }
     */
    public static void smalltable(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, smalltable$OFFSET, smalltable$LAYOUT.byteSize());
    }

    private static long[] smalltable$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * setentry smalltable[8]
     * }
     */
    public static long[] smalltable$dimensions() {
        return smalltable$DIMS;
    }
    private static final MethodHandle smalltable$ELEM_HANDLE = smalltable$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * setentry smalltable[8]
     * }
     */
    public static MemorySegment smalltable(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)smalltable$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * setentry smalltable[8]
     * }
     */
    public static void smalltable(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, smalltable(struct, index0), 0L, setentry.layout().byteSize());
    }

    private static final AddressLayout weakreflist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("weakreflist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PyObject *weakreflist
     * }
     */
    public static final AddressLayout weakreflist$layout() {
        return weakreflist$LAYOUT;
    }

    private static final long weakreflist$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PyObject *weakreflist
     * }
     */
    public static final long weakreflist$offset() {
        return weakreflist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PyObject *weakreflist
     * }
     */
    public static MemorySegment weakreflist(MemorySegment struct) {
        return struct.get(weakreflist$LAYOUT, weakreflist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PyObject *weakreflist
     * }
     */
    public static void weakreflist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(weakreflist$LAYOUT, weakreflist$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

